#%RAML 1.0
title: SLAS Admin
description: !include slas-admin-description.md
version: v1
mediaType: application/json
protocols: HTTPS
baseUri: https://{shortCode}.api.commercecloud.salesforce.com/shopper/auth-admin/{version}

securitySchemes:
   SlasSecurityScheme.BearerToken: !include slas-bearer-SecurityScheme.raml
  
uses:
  ApiStandards: exchange_modules/893f605e-10e2-423a-bdb4-f952f56eb6d8/api-standards/1.1.12/api-standards.raml

types:
  AdminAuthRoles:
    type: string
    description: Roles for SLAS Admin API access. The user will need to have SLAS_SERVICE_ADMIN role to access the admin APIs. SLAS_ORGANIZATION_ADMIN role is for Salesforce internal support users.
    enum: [SLAS_SERVICE_ADMIN, SLAS_ORGANIZATION_ADMIN]

  ClientType:
    type: string
    description: Client Type
    enum: [REF_ARCH, WEB_APP, MOBILE_APP, SITE_GENESIS]

  Client:
    type: object
    properties:
      clientId:
        description: Client ID
        type: string
        example: "client-id"
      name:
        description: Client Name
        type: string
        example: "Client Name"
      secret:
        description: Client Secret. The secret will only display on create and if the secret was updated when updating the client.
        type: string
        example: "client-secret"
      scopes:
        description: Scope
        type: string[]
        example: ["sfcc.products",
              "sfcc.catalogs",
              "sfcc.customers:ro"]
      redirectUri:
        description: Redirect URI
        type: ApiStandards.AbsoluteUrl
        example: "http://localhost/callback"
      channels:
        description: Client Channels
        type: string[]
        example: ["RefArch", "SiteGenensis"]
      isPrivateClient:
        description: Private or Public Client
        required: false
        type: boolean
        example: true

  ClientRequest:
    description: Used to create and update a SLAS Client
    properties:
      name:
        description: Client Name
        type: string
        example: "High Adventure Wear"
      clientId:
        description: SLAS client id. Must match the query parameter.
        type: string
        example: "client_id"
      secret:
        description: SLAS client secret. On create if left blank then a secret will be generated.
        type: string
        example: "client_secret"
      scopes:
        description: SLAS scopes
        type: string[]
        example: ["sfcc.products",
              "sfcc.catalogs",
              "sfcc.customers:ro"]
      redirectUri:
        description: SLAS redirect URL
        type: ApiStandards.AbsoluteUrl
        example: "http://localhost:9010/callback"
      channels:
        description: Client Channels
        type: string[]
        example: ["RefArch", "SiteGenensis"]
      isPrivateClient:
        description: Private or Public Client. If left blank the client will default to private.
        type: boolean
        example: true

  ClientListResponse:
    properties:
      data:
        description: An array of clients.
        type: array
        items:
          type: Client

  IdentityProvider:
    description: Identity provider
    properties:
      name: 
        description: Identity Provider Name
        type: string
        example: "Google Account"
      authUrl:
        description: Identity Provider auth URI
        type: ApiStandards.AbsoluteUrl
        example: "https://accounts.google.com/o/oauth2/v2/auth"
      tokenUrl:
        description: Identity Provider token URI
        type: ApiStandards.AbsoluteUrl
        example: "https://oauth2.googleapis.com/token"
      tokenInfoUrl:
        description: Identity Provider token info URI
        type: ApiStandards.AbsoluteUrl
        example: "https://oauth2.googleapis.com/tokeninfo"
      userInfoUrl:
        description: Identity Provider user info URI
        type: ApiStandards.AbsoluteUrl
        example: "https://www.googleapis.com/oauth2/v3/userinfo"
      redirectUrl:
        description: Identity Provider redirect URI
        type: ApiStandards.AbsoluteUrl
        example: "https://localhost:9010/my/callback"
      clientId:
        description: SLAS IDP Client Id
        type: string
        example: "934277749308-02dg4398n3s31ofge8cot46jirn3kpkf.apps.googleusercontent.com"
      clientSecret:
        description: SLAS IDP Client Secret
        type: string
        example: "aKZM1xEnZopNP2bm2gc3GKex"
      preferenceValue:
        description: SLAS IDP Preference Value
        type: boolean
        example: true

  IdentityProviderResponse:
      description: Identity provider Response
      properties:
        name: 
          description: Identity Provider Name
          type: string
          example: "Google Account"
        authUrl:
          description: Identity Provider auth URI
          type: ApiStandards.AbsoluteUrl
          example: "https://accounts.google.com/o/oauth2/v2/auth"
        tokenUrl:
          description: Identity Provider token URI
          type: ApiStandards.AbsoluteUrl
          example: "https://oauth2.googleapis.com/token"
        tokenInfoUrl:
          description: Identity Provider token info URI
          type: ApiStandards.AbsoluteUrl
          example: "https://oauth2.googleapis.com/tokeninfo"
        userInfoUrl:
          description: Identity Provider user info URI
          type: ApiStandards.AbsoluteUrl
          example: "https://www.googleapis.com/oauth2/v3/userinfo"
        redirectUrl:
          description: Identity Provider redirect URI
          type: ApiStandards.AbsoluteUrl
          example: "https://localhost:9010/my/callback"
        clientId:
          description: SLAS IDP Client Id
          type: string
          example: "934277749308-02dg4398n3s31ofge8cot46jirn3kpkf.apps.googleusercontent.com"
        clientSecret:
          description: SLAS IDP Client Secret
          type: string
          example: "aKZM1xEnZopNP2bm2gc3GKex"
        isPreferred:
          description: SLAS IDP Preference Value
          type: boolean
          example: true

  IdentityProviderListResponse:
    properties:
      data:
        description: An array of identity providers
        type: array
        items:
          type: IdentityProviderResponse

  TenantDto:
    description: Create Tenant Reqiest
    properties:
      instance:
        description: SLAS Tenant Id
        type: string
        example: "aaaa_prd"
      merchantName:
        description: SLAS Merchant Name
        type: string
        example: "Merchant Name"
      description:
        description: SLAS Tenant Description
        type: string
        example: "Tenant Description"
      contact:
        description: SLAS Tenant Contact Name
        type: string
        example: "Jerry Smith"
      emailAddress:
        description: SLAS Tenant Contact Email
        type: string
        example: "jerry@merchant.com"
      phoneNo:
        description: SLAS Tenant Contact Phone
        type: string
        example: "801-555-1234"

  Tenant:
    description: Tenant
    properties:
      tenantId:
        type: string
        example: "aaaa_prd"
      merchantId:
        type: integer
        example: 1
      description: 
        type: string
        example: SLAS Merchant Name
      contact:
        type: string
        example: SLAS Tenant Contact
      emailAddress:
        type: string
        example: tenant_contact@slas.tst
      phoneNo:
        type: string
        example: 000-000-0000
      isDeleted:
        type: boolean
        example: false
      status:
        type: string
        example: CLEAR

  TenantListResponse:
    properties:
      data:
        description: An array of tenants.
        type: array
        items:
          type: Tenant

  CredQualityResponse:
    properties:
      tenantId:
        type: string
        example: "aaaa_prd"
      checkCount:
        type: integer
        example: 40
      credsOkay: 
        type: integer
        example: 1024
      repeatedCompromisedUse:
        type: integer
        example: 12
      credsCompromised:
        type: integer
        example: 0
      exposure1:
        type: integer
        example: 0
      exposure2to4:
        type: integer
        example: 0
      exposure5to9:
        type: integer
        example: 0
      exposure10plus:
        type: integer
        example: 0
      pwdsOkay:
        type: integer
        example: 47
      pwdsCompromised:
        type: integer
        example: 3
      avgPwdStrength:
        type: number
        example: 5.0
      avgCredQualityMeasure:
        type: number
        example: 0.0
      avgPwdQualityMeasure:
        type: number
        example: 0.0
      medPwdStrength:
        type: number
        example: 0.0
      medCredQualityMeasure:
        type: number
        example: 0.0
      medPwdQualityMeasure:
        type: number
        example: 0.0

  CredQualityUserResponse:
    properties:
      tenantId:
        type: string
        example: "aaaa_prd"
      username:
        type: string
        example: "joe.shopper"
      email:
        type: string
        example: "joe.shopper@gmail.com"
      credQualityMeasure: 
        type: integer
        example: 1024
      pwdStrengthMeasure:
        type: integer
        example: 12
      pwdQualityMeasure:
        type: integer
        example: 0
      credChangeCount:
        type: integer
        example: 0
      loginCount:
        type: integer
        example: 0
      lastLoginDatetime:
        type: datetime
        example: 2021-08-18T16:41:41.090Z
      lastCredcheckDatetime:
        type: datetime
        example: 2021-02-18T16:41:41.090Z
      atoScore:
        type: integer
        example: 3
      atoLastDatetime: 
        type: datetime
        example: 2021-02-18T16:41:41.090Z
      atoLastSourceIp:
        type: string
      atoScoreHistory:
        type: string
        example: "5, 6, 7"

/tenants:
  get:
    description: Retrieve a list of tenants
    displayName: retrieveTenants
    securedBy:
            - SlasSecurityScheme.BearerToken: { role: [SLAS_SERVICE_ADMIN, SLAS_ORGANIZATION_ADMIN] }
    responses:
        401:
          description: Unauthorized. Wrong Tenant.
          body:
            application/json:
              type: ApiStandards.ErrorResponse
              example: {
                  "type": "TenantException",
                  "title": "Unable to retrieve resource because the tenant id was invalid"
                }
        404:
          description: Not Found.
          body:
            application/json:
              type: ApiStandards.ErrorResponse                
              example: {
                  "type": "TenantNotFoundException",
                  "title": "Unable to retrieve resource because no resource was found"
              }
        200:
          description: Success
          body:
            application/json:
              type: TenantListResponse
              examples: 
                Tenant : !include Examples/TenantListResponse.raml

  /{tenantId}:
    get:
      description: Retrieve a tenant by tenant id
      displayName: retrieveTenant
      securedBy:
              - SlasSecurityScheme.BearerToken: { role: [SLAS_SERVICE_ADMIN, SLAS_ORGANIZATION_ADMIN] }
      responses:
            400:
              description: Bad Request.
              body:
                application/json:
                  type: ApiStandards.ErrorResponse
                  example: {
                      "type": "TenantRequestException",
                      "title": "Unable to retrieve resource because the tenant id was invalid"
                    }
            401:
              description: Unauthorized. Wrong Tenant.
              body:
                application/json:
                  type: ApiStandards.ErrorResponse
                  example: {
                      "type": "TenantException",
                      "title": "Unable to retrieve resource because the tenant id was invalid"
                    }
            404:
              description: Not Found.
              body:
                application/json:
                  type: ApiStandards.ErrorResponse
                  example: {
                      "type": "TenantNotFoundException",
                      "title": "Unable to retrieve resource because no resource was found with that value"
                  }
            200:
              description: Success
              body:
                application/json:
                  type: Tenant
                  examples:
                    Tenant : !include Examples/Tenant.raml
    put:
        description: Create or Update a tenant.
        displayName: registerTenant
        body:
          application/json:
            examples: !include Examples/TenantDto.raml
        securedBy:
                - SlasSecurityScheme.BearerToken: { role: [SLAS_SERVICE_ADMIN, SLAS_ORGANIZATION_ADMIN] }
        responses:
          400:
            description: Bad Request.
            body:
              application/json:
                type: ApiStandards.ErrorResponse
                example: {
                    "type": "TenantUpdateException",
                    "title": "Unable to retrieve resource because the tenant id was invalid"
                  }
          401:
            description: Unauthorized. Wrong Tenant.
            body:
              application/json:
                type: ApiStandards.ErrorResponse
                example: {
                    "type": "TenantUpdateException",
                    "title": "Unable to retrieve resource because the tenant id was invalid"
                  }
          404:
            description: Not Found.
            body:
              application/json:
                example: {
                    "type": "TenantNotFoundException",
                    "title": "Unable to retrieve resource because no resource was found with that value"
                }
          409:
            description: Conflict.
            body:
              application/json:
                type: ApiStandards.ErrorResponse
                example: {
                    "type": "TenantAlreadyExistsException",
                    "title": "Tenant[abcd_prd] already exists!"
                  }
          200:
            description: Success - Tenant was updated
            body:
              application/json:
                type: Tenant
                examples: 
                  Tenant : !include Examples/Tenant.raml
          201:
            description: Success - Tenant was Created
            body:
              application/json:
                type: Tenant
                examples: 
                  Tenant : !include Examples/Tenant.raml
    delete:
      description: Delete a tenant
      displayName: deleteTenant
      securedBy:
              - SlasSecurityScheme.BearerToken: { role: [SLAS_SERVICE_ADMIN, SLAS_ORGANIZATION_ADMIN] }
      responses:
        400:
          description: Bad Request.
          body:
            application/json:
              type: ApiStandards.ErrorResponse
              example: {
                  "type": "TenantDeleteException",
                  "title": "Delete all clients associated with tenant before deleting tenant."
                }
        404:
          description: Not Found.
          body:
            application/json:
              type: ApiStandards.ErrorResponse
              example: {
                  "type": "TenantNotFoundException",
                  "title": "Tenant[abcd_prd] not found!"
                }
        204:
          description: No Content
    /clients:
      get:
        description: Retrieve/Get all tenant clients
        displayName: retrieveClients
        securedBy:
                - SlasSecurityScheme.BearerToken: { role: [SLAS_SERVICE_ADMIN] }
        responses:
          401:
            description: Unauthorized. Wrong Tenant.
            body:
              application/json:
                type: ApiStandards.ErrorResponse
                example: {
                    "type": "ClientTenantException",
                    "title": "Unable to retrieve resource because the tenant id was invalid"
                  }
          404:
            description: Not Found.
            body:
              application/json:
                type: ApiStandards.ErrorResponse
                example: {
                    "type": "ClientNotFoundException",
                    "title": "Unable to retrieve resource because no resource was found with that value"
                  }
          200:
            description: Success
            body:
              application/json:
                type: ClientListResponse
                examples: !include Examples/ClientListResponse.raml
                    
      /{clientId}:
        get:
          description: Retrieve a client
          displayName: retrieveClient
          securedBy:
                  - SlasSecurityScheme.BearerToken: { role: [SLAS_SERVICE_ADMIN, SLAS_ORGANIZATION_ADMIN] }
          responses:
            400:
              description: Bad Request.
              body:
                application/json:
                  type: ApiStandards.ErrorResponse
                  example: {
                      "type": "ClientRequestException",
                      "title": "Unable to retrieve resource because the client id was invalid"
                    }
            401:
              description: Unauthorized. Wrong Tenant.
              body:
                application/json:
                  type: ApiStandards.ErrorResponse
                  example: {
                      "type": "ClientTenantException",
                      "title": "Unable to retrieve resource because the tenant id was invalid"
                    }
            404:
              description: Not Found.
              body:
                application/json:
                  type: ApiStandards.ErrorResponse
                  example: {
                      "type": "ClientNotFoundException",
                      "title": "Unable to retrieve resource because no resource was found with that value"
                    }
            200:
              description: Success
              body:
                application/json:
                  type: Client
                  examples: 
                    Client: !include Examples/Client.raml
        put:
          description: Create or Update a client.
          displayName: registerClient
          securedBy:
                  - SlasSecurityScheme.BearerToken: { role: [SLAS_SERVICE_ADMIN] }
          body:
            application/json:
              type: ClientRequest
              examples:
                ClientRequest: !include Examples/ClientRequest.raml
          responses:
            400:
              description: Bad Request.
              body:
                application/json:
                  type: ApiStandards.ErrorResponse
                  example: {
                      "type": "ClientRequestException",
                      "title": "Unable to update resource because the request body was invalid"
                    }
            401:
              description: Unauthorized. Wrong Tenant.
              body:
                application/json:
                  type: ApiStandards.ErrorResponse
                  example: {
                      "type": "ClientTenantException",
                      "title": "Unable to update resource because the tenant id was invalid"
                    }
            404:
              description: Not Found.
              body:
                application/json:
                  type: ApiStandards.ErrorResponse
                  example: {
                      "type": "ClientNotFoundException",
                      "title": "Unable to update resource because no resource was found with that value"
                    }
            409:
              description: Conflict.
              body:
                application/json:
                  type: ApiStandards.ErrorResponse
                  example: {
                      "type": "ClientConflictException",
                      "title": "Unable to create resource because a duplicate resource was found"
                    }
            200:
              description: Success - Client was updated. The secret will only be returned if a secret was sent in for update.
              body:
                application/json:
                  type: Client
                  examples: 
                    Client: !include Examples/ClientWithSecret.raml
            201:
              description: Success - Client was Created. This is the only time the secret will be returned.
              body:
                application/json:
                  type: Client
                  examples: 
                    Client: !include Examples/ClientWithSecret.raml
        delete:
          description: Delete a client
          displayName: deleteClient
          securedBy:
                  - SlasSecurityScheme.BearerToken: { role: [SLAS_SERVICE_ADMIN, SLAS_ORGANIZATION_ADMIN] }
          responses:
            400:
              description: Bad Request.
              body:
                application/json:
                  type: ApiStandards.ErrorResponse
                  example: {
                    "type": "ClientRequestException",
                    "title": "Unable to delete resource because the request was invalid"
                  }
            401:
              description: Unauthorized. Wrong Tenant.
              body:
                application/json:
                  type: ApiStandards.ErrorResponse
                  example: {
                      "type": "ClientTenantException",
                      "title": "Unable to delete resource because the tenant id was invalid"
                    }
            404:
              description: Not Found.
              body:
                application/json:
                  type: ApiStandards.ErrorResponse
                  example: {
                      "type": "ClientNotFoundException",
                      "title": "Unable to delete resource because no resource was found with that value"
                    }
            204:
              description: No Content
    /idps:
      get:
        description: Retrieve/Get all tenant identity providers
        displayName: retrieveIdentityProviders
        securedBy:
                - SlasSecurityScheme.BearerToken:  { role: [SLAS_SERVICE_ADMIN] }
        responses:
          400:
            description: Bad Request.
            body:
              application/json:
                type: ApiStandards.ErrorResponse
                example: {
                    "type": "IdpRequestException",
                    "title": "Unable to retrieve resource because the tenant was deleted"
                  }
          401:
            description: Unauthorized. Wrong Tenant.
            body:
              application/json:
                type: ApiStandards.ErrorResponse
                example: {
                    "type": "IdpTenantException",
                    "title": "Unable to retrieve resource because the tenant id was invalid"
                  }
          404:
            description: Not Found.
            body:
              application/json:
                type: ApiStandards.ErrorResponse
                example: {
                    "type": "IdpNotFoundException",
                    "title": "Unable to retrieve resource, no resource was found with that value"
                  }
          200:
            description: Success
            body:
              application/json:
                type: IdentityProviderListResponse
                examples: 
                  IdentityProvider : !include Examples/IdpListResponse.raml
      /{idpId}:
        get:
          description: Retrieve/Get a specific identity provider
          displayName: retrieveIdentityProvider
          securedBy:
                - SlasSecurityScheme.BearerToken:  { role: [SLAS_SERVICE_ADMIN, SLAS_ORGANIZATION_ADMIN] }
          responses:
            400:
              description: Bad Request.
              body:
                application/json:
                  type: ApiStandards.ErrorResponse
                  example: {
                      "type": "IdpRequestException",
                      "title": "Unable to create resource because the request was invalid"
                    }
            401:
              description: Unauthorized. Wrong Tenant.
              body:
                application/json:
                  type: ApiStandards.ErrorResponse
                  example: {
                      "type": "IdpTenantException",
                      "title": "Unable to create resource because the tenant id was invalid"
                    }
            404:
              description: Not Found.
              body:
                application/json:
                  type: ApiStandards.ErrorResponse
                  example: {
                      "type": "IdpNotFoundException",
                      "title": "Unable to delete resource, no resource was found with that value"
                    }
            200:
              description: Success
              body:
                application/json:
                  type: IdentityProvider
                  examples: 
                    IdentityProvider : !include Examples/IdentityProvider.raml
        put:
            description: Create or Update an identity provider
            displayName: registerIdentityProvider
            body:
              application/json:
                type: IdentityProvider
                examples:
                  IdentityProvider: !include Examples/IdentityProvider.raml
            securedBy:
                    - SlasSecurityScheme.BearerToken:  { role: [SLAS_SERVICE_ADMIN, SLAS_ORGANIZATION_ADMIN] }
            responses:
              400:
                description: Bad Request.
                body:
                  application/json:
                    type: ApiStandards.ErrorResponse
                    example: {
                        "type": "IdpRequestException",
                        "title": "Unable to update resource because the request body was invalid"
                      }
              401:
                description: Unauthorized. Wrong Tenant.
                body:
                  application/json:
                    type: ApiStandards.ErrorResponse
                    example: {
                        "type": "IdpTenantException",
                        "title": "Unable to update resource because the tenant id was invalid"
                      }
              404:
                description: Not Found.
                body:
                  application/json:
                    type: ApiStandards.ErrorResponse
                    example: {
                        "type": "IdpNotFoundException",
                        "title": "Unable to update resource because no resource was found with that value"
                      }
              409:
                description: Conflict - Duplicate
                body:
                  application/json:
                    type: ApiStandards.ErrorResponse
                    example: {
                        "type": "IdpConflictException",
                        "title": "Unable to create resource because a duplicate resource was found"
                      }
              200:
                description: Success - Updated an Idp.
                body:
                  application/json:
                    type: IdentityProviderResponse
                    examples: 
                      IdentityProviderResponse : !include Examples/IdentityProviderResponse.raml
              201:
                description: Success - Created an Idp.
                body:
                  application/json:
                    type: IdentityProviderResponse
                    examples: 
                      IdentityProviderResponse : !include Examples/IdentityProviderResponse.raml
        delete:
          description: Delete a identity provider
          displayName: deleteIdentityProvider
          securedBy:
                  - SlasSecurityScheme.BearerToken:  { role: [SLAS_SERVICE_ADMIN, SLAS_ORGANIZATION_ADMIN] }
          responses:
            400:
              description: Bad Request.
              body:
                application/json:
                  type: ApiStandards.ErrorResponse
                  example: {
                      "type": "IdpRequestException",
                      "title": "Unable to create resource because the request was invalid"
                    }
            401:
              description: Unauthorized. Wrong Tenant.
              body:
                application/json:
                  type: ApiStandards.ErrorResponse
                  example: {
                      "type": "IdpTenantException",
                      "title": "Unable to create resource because the tenant id was invalid"
                    }
            404:
              description: Not Found.
              body:
                application/json:
                  type: ApiStandards.ErrorResponse
                  example: {
                      "type": "IdpNotFoundException",
                      "title": "Unable to delete resource, no resource was found with that value"
                    }
            204:
              description: No Content
    /customers/{customerId}:
      delete:
        description: Completely deletes all shopper records associated with the shoppers customer id. The email id will be used if passed as a query parameter. This conforms to the GDPR regulations.
        displayName: deleteShopper
        securedBy:
                - SlasSecurityScheme.BearerToken: { role: [SLAS_SERVICE_ADMIN, SLAS_ORGANIZATION_ADMIN] }
        queryParameters:
          emailAddress:
            description: The shoppers email address.
            required: false
            type: string   
            example: "test.user@salesforce.tst"
        responses:
          400:
            description: Bad Request.
            body:
              application/json:
                type: ApiStandards.ErrorResponse
                example: {
                    "type": "ShopperDeleteException",
                    "title": "Email address does not match stored email address"
                  }
          404:
            description: Not Found.
            body:
              application/json:
                type: ApiStandards.ErrorResponse
                example: {
                    "type": "ShopperNotFoundException",
                    "title": "SLAS USER was not found by customer id"
                  }

          204:
            description: No Content

    /cred-qual/login:
      get:
        description: Retrieve credential quality statistics for a tenant.
        displayName: retrieveCredQuailtyStats
        securedBy:
                - SlasSecurityScheme.BearerToken: { role: [SLAS_SERVICE_ADMIN, SLAS_ORGANIZATION_ADMIN] }
        queryParameters:
          action:
            description: Returns averages
            required: false
            type: string   
            example: "avgs"
        responses:
          200:
            description: !include tenant-credential-quality-statistics-description.md
            body:
              application/json:
                type: CredQualityResponse
                examples: 
                  CredQualityResponse : !include Examples/CredQualityResponse.raml
          400:
            description: Bad Request.
            body:
              application/json:
                type: ApiStandards.ErrorResponse
                example: {
                    "type": "CredentialQualityException",
                    "title": "Invalid Tenant Id"
                  }
          404:
            description: Not Found.
            body:
              application/json:
                type: ApiStandards.ErrorResponse
                example: {
                    "type": "CredentialQualityException",
                    "title": "Credential Quality Not Found for tenant"
                  }
    /cred-qual/user:
      get:
        description: Retrieve credential quality statistics for a user.
        displayName: retrieveCredQuailtyUserStats
        securedBy:
                - SlasSecurityScheme.BearerToken: { role: [SLAS_SERVICE_ADMIN, SLAS_ORGANIZATION_ADMIN] }
        queryParameters:
          username:
            description: Login id or email address.
            required: false
            type: string   
            example: "joe.shopper@gmail.com"
        responses:
          200:
            description: !include credential-quality-statistics-description.md
            body:
              application/json:
                type: CredQualityUserResponse
                examples: 
                  CredQualityResponse : !include Examples/CredQualityUserResponse.raml
          400:
            description: Bad Request.
            body:
              application/json:
                type: ApiStandards.ErrorResponse
                example: {
                    "type": "CredentialQualityException",
                    "title": "Invalid Tenant Id"
                  }
          404:
            description: Not Found.
            body:
              application/json:
                type: ApiStandards.ErrorResponse
                example: {
                    "type": "CredentialQualityException",
                    "title": "Credential Quality not found for user"
                  }          

