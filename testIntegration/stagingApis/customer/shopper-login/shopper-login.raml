#%RAML 1.0
title: Shopper Login
description: !include shopper-login-and-api-access-description.md
version: v1
mediaType: application/json
protocols: HTTPS
baseUri: https://{shortCode}.api.commercecloud.salesforce.com/shopper/auth/{version}
baseUriParameters:
  shortCode:
    description: A region-specific merchant identifier.
    example: 0dnz6ope
    pattern: ^([a-z0-9]+)(-[a-z0-9]+)*$
traits:
  SlasRateLimit: !include traits/slasRateLimit.raml

uses:
  ApiStandards: exchange_modules/893f605e-10e2-423a-bdb4-f952f56eb6d8/api-standards/1.1.15/api-standards.raml
  CommerceCloudStandards: exchange_modules/893f605e-10e2-423a-bdb4-f952f56eb6d8/commerce-cloud-standards/1.0.24/commerce-cloud-standards.raml
types:
  ResponseType:
    type: string
    description: Response Type
    enum: [code]
  GrantType:
    type: string
    description: Grant Type
    enum:
      [
        authorization_code,
        refresh_token,
        client_credentials,
        authorization_code_pkce,
        session_bridge,
      ]
  TokenType:
    type: string
    description: Token Type
    enum: [Bearer]
  TokenTypeHint:
    type: string
    description: Token Type Hint
    enum: [access_token, refresh_token]
  ThirdPartyIdps:
    type: string
    description: IDPs that work with SLAS. Use `ecom` when using ECOM is the identity provider.
    enum:
      [
        apple,
        auth0,
        azure,
        azure_adb2c,
        cognito,
        ecom,
        facebook,
        forgerock,
        gigya,
        gigya_socialize,
        google,
        okta,
        ping,
        salesforce,
      ]
  PasswordActionModes:
    type: string
    description: Password Action delivery modes
    enum: [callback, sms]
  TrustedOnBehalf:
    type: string
    description: Type of system used for Trusted System On Behalf of requests.
    enum: [ts_ext_on_behalf_of]
  TokenRequest:
    type: object
    properties:
      refresh_token:
        description: The long-term token used to refresh the short term access token. Required only with a grant type of `refresh_token`.
        type: string
        required: false
        maxLength: 256
      code:
        description: Authorization code from the OAuth 2.1 service received in the front channel that is used to get access tokens and refresh tokens. Required with a grant type of `authorization_code` and `session_bridge`.
        type: string
        required: false
        maxLength: 256
        example: "M0t1K0pyoFKhBpUZnuUYO07xf8iYyMJrAc7h31h_ra8.gglPClJHsofqdTm_yPe5n6m2yCXzFmD8qICwIEjQGVA"
      usid:
        description: The shopper's unique identifier, if known. If not provided, a new USID is generated.
        type: string
        required: false
        example: "54ad2c5a-91f0-44ab-817c-73d6b86872d9"
      grant_type:
        description: OAuth 2.1 grant type
        type: GrantType
        example: "authorization_code"
      redirect_uri:
        description: |
          The redirect URI that was used when getting the authorization code. A variety of URI formats and wildcards for host are supported, but app links like `airbnb://` or `fb://` are not. 

          Examples of supported URIs:
            - `http://localhost:3000/callback`
            - `https://example.com/callback`
            - `com.example.app:redirect_uri_path`
            - ` *.subdomain.topleveldomain.com`
        type: string
        required: false
        maxLength: 256
        example: "http://localhost:3000/callback"
      code_verifier:
        description: |-
          PKCE code verifier. Created by the client calling the `login` endpoint.

          The `code_verifier` should be a high entropy cryptographically random string with a minimum of 43 characters and a maximum of 128 characters.

          The `code_verifier` is optional when using a private client id for the token request.
        type: string
        maxLength: 128
        required: false
      client_id:
        description: The SLAS client ID. Required when the grant type is `authorization_code_pkce`.
        required: false
        type: string
        maxLength: 40
        example: "z99ec276-cg53-4g94-cf72-76f300c6778zc"
      channel_id:
        description: The channel (ECOM site) that the user is associated with.
        required: false
        type: string
        maxLength: 100
        example: "RefArch"
      dnt:
        description: |-
          This is an optional parameter to set `Do Not Track` for the session. 
          
          SLAS is making this available, but will not be used by ECOM until after the 24.4 release.
          
          Values are:
            * `false`
            * `true`
          
          If not added the `dnt` value will default to `false`.
          
        required: false
        type: string
        example: "true"
  TokenResponse:
    type: object
    properties:
      access_token:
        description: |-
          Short term shopper JWT that can be used to access Shopper APIs. Valid for 30 minutes.

          A trusted agent shopper JWT is valid for 15 min.
        type: string
        example: |-
          "eyJ2ZXIiOiIxLjAiLCJraWQiOiJTTEFTIiwidHlwIjoiand0IiwiY2x2IjoiSjIuMS4wIiwiYWxnIjoiRVMyNTYifQ.eyJhdWQiOiJjb3JlL2Rldi9idGluZ2V5bHRtMiIsImF1dCI6IkdVSUQiLCJzdWIiOiJ1c2lkOjo1NGFkMmM1YS05MWYwLTQ0YWItODE3Yy03M2Q2Yjg2ODcyZDk6OnVwbjpndWVzdCIsIm5iZiI6MTU4Mjg0NTYyNCwiY3R4Ijoic2ZkYy5jb21tZXJjZWNsb3VkIiwiaXNzIjoiY29yZS9kZXYvYnRpbmdleWx0bTIiLCJzdHkiOiJVc2VyIiwiaXN0IjoxLCJleHAiOjE1ODI4NDU3NDQsImlhdCI6MTU4Mjg0NTY1NCwianRpIjoiQzJDOTA0ODg2NDA3MDkwNDg4NjQwNzMyMjExNzQ1ODEyMTQzIn0.2a6lMBSY17PrhDO8pvEk7PCXW_nkguMHi4J-Tuirkz-ETB6rnKyuRjF5yD6B55tMvm8dO8ulAHyDYqjObMxLJg"
      id_token:
        description: User ID token. Valid for 30 minutes.
        type: string
        example: "eyJraWQiOiI3NGU2YjMxZS1lYTczLTQ3OTYtOWRkYi1jMDJmZGI4ZDgwYmUiLCJhbGciOiJSUzI1NiJ9.eyJzdWIiOiJ1c2lkOmQ1MDBhMzY5LTc1MWQtNDkzYy1iNDAzLThmOThmYjg3MTdiNiIsImF1ZCI6IjU1M2FjOGFjLTRkYjktNGVkMy04MjVjLTNhZTNiZjVkMzI3YiIsImlzcyI6ImRldi51cy5zaG9wcGVyLmNjLnNhbGVzZm9yY2UuY29tIiwibmFtZSI6ImJsYWlyLnNsYXMudGVzdEBnbWFpbC5jb20iLCJleHAiOjE1OTExMTE0MzgsImlhdCI6MTU5MTEwOTYzOCwiZW1haWwiOiJibGFpci5zbGFzLnRlc3RAZ21haWwuY29tIn0.KgpAcq-G9Lz7IGnjkJlaFLFXYncVCwcVrRIuy3bEfgzRozqaDRvAori4oOz4RtgYjmoc5x2euoisHL0mVnHgPKOdYBty1wTJqneJEQt6hP4Kp0KFciID_ILCi-DE8VWS5t0NknnMP_iKhIkqcRL48iwPFUWkWA6AEWxE_yvJLNRLithsSxsx7EfBfpD8Hr2b5tMEwImQNmJNYGRTI4LSmcYspBORvJoAnfGpMC0kglxl40bhf5j4ItX4_DiWQC4zaGYD-HJV4BDr6C7iGCs5ZVPypF0yQD3iBio26fwj9Ys5WF9XMtPtqET2kqsz6fDC5GkE6HTUHH_r87jxbDq-8w"
      refresh_token:
        description: |-
          Long term refresh token that can be used to refresh an access token. Valid for 30 days. 
          
          The refresh_token will not be returned for trusted agents JWTs. A JWT for trusted agents expires after 15 minutes and is not refreshable. When expired, then app must restart the authorization flow and make another request to the /trusted-agent/authorize endpoint.

        type: string
        example: "EgMYpjfFKdlSy-a3PYeyihmP95IpIp3FaDpPmVH1yu8.lahomBi7zJbRa6yKAuAAiKu3lprTPsEueKwqcBvhRLU"
      expires_in:
        description: Remaining access token expiry time, in seconds.
        type: integer
        example: 900
      refresh_token_expires_in:
        description: Remaining refresh token expiry time, in seconds.
        type: number
        example: 2592000
      token_type:
        description: Token Type
        type: TokenType
      usid:
        type: string
        description: The unique shopper ID. Returned when using the `client_credentials` grant type.
        example: 18cda486-fe32-4e27-888b-6e4f89938e67
      customer_id:
        type: string
        description: Customer's ID
        example: "1000005"
      enc_user_id:
        type: string
        description: MD5 Hashed ECOM user ID in uppercase.
        example: "45D39A8499A95288F82855427EBA99B5"
      idp_access_token:
        type: string
        maxLength: 8192
        description: This is the access token that is returned from the IDP. The IDP access token is returned to be able to make calls into the IDP outside of SLAS.
        example: "eyJraWQiOiJYS21HbHVuSm0zSlBTMHNjQXZXV19XQlYtRi1wMkxLSDR0V05UMHVVSjVJIiwiYWxnIjoiUlMyNTYifQ.eyJ2ZXIiOjEsImp0aSI6IkFULjFMY0xxTWhqM2t0N1FKeFhxQ0VtdGZOOVV2eUcweW1meDFxZG9BdzF1NWMub2FyeXhveHF0QUtxaVFMbkM1ZDYiLCJpc3MiOiJodHRwczovL2Rldi05NTY1MjM2Lm9rdGEuY29tIiwiYXVkIjoiaHR0cHM6Ly9kZXYtOTU2NTIzNi5va3RhLmNvbSIsInN1YiI6Im9rdGEuc2xhcy50ZXN0IiwiaWF0IjoxNjc5Njk4MzA4LCJleHAiOjE2Nzk3MDE5MDgsImNpZCI6IjBvYTJrNXNma0JXZ0poTEVHNWQ2IiwidWlkIjoiMDB1MzhxZGpuU2NMT0IxbXE1ZDYiLCJzY3AiOlsib2ZmbGluZV9hY2Nlc3MiLCJvcGVuaWQiLCJlbWFpbCIsInByb2ZpbGUiXSwiYXV0aF90aW1lIjoxNjc5Njk4MzA2fQ.FDbGsnZGwTYVKGSlAo6jqcjG2HQ_BqQKRk72M5h69DRHyOM4wngsEELN_Wtgj3E77sP7IOmIKjiK5SFP17ADMbKZptVr2pqaMVF3PuU3Cbl_MgXZValfT-z12jHRq9sHMfsdTjY2RnvG44ZDFKc2no8mdL6IJ1MfCaZT5Tql5Ktq_UgudaWFsYqad3ETcmp5Y8ivz1bFnqud0sO9D9JzYOtfd9h71JKcsSC2rXc_Si-INPKKaGl8CDgaLXxu_Am9twJpUenHLpy0BerhcVvdFz7_611E53xOT_Esrc1pe-XAZtlYsJFnhxTBDT342ukiSWk2m6juVappv1GsRfUf2g"

  TokenActionRequest:
    type: object
    properties:
      token:
        description: Token to inspect or revoke.
        type: string
        example: "EgMYpjfFKdlSy-a3PYeyihmP95IpIp3FaDpPmVH1yu8.lahomBi7zJbRa6yKAuAAiKu3lprTPsEueKwqcBvhRLU"
      token_type_hint:
        description: Token type hint. For inspecting, use `access_token` or `refresh_token`. For revoking, use `refresh_token`.
        type: TokenTypeHint
        required: false
  TrustedSystemTokenRequest:
    type: object
    description: A request for an access token on behalf of a registered user whose credentials are stored using a third party system.
    properties:
      usid:
        description: The shopper's unique identifier, if known. If not provided, a new USID is generated.
        type: string
        required: false
        example: "54ad2c5a-91f0-44ab-817c-73d6b86872d9"
      grant_type:
        description: Grant Type. Must be set to `client_credentials` for trusted system requests.
        type: GrantType
        example: "client_credentials"
      hint:
        description: The type of trusted system to use.
        type: TrustedOnBehalf
        example: "ts_ext_on_behalf_of"
      login_id:
        description: |-
          The ID used by the shopper for trusted system access. 

          If set to `guest`, a token is returned for a guest user.
        type: string
        maxLength: 128
        example: "samantha.sampleson@example.com"
      idp_origin:
        description: The external IDP that the user is associated with. Use `ecom` as the `idp_origin` value when using ECOM as the identity provider.
        type: ThirdPartyIdps
        maxLength: 16
        example: "google"
      client_id:
        description: The SLAS public client ID for use with trusted-system requests.
        type: string
        maxLength: 40
        example: "6c388ebd-6843-4863-aef9-781382c9e8cd"
      channel_id:
        description: The channel (ECOM site) that the user is associated with.
        type: string
        maxLength: 100
        example: "RefArch"
      email_id:
        description: The email address for the shopper that is used for trusted-system requests. If not provided, `login_id` is used instead.
        type: string
        required: false
        maxLength: 128
        example: "samantha.sampleson@example.com"
      dnt:
        description: |-
          This is an optional parameter to set `Do Not Track` for the session.

          SLAS is making this available, but will not be used by ECOM until after the 24.4 release.
          
          Values are:
            * `false`
            * `true`
          
          If not added the `dnt` value will default to `false`.
          
        required: false
        type: string
        example: "true"
  TrustedAgentTokenRequest:
    properties:
      agent_id:
        description: |-
          The ID of the merchant. If passed in, the `agent_id` will be validated using the SUB claim in the response from Account Manager.

          This is an optional parameter unless the request is for a Trusted Agent on Behalf then `agent_id` is required.
        type: string
        required: false
        maxLength: 40
        example: "merchant@example.com"
      client_id:
        description: |-
          The SLAS public client ID or SLAS private client ID for use with trusted-system requests.

          The `client_id` is not needed if a using a SLAS private `client_id` and the `_sfdc_client_auth` header.
        type: string
        required: true
        maxLength: 40
        example: "6c388ebd-6843-4863-aef9-781382c9e8cd"
      channel_id:
        description: The channel (ECOM site) that the user is associated with.
        type: string
        required: true
        maxLength: 100
        example: "RefArch"
      code_verifier:
        description: |-
          PKCE code verifier. Created by the caller.

          The `code_challenge` is created by SHA256 hashing the `code_verifier` and Base64 encoding the resulting hash.

          The `code_verifier` should be a high entropy cryptographically random string with a minimum of 43 characters and a maximum of 128 characters.

          The `code_verifier` is not needed if a using a SLAS private `client_id` and the `_sfdc_client_auth` header.
        type: string
        example: "Ar0lAwU_jsuA~ZXX8-JnMbZFxrnDot2OtgLEi1kOT_FxD6Bo0EQDbbrvoym9xHvatNGnNzrObLJeK6e4U9m4pveRMbdwNGa4jwiAlKGvijVn0PW0hqb03_w1gQE00wTo"
      grant_type:
        description: Grant Type. Must be set to `client_credentials` for trusted agent requests.
        type: GrantType
        required: true
        example: "client_credentials"
      login_id:
        description: |-
          The ID is the shopper for trusted agent access.
        type: string
        required: true
        maxLength: 128
        example: "jack.shopper@example.com"
      idp_origin:
        description: The IDP that the user is associated with.
        type: string
        required: true
        maxLength: 16
        example: "ecom"
      usid:
        description: The shopper's unique identifier, if known. If not provided, a new USID is generated.
        type: string
        required: false
        example: "54ad2c5a-91f0-44ab-817c-73d6b86872d9"
      dnt:
        description: |-
          This is an optional parameter to set `Do Not Track` for the session. 

          SLAS is making this available, but will not be used by ECOM until after the 24.4 release.
          
          Values are:
            * `false`
            * `true`
          
          If not added the `dnt` value will default to `false`.

        required: false
        type: string
        example: "true"
  SessionBridgeTokenRequest:
    properties:
      code:
        description: |-
          Authorization code returned from session bridge authorization received in the front channel that is used to get session bridge access tokens and refresh tokens. Required with a grant type of `session_bridge`.
        type: string
        maxLength: 256
        example: "M0t1K0pyoFKhBpUZnuUYO07xf8iYyMJrAc7h31h_ra8.gglPClJHsofqdTm_yPe5n6m2yCXzFmD8qICwIEjQGVA"
      client_id:
        description: The SLAS public client ID for use with PKCE requests. This is a required parameter when using a public client.
        type: string
        required: true
        maxLength: 40
        example: "6c388ebd-6843-4863-aef9-781382c9e8cd"
      channel_id:
        description: The channel (ECOM site) that the user is associated with.
        type: string
        required: true
        maxLength: 100
        example: "RefArch"
      code_verifier:
        description: |-
          PKCE code verifier. Created by the caller. This is a required parameter when using a public client.

          The `code_challenge` is created by SHA256 hashing the `code_verifier` and Base64 encoding the resulting hash.

          The `code_verifier` should be a high entropy cryptographically random string with a minimum of 43 characters and a maximum of 128 characters.
        type: string
        example: "Ar0lAwU_jsuA~ZXX8-JnMbZFxrnDot2OtgLEi1kOT_FxD6Bo0EQDbbrvoym9xHvatNGnNzrObLJeK6e4U9m4pveRMbdwNGa4jwiAlKGvijVn0PW0hqb03_w1gQE00wTo"
      dwsid:
        description: |-
          Cookie passed back from the '/authorize' endpoint call for session bridge. This parameter is optional and not needed if using the `dwsgst` parameter.

          DEPRECATED - As of January 31, 2024, SLAS will no longer support the SESB `dwsid` parameter for `guest` users for session-bridge/token calls. It is recommended to transition over to using a SESB `dwsgst` token. 
          
          The `dwsid` will still be needed for `registered` user session-bridge/token calls.

           

        type: string
        example: pATvWUO3KSdt-Kmcy-8-RsxKnoO4BMDwoec7ACVlW6tZNnhaOL7gt7mHqL-h7QYn5TyE61z0DeSMCqxngsWeHw==
      grant_type:
        description: |-
          Grant Type. Both `session_bridge` and `client_credentials` are supported.

          For public client id requests the grant_type must be set to `session_bridge`.

          For private client_id and secret the grant_type must be set to `client_credentials` along with a basic authorization header.

        type: GrantType
        required: true
        example: session_bridge
      login_id:
        description: |-
          The ID of the shopper for session bridge access.
        type: string
        required: true
        maxLength: 128
        example: "jack.shopper@example.com"
      dwsgst:
        type: string
        required: false
        description: |-
          Signed guest Json Web Token (JWT) that was obtained from ECOM. This parameter is optional and not needed if using the `dwsid` parameter.
        example: eyJraWQiOiIxNjgxNTU5OTkxNzkwIiwiYWxnIjoiRVMyNTYifQ.eyJ0ZW5hbnRJZCI6IkJHVk5fUzA1IiwiZHdzaWQiOiJuWHRhckdNU2ZxbnBaSUNJUGFKTHJSWGZ6b2lWYXBBU3BBTFNfeFdUMV9QZjRBWDA0N1lMQ1dSUFByM1BiSEl4d2RaODFiVGZoM3M1Wlgza2NhOG0zZz09IiwiY3VzdG9tZXJJZCI6ImJjQXI5N2NuMm1ZdmhjMGhqTGsxYmFXSzRqIiwiaWF0IjoxNjg1MTI4NjM2LCJleHAiOjE2ODUxMjkyMzksImlzcyI6ImNvbW1lcmNlY2xvdWQvcHJvZHVjdGlvbi9iZ3ZuczA1IiwidmVycyI6IjEiLCJ0eXBlIjoiRyJ9.BGY4kyOXbQSzZxubE3BrSzhf8ByehGUfJa7_J2XRQ93xY4dAOhF_xbXcHmBaEUBUzSny-Cf0pATzEaSsKpTxkg
      usid:
        type: string
        required: false
        description: The unique shopper ID. Returned when from session bridge authorization.
        example: 18cda486-fe32-4e27-888b-6e4f89938e67
      dnt:
        description: |-
          This is an optional parameter to set `Do Not Track` for the session. 

          SLAS is making this available, but will not be used by ECOM until after the 24.4 release.
          
          Values are:
            * `false`
            * `true`
          
          If not added the `dnt` value will default to `false`.
          
        required: false
        type: string
        example: "true"
  PasswordlessLoginRequest:
    type: object
    description: A request for a passwordless login token. This is only available for resgistered users using ECOM.
    properties:
      user_id:
        description: User ID for logging in.
        type: string
        maxLength: 128
        example: "samantha.sampleson@example.com"
      mode:
        description: Notification mode for sending the passwordless token to the user. Using `callback` SLAS will make  POST request to the given callback_uri. Using `sms` requires Marketing Cloud to be configured for SLAS and have a `sms` password action template also configured.
        type: PasswordActionModes
        example: "callback"
      locale:
        description: The locale of the template. Not needed for the `callback` mode
        required: false
        type: string
        example: "en-us"
      usid:
        description: The shopper's unique identifier, if known. If not provided, a new USID is generated.
        required: false
        type: string
        example: 18cda486-fe32-4e27-888b-6e4f89938e67
      channel_id:
        description: The channel (ECOM site) that the user is associated with.
        type: string
        maxLength: 100
        example: "RefArch"
      callback_uri:
        description: |
          The callback URI. Required when the mode is `callback`. The `callback_uri` property will be validated against the callback URIs that have been registered with the SLAS client. The callback URI _must_ be a `POST` endpoint because the token will be included in the body.

          Wildcards are not allowed in the callback_uri because this is a security risk that can expose the token. This is not considered an OAuth2 callback_url.
        required: false
        type: string
        example: "http://localhost:9050/passwordless/login/callback"
  PasswordActionRequest:
    type: object
    description: A request for a password reset token. This is only available for resgistered users using ECOM.
    properties:
      user_id:
        description: User ID for logging in. This is the id that is used to log into SFCC.
        type: string
        maxLength: 128
        example: "samantha.sampleson@example.com"
      mode:
        description: Notification mode for sending the passwordless token to the user. Using `callback` SLAS will make  POST request to the given callback_uri. Using `sms` requires Marketing Cloud to be configured for SLAS and have a `sms` password action template also configured.
        type: PasswordActionModes
        example: "callback"
      channel_id:
        description: The channel (ECOM site) that the user is associated with.
        type: string
        example: "RefArch"
      locale:
        description: The locale of the template.
        required: false
        type: string
        example: "en-us"
      client_id:
        description: The public client ID. Requires setting `grant_type` to `passwordless_login_pkce`
        required: false
        type: string
        maxLength: 40
        example: "6b200ebd-7843-4073-aef9-792482c9e1de"
      code_challenge:
        description: |-
          PKCE code challenge. Created by the client.

          The `code_challenge` is created by SHA256 hashing the `code_verifier` and Base64 encoding the resulting hash.

          The `code_verifier` should be a high entropy cryptographically random string with a minimum of 43 characters and a maximum of 128 characters. 

           Requires setting `grant_type` to `passwordless_login_pkce`
        required: false
        type: string
        minLength: 43
        maxLength: 128
        example: "Nx_Vf0-0W6SpyRVBVTbl8VSu2OE4yD2fZNExW6N3V_Q"
      callback_uri:
        description: |
          The callback uri. Required when the mode is `callback`. The `callback_uri` property will be validated against the callback URIs that have been registered with the SLAS client. The callback URI _must_ be a `POST` endpoint because the token will be included in the body.

          Wildcards are not allowed in the callback_uri because this is a security risk that can expose the token. This is not considered an OAuth2 callback_url.
        required: false
        type: string
        example: "http://localhost:9050/password/reset/callback"
      idp_name:
        description: The name of the 3rd party identity provider for the user ID
        required: false
        type: string
        example: "okta"
  PasswordActionVerifyRequest:
    type: object
    description: A request for creating a new password using the password action token.
    properties:
      client_id:
        description: The public client ID.
        type: string
        maxLength: 40
        example: "6b200ebd-7843-4073-aef9-792482c9e1de"
      pwd_action_token:
        description: Password action token that was returned from the `/password/reset` endpoint.
        type: string
        example: "QJO3CA7QTPVCQ3OMROXF2MTDDED3EEC3"
      code_verifier:
        description: |-
          PKCE code verifier. Created by the client.

          The `code_challenge` is created by SHA256 hashing the `code_verifier` and Base64 encoding the resulting hash.

          The `code_verifier` should be a high entropy cryptographically random string with a minimum of 43 characters and a maximum of 128 characters.
        type: string
        example: "Ar0lAwU_jsuA~ZXX8-JnMbZFxrnDot2OtgLEi1kOT_FxD6Bo0EQDbbrvoym9xHvatNGnNzrObLJeK6e4U9m4pveRMbdwNGa4jwiAlKGvijVn0PW0hqb03_w1gQE00wTo"
      new_password:
        description: The new password to set for the shopper associated with the password action token.
        type: string
        example: "new_password"
      channel_id:
        description: The channel that the request is for. For an ECOM request, this is angalous to the site ID.
        required: true
        type: string
        maxLength: 100
        example: "RefArch"
  PasswordLessLoginTokenRequest:
    type: object
    description: A request for an access token using a passwordless token.
    properties:
      grant_type:
        description: OAuth 2.1 grant type. Must be set to `client_credentials` for passwordless login.
        type: GrantType
        example: "client_credentials"
      hint:
        description: Passwordless hint. Use `pwdless_login`.
        type: string
        example: "pwdless_login"
      pwdless_login_token:
        description: Passwordless login token that was created from the user ID.
        type: string
        example: "QJO3CA7QTPVCQ3OMROXF2MTDDED3EEC3"
      client_id:
        description: The public client ID.
        required: false
        type: string
        maxLength: 40
        example: "6b200ebd-7843-4073-aef9-792482c9e1de"
      code_verifier:
        description: |-
          PKCE code verifier. Created by the client.

          The `code_challenge` is created by SHA256 hashing the `code_verifier` and Base64 encoding the resulting hash.

          The `code_verifier` should be a high entropy cryptographically random string with a minimum of 43 characters and a maximum of 128 characters.
        required: false
        type: string
        example: "Ar0lAwU_jsuA~ZXX8-JnMbZFxrnDot2OtgLEi1kOT_FxD6Bo0EQDbbrvoym9xHvatNGnNzrObLJeK6e4U9m4pveRMbdwNGa4jwiAlKGvijVn0PW0hqb03_w1gQE00wTo"
  IntrospectResponse:
    type: object
    properties:
      active:
        type: boolean
      scope:
        type: string
        example: "offline_access openid"
      client_id:
        type: string
        example: "553ac8ac-4db9-4ed3-825c-3ae3bf5d327b"
      sub:
        type: string
        example: "usid:156c4e69-e89b-406b-a4b7-576980bb234e::upn:Guest"
      exp:
        type: integer
        example: 1594733276
      username:
        type: string
        example: "samantha.sampleson@example.com"
      token_type:
        type: string
        example: "refresh_token"
  Oauth2ErrorResponse:
    type: object
    properties:
      error:
        type: string
        example: "invalid_client"
      error_uri:
        type: string
        required: false
        example: "https://api.commercecloud.salesforce.com/documentation/error/v1/errors/oauth-service"
      error_description:
        type: string
        required: false
        example: "Missing access token or refresh token."
  LoginRequest:
    type: object
    properties:
      client_id:
        description: SLAS client ID. Required when the grant type is `authorization_code_pkce`.
        required: false
        type: string
        maxLength: 40
        example: "z99ec276-cg53-4g94-cf72-76f300c6778zc"
      response_type:
        description: Must be `code`. Indicates that the client wants an authorization code (when the grant type is `authorization_code`).
        required: false
        type: ResponseType
      redirect_uri:
        description: |
          The URI to which the server redirects the browser after the user grants the authorization. The URI must be registered with the SLAS client. A variety of URI formats and wildcards for host are supported, but app links like airbnb:// or fb:// are not. Examples of supported URIs: 

          Examples of supported URIs:
            - `http://localhost:3000/callback`
            - `https://example.com/callback`
            - `com.example.app:redirect_uri_path`
            - ` *.subdomain.topleveldomain.com`
        required: true
        maxLength: 256
        type: string
        example: "http://localhost:3000/callback"
      state:
        description: Value to be sent by the client to determine the state between the authorization request and the server response. Optional, but strongly recommended.
        required: false
        type: string
        maxLength: 512
        example: "client-state"
      scope:
        description: Scopes to limit an application's access to a user's account.
        required: false
        type: string
        maxLength: 256
        example: "openid|offline_access|email"
      usid:
        description: The unique shopper ID.
        required: false
        type: string
        example: "18cda486-fe32-4e27-888b-6e4f89938e67"
      channel_id:
        description: The channel that the request is for. For an ECOM request, this is angalous to the site ID.
        required: true
        type: string
        maxLength: 100
        example: "RefArch"
      code_challenge:
        description: |-
          PKCE code verifier. Created by the client calling the `login` endpoint.

          The `code_challenge` is created by SHA256 hashing the `code_verifier` and Base64 encoding the resulting hash.

          The `code_verifier` should be a high entropy cryptographically random string with a minimum of 43 characters and a maximum of 128 characters.

          The `code_challenge` is optional when using a private client id for the token request.
        type: string
        required: false
        minLength: 43
        maxLength: 128
        example: "krc5G3_5lRUcXDUzFZQ88oJA_-ZmlHWkyGsgOrSLEWg"
/organizations/{organizationId}:
  type: CommerceCloudStandards.Organization
  /oauth2:
    /login:
      description: |
        **Deprecation notice**: The `GET` method is deprecated for this endpoint. Please use `POST` instead.
        Get authorization code after authenticating a user using a B2C Commerce (ECOM) instance.

      post:
        description: |
          Logs in a shopper with credentials that are managed by a B2C Commerce instance (ECOM). It follows the authorization code grant flow as defined by the OAuth 2.1 standard. It also uses a proof key for code exchange (PKCE).

          For PKCE values:
          - The `code_verifier` string is a random string used for the `/token` endpoint request.
          - The `code_challenge` is an encoded version of the `code_verifier` string using an SHA-256 hash.

            The request must include a basic authorization header that contains a Base64 encoded version of the following string: `<shopperUserID>:<shopperPassword>`.

            Required parameters: `code_challenge`, `channel_id`, `client_id`, and `redirect_uri`.

            Optional parameters: `usid`.

            The SLAS `/login` endpoint redirects back to the redirect URI and returns an authorization code.

            Calls to `/login` made with the same loginId and tenantId within 1 second will result in a conflict.
        displayName: authenticateCustomer
        is:
          - SlasRateLimit:
              responseStatus: 303
              responseStatus2: 400
              responseStatus3: 401
              responseStatus4: 500
        headers:
          Authorization:
            displayName: Login
            description: Base64-encoded username and password for HTTP Basic authentication.
            type: string
            required: true
            example: "Basic <client credentials>"
        body:
          application/x-www-form-urlencoded:
            type: LoginRequest
        responses:
          303:
            description: Success. The authorization code is added to the `redirect_uri`.
            body:
              application/json:
                type: string
                example: |
                  {
                    "authorizationCode": "eyJ2ZXIiOiIxLjAiLCJraWQiOiJTTEFTIiwidHlwIjoiand0IiwiY2x2IjoiS",
                    "usid": "156c4e69-e89b-406b-a4b7-576980bb234e"              
                  }
          400:
            description: Bad Request
            body:
              application/problem+json:
                type: Oauth2ErrorResponse
                example: |
                  {
                    "error": "invalid_request",
                    "error_description": "Bad or missing client_id."
                  }
          401:
            description: Unauthorized
            body:
              application/problem+json:
                type: Oauth2ErrorResponse
                example: |
                  {
                  "error": "invalid_client",
                  "error_description": "Basic Authorization failed."
                  }
          409:
            description: Conflict
            body:
              application/problem+json:
                type: Oauth2ErrorResponse
                example: |
                  {
                  "error": "conflict",
                  "error_description": "The same loginId and tenantId tried to login twice within 1 second."
                  }
          500:
            description: Internal Server Error
            body:
              application/problem+json:
                type: Oauth2ErrorResponse
                example: |
                  {
                  "error": "server_error",
                  "error_description": "The server has encountered a situation that it doesn't know how to handle."
                  }
    /passwordless/login:
      description: Log in a customer using Core with their customer profiles loaded in ECOM. Allows the user to authenticate when their identity provider (Core) is down. Client must have the `sfcc.pwdless_login` scope to access this endpoint.
      post:
        description: Allows the customer to authenticate when their identity provider is down.
        displayName: authorizePasswordlessCustomer
        is:
          - SlasRateLimit:
              responseStatus: 200
              responseStatus2: 400
              responseStatus3: 401
              responseStatus4: 412
        headers:
          Authorization:
            displayName: Authorization
            description: "Base64-encoded string for HTTP Basic authentication. The string is composed of a client ID and client secret, separated by a colon (`:`), like this: `clientId:clientSecret`"
            type: string
            required: false
            example: "Basic <client credentials>"
        body:
          application/x-www-form-urlencoded:
            type: PasswordlessLoginRequest
        responses:
          200:
            description: Success
            body:
              application/json:
                type: string

          400:
            description: Bad Request
            body:
              application/problem+json:
                type: Oauth2ErrorResponse
                example: |
                  {
                    "error": "invalid_request",
                    "error_description": "Bad or missing access token."
                  }
          401:
            description: Unauthorized
            body:
              application/problem+json:
                type: Oauth2ErrorResponse
                example: |
                  {
                  "error": "invalid_client",
                  "error_description": "Authorization failed."
                  }
          412:
            description: Precondition Failure
            body:
              application/problem+json:
                type: Oauth2ErrorResponse
                example: |
                  {
                  "error": "precondition_failure",
                  "error_description": "Dependent service is not available."
                  }
    /logout:
      description: Log out a shopper.
      get:
        description: |-
          Log out a shopper. The shopper's access token and refresh token are revoked. If the shopper authenticated with a B2C Commerce (ECOM) instance, the OCAPI JWT is also revoked. This should be called for Registered users that have logged in using SLAS. his should be called for registered users that have logged in using SLAS. This endpoint is not for use with guest users.

          Required header: Authorization header bearer token of the Shopper access token to logout.

          Required parameters: `refresh token`, `channel_id`, and `client`.
        displayName: logoutCustomer
        is:
          - SlasRateLimit:
              responseStatus: 303
              responseStatus2: 400
              responseStatus3: 401
              responseStatus4: 500

        securedBy:
          - CommerceCloudStandards.ShopperToken:
              {
                Bearer eyJ2ZXIiOiIxLjAiLCJraWQiOiI0ZTQyNTFkOS0zM2Y2LTRjMTMtYjZmZC1mOWJkNTJmYTZhNDciLCJ0eXAiOiJqd3QiLCJjbHYiOiJKMi4xLjAiLCJhbGciOiJFUzI1NiJ9.eyJhdXQiOiJHVUlEIiwic2NwIjoic2ZjYy5wcm9kdWN0cy5ybyBzZmNjLmNhdGFsb2dzLnJvIHNmY2Muc2hvcHBlci5ydyIsInN1YiI6ImNjLXNsYXM6OnNsc2FfZGV2OjpzY2lkOjU1M2FjOGFjLTRkYjktNGVkMy04MjVjLTNhZTNiZjVkMzI3Yjo6dXNpZDoxY2E3OWZiNi0xYjIyLTRmOWItOGJiNi05YmU5NWNjMjA4NjMiLCJjdHgiOiJzbGFzLm5vdF9mb3JfZXh0ZXJuYWxfdXNlIiwiaXNzIjoic2xhcy9kZXYvc2xzYV9kZXYiLCJpc3QiOjEsImF1ZCI6ImNvbW1lcmNlY2xvdWQvZGV2L3Nsc2FfZGV2IiwibmJmIjoxNTk0NzY0MDgwLCJzdHkiOiJVc2VyIiwiaXNiIjoidWlkbzpzbGFzOjp1cG46R3Vlc3Q6OnVpZG46R3Vlc3QgVXNlciIsImV4cCI6MTU5NDc2NTkxMCwiaWF0IjoxNTk0NzY0MTEwLCJqdGkiOiJDMkMxNjM0NTE0NTEwLTE3MTQzMTg2NzY0MjcwNTcyNjQ2NTYxMzgifQ.UVYAsWXCn3hoUPy8vLlc7O96RZEHD3N3ZgdNH-ZVvJ1G-R6uJ2VPrYvwKmYXF41Ujm2bo83AYOHVqEEEPT8Kgw,
              }
        queryParameters:
          client_id:
            description: The SLAS client ID.
            required: true
            type: string
            maxLength: 40
            example: "z99ec276-cg53-4g94-cf72-76f300c6778zc"
          refresh_token:
            description: Refresh token that was given during the access token request.
            required: true
            type: string
          channel_id:
            description: The `channel_id` parameter must be provided if the shopper authenticated using the `login` endpoint with ECOM.
            required: false
            type: string
            maxLength: 100
            example: "RefArch"
          hint:
            description: Optional parameter for logging out user sessions. Use `all-sessions` to log out all user sessions. If `hint` is not used, only the current user session will be logged out.
            required: false
            type: string
            maxLength: 12
            example: all-sessions
        responses:
          200:
            description: Success
            body:
              application/json:
                type: TokenResponse
                example: |
                  {
                      "access_token": "",
                      "id_token": "null",
                      "refresh_token": "EnL9U2f3-WiVPwL60CFBI21UY_oxWAwX5JkgO-X12Vs",
                      "expires_in": 0,
                      "refresh_token_expires_in": 0,
                      "token_type": "Bearer",
                      "usid": "null",
                      "customer_id": "null",
                      "enc_user_id": "null",
                      "idp_access_token": ""
                  }
          400:
            description: Bad Request
            body:
              application/problem+json:
                type: Oauth2ErrorResponse
                example: |
                  {
                    "error": "invalid_request",
                    "error_description": "Bad or missing client_id."
                  }
          401:
            description: Unauthorized
            body:
              application/problem+json:
                type: Oauth2ErrorResponse
                example: |
                  {
                  "error": "invalid_client",
                  "error_description": "Basic Authorization failed."
                  }
          500:
            description: Internal Server Error
            body:
              application/problem+json:
                type: Oauth2ErrorResponse
                example: |
                  {
                  "error": "server_error",
                  "error_description": "The server has encountered a situation that it doesn't know how to handle."
                  }
    /authorize:
      description: OAuth 2.1 authorization endpoints.
      get:
        description: |-
          Get an authorization code after authenticating a user against an identity provider (IDP). This is the first step of the OAuth 2.1 authorization code flow, where a user can log in via federation to the IDP configured for the client. After successfully logging in, the user gets an authorization code via a redirect URI.

          This endpoint can be called from the front channel (the browser).
        displayName: authorizeCustomer
        is:
          - SlasRateLimit:
              responseStatus: 303
              responseStatus2: 400
              responseStatus3: 401
              responseStatus4: 500
        queryParameters:
          redirect_uri:
            description: |
              The URL to which the server redirects the browser after the user grants the authorization. The URI must be pre-registered. A variety of URI formats and wildcard for host are supported, but app links like `airbnb://` or `fb://` are not. Examples of supported URIs:
                - `http://localhost:3000/callback`
                - `https://example.com/callback`
                - `com.example.app:redirect_uri_path`
                - ` *.subdomain.topleveldomain.com`
            required: true
            maxLength: 256
            type: string
            example: "http://localhost:3000/callback"
          response_type:
            description: Must be `code`. Indicates that the client wants an authorization code (using the `authorization_code` grant type).
            required: true
            type: ResponseType
          client_id:
            description: The client ID obtained during application registration.
            required: true
            type: string
            maxLength: 40
            example: "client-id1"
          scope:
            required: false
            type: string
            maxLength: 256
            enum: [openid, offline_access, email]
          state:
            description: Value to send the client to determine the state between the authorization request and the server response. Optional, but strongly recommended.
            required: false
            type: string
            maxLength: 512
            example: "client-state"
          usid:
            description: A unique shopper identifier (USID). If not provided, a new USID is generated.
            required: false
            type: string
            maxLength: 256
            example: "d09c5010-4baa-11ea-98d8-01062d1a14bb"
          hint:
            description: |-
              Name of an identity provider (IDP) to optionally redirect to, thereby skipping the IDP selection step.

              To use a public client, set `hint` to `guest` and use a public client ID to get an authorization code. If no `hint` is provided, the preferred IDP of the tenant is used by default.

              For session bridge authorization the `hint` should be set to `sb-user` for a registered customer and to `sb-guest` for a guest.
            required: false
            type: string
            maxLength: 256
            example: "google"
          channel_id:
            description: The channel that this request is for. For an ECOM request, this is angalous to the site ID.
            required: false
            type: string
            maxLength: 100
            example: "RefArch"
          code_challenge:
            description: |-
              PKCE code challenge. Created by the client calling the `login` endpoint.

              The `code_challenge` is created by SHA256 hashing the `code_verifier` and Base64 encoding the resulting hash.

              The `code_verifier` should be a high entropy cryptographically random string with a minimum of 43 characters and a maximum of 128 characters.
            required: true
            type: string
            minLength: 43
            maxLength: 128
            example: "krc5G3_5lRUcXDUzFZQ88oJA_-ZmlHWkyGsgOrSLEWg"
          ui_locales:
            description: |-
              End-User's preferred languages and scripts for the user interface, represented as a space-separated list of BCP47 [RFC5646] language tag values, ordered by preference. For example, the value `fr-CA fr en` represents a preference for French as spoken in Canada, then French (without a region designation), followed by English (without a region designation). 

              In most cases the IDP supports one language tag and has a default language set on the server. SLAS will support the space-separated list and pass them to the IDP.
            required: false
            type: string
            maxLength: 256
            example: "en es-A fr-CA"

        responses:
          303:
            description: Success. The authorization code is added to the `redirect_uri`.
            body:
              application/json:
                type: string
                example: |
                  {
                    "authorizationCode": "eyJ2ZXIiOiIxLjAiLCJraWQiOiJTTEFTIiwidHlwIjoiand0IiwiY2x2IjoiS",
                    "usid": "156c4e69-e89b-406b-a4b7-576980bb234e"              
                  }
          400:
            description: Bad Request
            body:
              application/problem+json:
                type: Oauth2ErrorResponse
                example: |
                  {
                    "error": "invalid_request",
                    "error_description": "Bad or missing client_id."
                  }
          401:
            description: Unauthorized
            body:
              application/problem+json:
                type: Oauth2ErrorResponse
                example: |
                  {
                  "error": "invalid_client",
                  "error_description": "Basic Authorization failed."
                  }
          500:
            description: Internal Server Error
            body:
              application/problem+json:
                type: Oauth2ErrorResponse
                example: |
                  {
                  "error": "server_error",
                  "error_description": "The server has encountered a situation that it doesn't know how to handle."
                  }

    /token:
      description: Shopper OAuth 2.1 token endpoint.
      post:
        description: |-
          Get the shopper or guest JWT access token and a refresh token. This is the second step of the OAuth 2.1 authorization code flow.

          For a private client, an application is able to get an access token for the shopper through the back channel (a trusted server) by passing in the client credentials and the authorization code retrieved from the `authorize` endpoint.

          For a guest user, get the shopper JWT access token and a refresh token. This is where a client appplication is able to get an access token for the guest user through the back channel (a trusted server) by passing in the client credentials.

          For a public client using PKCE, an application will pass a PKCE `code_verifier` that matches the `code_challenge` that was used to `authorize` the customer along with the authorization code.

          When refreshing the access token with a private client ID and client secret, the refresh token is _not_ regenerated. However, when refreshing the access token with a public client ID, the refresh token is _always_ regenerated. The old refresh token is voided with every refresh call, so the refresh token on the client needs to be replaced to always store the new refresh token.

          See the Body section for required parameters, including `grant_type` and others, depending on the value of `grant_type`.

          **Important**: We strongly recommended using the `channel_id` query parameter because **it will be required in the future**.
        displayName: getAccessToken
        is:
          - SlasRateLimit:
              responseStatus: 200
              responseStatus2: 400
              responseStatus3: 401
              responseStatus4: 500
        headers:
          Authorization:
            displayName: Authorization
            description: "Base64-encoded string for HTTP Basic authentication. The string is composed of a client ID and client secret, separated by a colon (`:`), like this: `clientId:clientSecret`. Required unless the grant type is `authorization_code_pkce`."
            type: string
            required: false
            example: "Basic <client credentials>"
        body:
          application/x-www-form-urlencoded:
            type: TokenRequest
        responses:
          200:
            description: Success
            body:
              application/json:
                type: TokenResponse
                example: |
                  {
                    "access_token": "eyJ2ZXIiOiIxLjAiLCJraWQiOiJTTEFTIiwidHlwIjoiand0IiwiY2x2IjoiSjIuMS4wIiwiYWxnIjoiRVMyNTYifQ.eyJhdWQiOiJjb3JlL2Rldi9idGluZ2V5bHRtMiIsImF1dCI6IkdVSUQiLCJzdWIiOiJ1c2lkOjo1NGFkMmM1YS05MWYwLTQ0YWItODE3Yy03M2Q2Yjg2ODcyZDk6OnVwbjpndWVzdCIsIm5iZiI6MTU4Mjg0NTYyNCwiY3R4Ijoic2ZkYy5jb21tZXJjZWNsb3VkIiwiaXNzIjoiY29yZS9kZXYvYnRpbmdleWx0bTIiLCJzdHkiOiJVc2VyIiwiaXN0IjoxLCJleHAiOjE1ODI4NDU3NDQsImlhdCI6MTU4Mjg0NTY1NCwianRpIjoiQzJDOTA0ODg2NDA3MDkwNDg4NjQwNzMyMjExNzQ1ODEyMTQzIn0.2a6lMBSY17PrhDO8pvEk7PCXW_nkguMHi4J-Tuirkz-ETB6rnKyuRjF5yD6B55tMvm8dO8ulAHyDYqjObMxLJg",
                    "id_token": "eyJraWQiOiI3NGU2YjMxZS1lYTczLTQ3OTYtOWRkYi1jMDJmZGI4ZDgwYmUiLCJhbGciOiJSUzI1NiJ9.eyJzdWIiOiJ1c2lkOmQ1MDBhMzY5LTc1MWQtNDkzYy1iNDAzLThmOThmYjg3MTdiNiIsImF1ZCI6IjU1M2FjOGFjLTRkYjktNGVkMy04MjVjLTNhZTNiZjVkMzI3YiIsImlzcyI6ImRldi51cy5zaG9wcGVyLmNjLnNhbGVzZm9yY2UuY29tIiwibmFtZSI6ImJsYWlyLnNsYXMudGVzdEBnbWFpbC5jb20iLCJleHAiOjE1OTExMTE0MzgsImlhdCI6MTU5MTEwOTYzOCwiZW1haWwiOiJibGFpci5zbGFzLnRlc3RAZ21haWwuY29tIn0.KgpAcq-G9Lz7IGnjkJlaFLFXYncVCwcVrRIuy3bEfgzRozqaDRvAori4oOz4RtgYjmoc5x2euoisHL0mVnHgPKOdYBty1wTJqneJEQt6hP4Kp0KFciID_ILCi-DE8VWS5t0NknnMP_iKhIkqcRL48iwPFUWkWA6AEWxE_yvJLNRLithsSxsx7EfBfpD8Hr2b5tMEwImQNmJNYGRTI4LSmcYspBORvJoAnfGpMC0kglxl40bhf5j4ItX4_DiWQC4zaGYD-HJV4BDr6C7iGCs5ZVPypF0yQD3iBio26fwj9Ys5WF9XMtPtqET2kqsz6fDC5GkE6HTUHH_r87jxbDq-8w",
                    "refresh_token": "EgMYpjfFKdlSy-a3PYeyihmP95IpIp3FaDpPmVH1yu8.lahomBi7zJbRa6yKAuAAiKu3lprTPsEueKwqcBvhRLU",
                    "expires_in": 900,
                    "refresh_token_expires_in": 7776000,
                    "token_type": "Bearer",
                    "usid": "18cda486-fe32-4e27-888b-6e4f89938e67",
                    "customer_id": "1000005",
                    "enc_user_id": "45D39A8499A95288F82855427EBA99B5",
                    "idp_access_token": "eyJraWQiOiJYS21HbHVuSm0zSlBTMHNjQXZXV19XQlYtRi1wMkxLSDR0V05UMHVVSjVJIiwiYWxnIjoiUlMyNTYifQ.eyJ2ZXIiOjEsImp0aSI6IkFULjFMY0xxTWhqM2t0N1FKeFhxQ0VtdGZOOVV2eUcweW1meDFxZG9BdzF1NWMub2FyeXhveHF0QUtxaVFMbkM1ZDYiLCJpc3MiOiJodHRwczovL2Rldi05NTY1MjM2Lm9rdGEuY29tIiwiYXVkIjoiaHR0cHM6Ly9kZXYtOTU2NTIzNi5va3RhLmNvbSIsInN1YiI6Im9rdGEuc2xhcy50ZXN0IiwiaWF0IjoxNjc5Njk4MzA4LCJleHAiOjE2Nzk3MDE5MDgsImNpZCI6IjBvYTJrNXNma0JXZ0poTEVHNWQ2IiwidWlkIjoiMDB1MzhxZGpuU2NMT0IxbXE1ZDYiLCJzY3AiOlsib2ZmbGluZV9hY2Nlc3MiLCJvcGVuaWQiLCJlbWFpbCIsInByb2ZpbGUiXSwiYXV0aF90aW1lIjoxNjc5Njk4MzA2fQ.FDbGsnZGwTYVKGSlAo6jqcjG2HQ_BqQKRk72M5h69DRHyOM4wngsEELN_Wtgj3E77sP7IOmIKjiK5SFP17ADMbKZptVr2pqaMVF3PuU3Cbl_MgXZValfT-z12jHRq9sHMfsdTjY2RnvG44ZDFKc2no8mdL6IJ1MfCaZT5Tql5Ktq_UgudaWFsYqad3ETcmp5Y8ivz1bFnqud0sO9D9JzYOtfd9h71JKcsSC2rXc_Si-INPKKaGl8CDgaLXxu_Am9twJpUenHLpy0BerhcVvdFz7_611E53xOT_Esrc1pe-XAZtlYsJFnhxTBDT342ukiSWk2m6juVappv1GsRfUf2g"
                  }
          400:
            description: Bad Request
            body:
              application/problem+json:
                type: Oauth2ErrorResponse
                example: |
                  {
                    "error": "invalid_request",
                    "error_description": "Bad or missing access token."
                  }
          401:
            description: Unauthorized
            body:
              application/problem+json:
                type: Oauth2ErrorResponse
                example: |
                  {
                  "error": "invalid_client",
                  "error_description": "Basic Authorization failed."
                  }
          500:
            description: Internal Server Error
            body:
              application/problem+json:
                type: Oauth2ErrorResponse
                example: |
                  {
                  "error": "server_error",
                  "error_description": "The server has encountered a situation that it doesn't know how to handle."
                  }
    /session-bridge/token:
      description: Evaluate the session bridge authorization code and issue a shopper token (JWT).
      post:
        description: |-
          Get a shopper JWT access token for a registered customer using session bridge.

          For public client id requests the grant_type must be set to `session_bridge`.

          For  private client_id and secret the grant_type must be set to `client_credentials` along with a basic authorization header.

          **DEPRECATED** - As of January 31, 2024, SLAS will no longer support the SESB `dwsid` parameter for `guest` users for `session-bridge/token` calls. It is recommended to transition over to using a SESB `dwsgst` token. 
          
          The `dwsid` will still be needed for `registered` user `session-bridge/token` calls.

        displayName: getSessionBridgeAccessToken
        is:
          - SlasRateLimit:
              responseStatus: 200
              responseStatus2: 400
              responseStatus3: 401
              responseStatus4: 503
        body:
          application/x-www-form-urlencoded:
            type: SessionBridgeTokenRequest
        responses:
          200:
            description: Success
            body:
              application/json:
                type: TokenResponse
                example: |
                  {
                    "access_token": "eyJ2ZXIiOiIxLjAiLCJraWQiOiJTTEFTIiwidHlwIjoiand0IiwiY2x2IjoiSjIuMS4wIiwiYWxnIjoiRVMyNTYifQ.eyJhdWQiOiJjb3JlL2Rldi9idGluZ2V5bHRtMiIsImF1dCI6IkdVSUQiLCJzdWIiOiJ1c2lkOjo1NGFkMmM1YS05MWYwLTQ0YWItODE3Yy03M2Q2Yjg2ODcyZDk6OnVwbjpndWVzdCIsIm5iZiI6MTU4Mjg0NTYyNCwiY3R4Ijoic2ZkYy5jb21tZXJjZWNsb3VkIiwiaXNzIjoiY29yZS9kZXYvYnRpbmdleWx0bTIiLCJzdHkiOiJVc2VyIiwiaXN0IjoxLCJleHAiOjE1ODI4NDU3NDQsImlhdCI6MTU4Mjg0NTY1NCwianRpIjoiQzJDOTA0ODg2NDA3MDkwNDg4NjQwNzMyMjExNzQ1ODEyMTQzIn0.2a6lMBSY17PrhDO8pvEk7PCXW_nkguMHi4J-Tuirkz-ETB6rnKyuRjF5yD6B55tMvm8dO8ulAHyDYqjObMxLJg",
                    "id_token": "eyJraWQiOiI3NGU2YjMxZS1lYTczLTQ3OTYtOWRkYi1jMDJmZGI4ZDgwYmUiLCJhbGciOiJSUzI1NiJ9.eyJzdWIiOiJ1c2lkOmQ1MDBhMzY5LTc1MWQtNDkzYy1iNDAzLThmOThmYjg3MTdiNiIsImF1ZCI6IjU1M2FjOGFjLTRkYjktNGVkMy04MjVjLTNhZTNiZjVkMzI3YiIsImlzcyI6ImRldi51cy5zaG9wcGVyLmNjLnNhbGVzZm9yY2UuY29tIiwibmFtZSI6ImJsYWlyLnNsYXMudGVzdEBnbWFpbC5jb20iLCJleHAiOjE1OTExMTE0MzgsImlhdCI6MTU5MTEwOTYzOCwiZW1haWwiOiJibGFpci5zbGFzLnRlc3RAZ21haWwuY29tIn0.KgpAcq-G9Lz7IGnjkJlaFLFXYncVCwcVrRIuy3bEfgzRozqaDRvAori4oOz4RtgYjmoc5x2euoisHL0mVnHgPKOdYBty1wTJqneJEQt6hP4Kp0KFciID_ILCi-DE8VWS5t0NknnMP_iKhIkqcRL48iwPFUWkWA6AEWxE_yvJLNRLithsSxsx7EfBfpD8Hr2b5tMEwImQNmJNYGRTI4LSmcYspBORvJoAnfGpMC0kglxl40bhf5j4ItX4_DiWQC4zaGYD-HJV4BDr6C7iGCs5ZVPypF0yQD3iBio26fwj9Ys5WF9XMtPtqET2kqsz6fDC5GkE6HTUHH_r87jxbDq-8w",
                    "refresh_token": "EgMYpjfFKdlSy-a3PYeyihmP95IpIp3FaDpPmVH1yu8.lahomBi7zJbRa6yKAuAAiKu3lprTPsEueKwqcBvhRLU",
                    "expires_in": 900,
                    "refresh_token_expires_in": 7776000,
                    "token_type": "Bearer",
                    "usid": "18cda486-fe32-4e27-888b-6e4f89938e67",
                    "customer_id": "1000005",
                    "enc_user_id": "45D39A8499A95288F82855427EBA99B5",
                    "idp_access_token": ""            
                  }
          400:
            description: Bad Request
            body:
              application/problem+json:
                type: Oauth2ErrorResponse
                example: |
                  {
                    "error": "invalid_request",
                    "error_description": "Bad or missing authorization token."
                  }
          401:
            description: Unauthorized
            body:
              application/problem+json:
                type: Oauth2ErrorResponse
                example: |
                  {
                  "error": "invalid_client",
                  "error_description": "Authorization failed."
                  }
          503:
            description: Gateway Error
            body:
              application/problem+json:
                type: Oauth2ErrorResponse
                example: |
                  {
                  "error": "server_error",
                  "error_description": "The server has encountered a situation that it doesn't know how to handle."
                  }
    /trusted-system/token:
      description: Shopper OAuth 2.1 token endpoint.
      post:
        description: |-
          Get a shopper JWT access token for a registered customer whose credentials are stored using a third party system.

          For trusted-system requests, a basic authorization header that includes a SLAS client ID and SLAS client secret can be used in place of the bearer token.

        displayName: getTrustedSystemAccessToken
        is:
          - SlasRateLimit:
              responseStatus: 200
              responseStatus2: 400
              responseStatus3: 401
              responseStatus4: 503
        headers:
          Authorization:
            displayName: Authorization
            description: "Base64-encoded string for HTTP Basic authentication. The string is composed of a client ID and client secret, separated by a colon (`:`), like this: `clientId:clientSecret`. Required unless the grant type is `authorization_code_pkce`."
            type: string
            required: false
            example: "Basic <client credentials>"
        body:
          application/x-www-form-urlencoded:
            type: TrustedSystemTokenRequest
        responses:
          200:
            description: Success
            body:
              application/json:
                type: TokenResponse
                example: |
                  {
                    "access_token": "eyJ2ZXIiOiIxLjAiLCJraWQiOiJTTEFTIiwidHlwIjoiand0IiwiY2x2IjoiSjIuMS4wIiwiYWxnIjoiRVMyNTYifQ.eyJhdWQiOiJjb3JlL2Rldi9idGluZ2V5bHRtMiIsImF1dCI6IkdVSUQiLCJzdWIiOiJ1c2lkOjo1NGFkMmM1YS05MWYwLTQ0YWItODE3Yy03M2Q2Yjg2ODcyZDk6OnVwbjpndWVzdCIsIm5iZiI6MTU4Mjg0NTYyNCwiY3R4Ijoic2ZkYy5jb21tZXJjZWNsb3VkIiwiaXNzIjoiY29yZS9kZXYvYnRpbmdleWx0bTIiLCJzdHkiOiJVc2VyIiwiaXN0IjoxLCJleHAiOjE1ODI4NDU3NDQsImlhdCI6MTU4Mjg0NTY1NCwianRpIjoiQzJDOTA0ODg2NDA3MDkwNDg4NjQwNzMyMjExNzQ1ODEyMTQzIn0.2a6lMBSY17PrhDO8pvEk7PCXW_nkguMHi4J-Tuirkz-ETB6rnKyuRjF5yD6B55tMvm8dO8ulAHyDYqjObMxLJg",
                    "id_token": "eyJraWQiOiI3NGU2YjMxZS1lYTczLTQ3OTYtOWRkYi1jMDJmZGI4ZDgwYmUiLCJhbGciOiJSUzI1NiJ9.eyJzdWIiOiJ1c2lkOmQ1MDBhMzY5LTc1MWQtNDkzYy1iNDAzLThmOThmYjg3MTdiNiIsImF1ZCI6IjU1M2FjOGFjLTRkYjktNGVkMy04MjVjLTNhZTNiZjVkMzI3YiIsImlzcyI6ImRldi51cy5zaG9wcGVyLmNjLnNhbGVzZm9yY2UuY29tIiwibmFtZSI6ImJsYWlyLnNsYXMudGVzdEBnbWFpbC5jb20iLCJleHAiOjE1OTExMTE0MzgsImlhdCI6MTU5MTEwOTYzOCwiZW1haWwiOiJibGFpci5zbGFzLnRlc3RAZ21haWwuY29tIn0.KgpAcq-G9Lz7IGnjkJlaFLFXYncVCwcVrRIuy3bEfgzRozqaDRvAori4oOz4RtgYjmoc5x2euoisHL0mVnHgPKOdYBty1wTJqneJEQt6hP4Kp0KFciID_ILCi-DE8VWS5t0NknnMP_iKhIkqcRL48iwPFUWkWA6AEWxE_yvJLNRLithsSxsx7EfBfpD8Hr2b5tMEwImQNmJNYGRTI4LSmcYspBORvJoAnfGpMC0kglxl40bhf5j4ItX4_DiWQC4zaGYD-HJV4BDr6C7iGCs5ZVPypF0yQD3iBio26fwj9Ys5WF9XMtPtqET2kqsz6fDC5GkE6HTUHH_r87jxbDq-8w",
                    "refresh_token": "EgMYpjfFKdlSy-a3PYeyihmP95IpIp3FaDpPmVH1yu8.lahomBi7zJbRa6yKAuAAiKu3lprTPsEueKwqcBvhRLU",
                    "expires_in": 900,
                    "refresh_token_expires_in": 7776000,
                    "token_type": "Bearer",
                    "usid": "18cda486-fe32-4e27-888b-6e4f89938e67",
                    "customer_id": "1000005",
                    "enc_user_id": "45D39A8499A95288F82855427EBA99B5",
                    "idp_access_token": ""       
                  }
          400:
            description: Bad Request
            body:
              application/problem+json:
                type: Oauth2ErrorResponse
                example: |
                  {
                    "error": "invalid_request",
                    "error_description": "Bad or missing access token."
                  }
          401:
            description: Unauthorized
            body:
              application/problem+json:
                type: Oauth2ErrorResponse
                example: |
                  {
                  "error": "invalid_client",
                  "error_description": "Authorization failed."
                  }
          409:
            description: Conflict
            body:
              application/problem+json:
                type: Oauth2ErrorResponse
                example: |
                  {
                  "error": "conflict",
                  "error_description": "The same loginId and tenantId tried to login twice within 1 second."
                  }
          503:
            description: Gateway Error
            body:
              application/problem+json:
                type: Oauth2ErrorResponse
                example: |
                  {
                  "error": "server_error",
                  "error_description": "The server has encountered a situation that it doesn't know how to handle."
                  }
    /trusted-agent/authorize:
      description: Obtains a new agent on behalf authorization token for a registered customer.
      get:
        description: Obtains a new agent on behalf authorization token for a registered customer.
        displayName: getTrustedAgentAuthorizationToken
        is:
          - SlasRateLimit:
              responseStatus: 303
              responseStatus2: 400
              responseStatus3: 401
              responseStatus4: 500
        queryParameters:
          client_id:
            description: The SLAS public client ID or SLAS private client ID for use with trusted-agent requests. When using a private client ID a PKCE code challenge is not required.
            type: string
            required: true
            maxLength: 40
            example: "6c388ebd-6843-4863-aef9-781382c9e8cd"
          channel_id:
            description: The channel (ECOM site) that the user is associated with.
            type: string
            required: true
            maxLength: 100
            example: "RefArch"
          code_challenge:
            description: |-
              PKCE code challenge. Created by the caller.

              The `code_challenge` is created by SHA256 hashing the `code_verifier` and Base64 encoding the resulting hash.

              The `code_verifier` should be a high entropy cryptographically random string with a minimum of 43 characters and a maximum of 128 characters.

              The `code_challenge` is not needed if a using SLAS private `client_id`.
            type: string
            minLength: 43
            maxLength: 128
            example: "krc5G3_5lRUcXDUzFZQ88oJA_-ZmlHWkyGsgOrSLEWg"
          login_id:
            description: |-
              The ID of the shopper for trusted agent access.
            type: string
            maxLength: 128
            example: "jack.shopper@example.com"
          idp_origin:
            description: The IDP that the shopper is associated with.
            type: string
            required: true
            maxLength: 16
            example: "ecom"
          redirect_uri:
            description: |
              The redirect for Account Manager to redirect to. A variety of URI formats and wildcard for host are supported, but app links like `airbnb://` or `fb://` are not. Examples of supported URIs:
                - `http://localhost:3000/callback`
                - `https://example.com/callback`
                - `com.example.app:redirect_uri_path`
                - ` *.subdomain.topleveldomain.com`
            type: string
            required: true
            maxLength: 256
            example: "http://localhost:3000/callback"
          response_type:
            description: Must be `code`. Indicates that the caller wants an authorization code.
            required: true
            type: ResponseType
        responses:
          303:
            description: Success. Locaion header with `redirect_uri` to Account Manager to allow the Agent to log in.
            body:
              application/json:
                type: string
                example: "Location Header - https://account.demandware.com:443/dwsso/UI/Login?realm=/&goto=https://account.demandware.com:443/dwsso/oauth2/authorize?client_id=6739cb07-2f5f-4e16-a88a-8113a3cb5512&redirect_uri=https://stg.us1.shopper.cc.salesforce.com/api/v1/trusted-agent/callback"
          400:
            description: Bad Request
            body:
              application/problem+json:
                type: Oauth2ErrorResponse
                example: |
                  {
                    "error": "invalid_request",
                    "error_description": "Bad or missing client_id."
                  }
          401:
            description: Unauthorized
            body:
              application/problem+json:
                type: Oauth2ErrorResponse
                example: |
                  {
                  "error": "invalid_client",
                  "error_description": "Authorization failed."
                  }
          500:
            description: Internal Server Error
            body:
              application/problem+json:
                type: Oauth2ErrorResponse
                example: |
                  {
                  "error": "server_error",
                  "error_description": "The server has encountered a situation that it doesn't know how to handle."
                  }
    /trusted-agent/token:
      description: Evaluate the trusted agent token and issue a shopper token (JWT).
      post:
        description: |-
          Get a shopper JWT access token for a registered customer using a trusted agent (merchant).

          If using a SLAS private client ID, you must also use an `_sfdc_client_auth` header. 

          The value of the `_sfdc_client_auth` header must be a Base64-encoded string. The string is composed of a SLAS private client ID and client secret, separated by a colon (`:`). For example, `privateClientId:privateClientsecret` becomes `cHJpdmF0ZUNsaWVudElkOnByaXZhdGVDbGllbnRzZWNyZXQ=` after Base64 encoding.
        displayName: getTrustedAgentAccessToken
        securedBy:
          - CommerceCloudStandards.BearerToken:
              { Bearer J1G-R6uJ2VPrYvwKmYXF41Ujm2bo83AYOHVqEEEPT8Kgw }
        is:
          - SlasRateLimit:
              responseStatus: 200
              responseStatus2: 400
              responseStatus3: 401
              responseStatus4: 503
        headers:
          Authorization:
            displayName: Authorization
            description: "This is the `Bearer` token returned from Account Manager after the trusted agent on behalf of (TAOB) authorize call."
            type: string
            required: false
            example: "Bearer HQ8zQXpc0VVaXEdBdzasZQaCQDw"
          _sfdc_client_auth:
            displayName: _sfdc_client_auth
            description: |-
              "Base64-encoded string of client credentials. The string is composed of a client ID and client secret, separated by a colon (`:`), like this: `clientId:clientSecret`. (Do not add the string `"Basic"`.)

              The `_sfdc_client_auth` header is only required when using a SLAS private client ID."
            type: string
            required: false
            example: "<Base64-encoded client credentials>"
        body:
          application/x-www-form-urlencoded:
            type: TrustedAgentTokenRequest
        responses:
          200:
            description: Success
            body:
              application/json:
                type: TokenResponse
                example: |
                  {
                    "access_token": "eyJ2ZXIiOiIxLjAiLCJraWQiOiJTTEFTIiwidHlwIjoiand0IiwiY2x2IjoiSjIuMS4wIiwiYWxnIjoiRVMyNTYifQ.eyJhdWQiOiJjb3JlL2Rldi9idGluZ2V5bHRtMiIsImF1dCI6IkdVSUQiLCJzdWIiOiJ1c2lkOjo1NGFkMmM1YS05MWYwLTQ0YWItODE3Yy03M2Q2Yjg2ODcyZDk6OnVwbjpndWVzdCIsIm5iZiI6MTU4Mjg0NTYyNCwiY3R4Ijoic2ZkYy5jb21tZXJjZWNsb3VkIiwiaXNzIjoiY29yZS9kZXYvYnRpbmdleWx0bTIiLCJzdHkiOiJVc2VyIiwiaXN0IjoxLCJleHAiOjE1ODI4NDU3NDQsImlhdCI6MTU4Mjg0NTY1NCwianRpIjoiQzJDOTA0ODg2NDA3MDkwNDg4NjQwNzMyMjExNzQ1ODEyMTQzIn0.2a6lMBSY17PrhDO8pvEk7PCXW_nkguMHi4J-Tuirkz-ETB6rnKyuRjF5yD6B55tMvm8dO8ulAHyDYqjObMxLJg",
                    "id_token": "eyJraWQiOiI3NGU2YjMxZS1lYTczLTQ3OTYtOWRkYi1jMDJmZGI4ZDgwYmUiLCJhbGciOiJSUzI1NiJ9.eyJzdWIiOiJ1c2lkOmQ1MDBhMzY5LTc1MWQtNDkzYy1iNDAzLThmOThmYjg3MTdiNiIsImF1ZCI6IjU1M2FjOGFjLTRkYjktNGVkMy04MjVjLTNhZTNiZjVkMzI3YiIsImlzcyI6ImRldi51cy5zaG9wcGVyLmNjLnNhbGVzZm9yY2UuY29tIiwibmFtZSI6ImJsYWlyLnNsYXMudGVzdEBnbWFpbC5jb20iLCJleHAiOjE1OTExMTE0MzgsImlhdCI6MTU5MTEwOTYzOCwiZW1haWwiOiJibGFpci5zbGFzLnRlc3RAZ21haWwuY29tIn0.KgpAcq-G9Lz7IGnjkJlaFLFXYncVCwcVrRIuy3bEfgzRozqaDRvAori4oOz4RtgYjmoc5x2euoisHL0mVnHgPKOdYBty1wTJqneJEQt6hP4Kp0KFciID_ILCi-DE8VWS5t0NknnMP_iKhIkqcRL48iwPFUWkWA6AEWxE_yvJLNRLithsSxsx7EfBfpD8Hr2b5tMEwImQNmJNYGRTI4LSmcYspBORvJoAnfGpMC0kglxl40bhf5j4ItX4_DiWQC4zaGYD-HJV4BDr6C7iGCs5ZVPypF0yQD3iBio26fwj9Ys5WF9XMtPtqET2kqsz6fDC5GkE6HTUHH_r87jxbDq-8w",
                    "refresh_token": "EgMYpjfFKdlSy-a3PYeyihmP95IpIp3FaDpPmVH1yu8.lahomBi7zJbRa6yKAuAAiKu3lprTPsEueKwqcBvhRLU",
                    "expires_in": 900,
                    "token_type": "Bearer",
                    "refresh_token_expires_in": 7776000,
                    "usid": "18cda486-fe32-4e27-888b-6e4f89938e67",
                    "customer_id": "1000005",
                    "enc_user_id": "45D39A8499A95288F82855427EBA99B5",
                    "idp_access_token": ""           
                  }
          400:
            description: Bad Request
            body:
              application/problem+json:
                type: Oauth2ErrorResponse
                example: |
                  {
                    "error": "invalid_request",
                    "error_description": "Bad or missing authorization token."
                  }
          401:
            description: Unauthorized
            body:
              application/problem+json:
                type: Oauth2ErrorResponse
                example: |
                  {
                  "error": "invalid_client",
                  "error_description": "Authorization failed."
                  }
          503:
            description: Gateway Error
            body:
              application/problem+json:
                type: Oauth2ErrorResponse
                example: |
                  {
                  "error": "server_error",
                  "error_description": "The server has encountered a situation that it doesn't know how to handle."
                  }
    /password:
      /reset:
        description: Request a password reset token. The password reset token will be sent to the shopper using a redirect URI back to the merchant who will then send the token to the customer.
        post:
          description: Request a reset password token
          displayName: getPasswordResetToken
          is:
            - SlasRateLimit:
                responseStatus: 200
                responseStatus2: 400
                responseStatus3: 401
                responseStatus4: 412
          body:
            application/x-www-form-urlencoded:
              type: PasswordActionRequest
          responses:
            200:
              description: Success
            400:
              description: Bad Request
              body:
                application/problem+json:
                  type: Oauth2ErrorResponse
                  example: |
                    {
                      "error": "invalid_request",
                      "error_description": "Bad or missing request parameters."
                    }
            401:
              description: Unauthorized
              body:
                application/problem+json:
                  type: Oauth2ErrorResponse
                  example: |
                    {
                    "error": "invalid_client",
                    "error_description": "Authorization failed."
                    }
            412:
              description: Precondition Failure
              body:
                application/problem+json:
                  type: Oauth2ErrorResponse
                  example: |
                    {
                    "error": "precondition_failure",
                    "error_description": "Depenant service is not available."
                    }

      /action:
        description: Creates a new password. Creates a new password that is passed in with the password action token that was sent from the `/password/reset` endpoint.
        post:
          description: Creates a new password
          displayName: resetPassword
          is:
            - SlasRateLimit:
                responseStatus: 200
                responseStatus2: 400
                responseStatus3: 401
                responseStatus4: 503
          headers:
            Authorization:
              displayName: Authorization
              description: "Base64-encoded string for HTTP Basic authentication. The string is composed of a client ID and client secret, separated by a colon (`:`), like this: `clientId:clientSecret`"
              type: string
              required: false
              example: "Basic <client credentials>"
          body:
            application/x-www-form-urlencoded:
              type: PasswordActionVerifyRequest
          responses:
            200:
              description: Success
            400:
              description: Bad Request
              body:
                application/problem+json:
                  type: Oauth2ErrorResponse
                  example: |
                    {
                      "error": "invalid_request",
                      "error_description": "Bad or missing request parameters."
                    }
            401:
              description: Unauthorized
              body:
                application/problem+json:
                  type: Oauth2ErrorResponse
                  example: |
                    {
                    "error": "invalid_client",
                    "error_description": "Authorization failed."
                    }
            503:
              description: Gateway Error
              body:
                application/problem+json:
                  type: Oauth2ErrorResponse
                  example: |
                    {
                    "error": "gateway_server_error",
                    "error_description": "A service that the server relies on is down or is having difficulty."
                    }
    /passwordless/token:
      description: Evaluate the passwordless token and issue a shopper token (JWT).
      post:
        description: Issue a shopper token (JWT).
        displayName: getPasswordLessAccessToken
        is:
          - SlasRateLimit:
              responseStatus: 200
              responseStatus2: 400
              responseStatus3: 401
              responseStatus4: 503
        headers:
          Authorization:
            displayName: Authorization
            description: "Base64-encoded string for HTTP Basic authentication. The string is composed of a client ID and client secret, separated by a colon (`:`), like this: `clientId:clientSecret`"
            type: string
            required: false
            example: "Basic <client credentials>"
        body:
          application/x-www-form-urlencoded:
            type: PasswordLessLoginTokenRequest
        responses:
          200:
            description: Success
            body:
              application/json:
                type: TokenResponse
                example: |
                  {
                    "access_token": "eyJ2ZXIiOiIxLjAiLCJraWQiOiJTTEFTIiwidHlwIjoiand0IiwiY2x2IjoiSjIuMS4wIiwiYWxnIjoiRVMyNTYifQ.eyJhdWQiOiJjb3JlL2Rldi9idGluZ2V5bHRtMiIsImF1dCI6IkdVSUQiLCJzdWIiOiJ1c2lkOjo1NGFkMmM1YS05MWYwLTQ0YWItODE3Yy03M2Q2Yjg2ODcyZDk6OnVwbjpndWVzdCIsIm5iZiI6MTU4Mjg0NTYyNCwiY3R4Ijoic2ZkYy5jb21tZXJjZWNsb3VkIiwiaXNzIjoiY29yZS9kZXYvYnRpbmdleWx0bTIiLCJzdHkiOiJVc2VyIiwiaXN0IjoxLCJleHAiOjE1ODI4NDU3NDQsImlhdCI6MTU4Mjg0NTY1NCwianRpIjoiQzJDOTA0ODg2NDA3MDkwNDg4NjQwNzMyMjExNzQ1ODEyMTQzIn0.2a6lMBSY17PrhDO8pvEk7PCXW_nkguMHi4J-Tuirkz-ETB6rnKyuRjF5yD6B55tMvm8dO8ulAHyDYqjObMxLJg",
                    "id_token": "eyJraWQiOiI3NGU2YjMxZS1lYTczLTQ3OTYtOWRkYi1jMDJmZGI4ZDgwYmUiLCJhbGciOiJSUzI1NiJ9.eyJzdWIiOiJ1c2lkOmQ1MDBhMzY5LTc1MWQtNDkzYy1iNDAzLThmOThmYjg3MTdiNiIsImF1ZCI6IjU1M2FjOGFjLTRkYjktNGVkMy04MjVjLTNhZTNiZjVkMzI3YiIsImlzcyI6ImRldi51cy5zaG9wcGVyLmNjLnNhbGVzZm9yY2UuY29tIiwibmFtZSI6ImJsYWlyLnNsYXMudGVzdEBnbWFpbC5jb20iLCJleHAiOjE1OTExMTE0MzgsImlhdCI6MTU5MTEwOTYzOCwiZW1haWwiOiJibGFpci5zbGFzLnRlc3RAZ21haWwuY29tIn0.KgpAcq-G9Lz7IGnjkJlaFLFXYncVCwcVrRIuy3bEfgzRozqaDRvAori4oOz4RtgYjmoc5x2euoisHL0mVnHgPKOdYBty1wTJqneJEQt6hP4Kp0KFciID_ILCi-DE8VWS5t0NknnMP_iKhIkqcRL48iwPFUWkWA6AEWxE_yvJLNRLithsSxsx7EfBfpD8Hr2b5tMEwImQNmJNYGRTI4LSmcYspBORvJoAnfGpMC0kglxl40bhf5j4ItX4_DiWQC4zaGYD-HJV4BDr6C7iGCs5ZVPypF0yQD3iBio26fwj9Ys5WF9XMtPtqET2kqsz6fDC5GkE6HTUHH_r87jxbDq-8w",
                    "refresh_token": "EgMYpjfFKdlSy-a3PYeyihmP95IpIp3FaDpPmVH1yu8.lahomBi7zJbRa6yKAuAAiKu3lprTPsEueKwqcBvhRLU",
                    "expires_in": 900,
                    "refresh_token_expires_in": 7776000,
                    "token_type": "Bearer",
                    "usid": "18cda486-fe32-4e27-888b-6e4f89938e67",
                    "customer_id": "1000005",
                    "enc_user_id": "45D39A8499A95288F82855427EBA99B5",
                    "idp_access_token": ""      
                  }
          400:
            description: Bad Request
            body:
              application/problem+json:
                type: Oauth2ErrorResponse
                example: |
                  {
                    "error": "invalid_request",
                    "error_description": "Bad or missing access token."
                  }
          401:
            description: Unauthorized
            body:
              application/problem+json:
                type: Oauth2ErrorResponse
                example: |
                  {
                  "error": "invalid_client",
                  "error_description": "Authorization failed."
                  }
          503:
            description: Gateway Error
            body:
              application/problem+json:
                type: Oauth2ErrorResponse
                example: |
                  {
                  "error": "gateway_server_error",
                  "error_description": "A service that the server relies on is down or is having difficulty."
                  }

    /revoke:
      description: Shopper OAuth 2.1 token revoke endpoint.
      post:
        description: Invalidate the refresh token. A basic auth header with Base64-encoded `clientId:secret` is required in the Authorization header, and the refresh token to be revoked is required in the body.
        displayName: revokeToken
        headers:
          Authorization:
            displayName: Authorization
            description: Base64 string for HTTP Basic authentication.
            type: string
            required: true
            example: "Basic czZCaGRSa3F0MzpnWDFmQmF0M2JW"
        body:
          application/x-www-form-urlencoded:
            type: TokenActionRequest
            example: |
              {
                "token": "ry5XU_WHX20S6Cn6W7keFIs7Pzkv4wTZJS9Yvh0Ve9A.cdBxoCY9Q3jffQQOFnb_qghbSmSRnn9-2H4GwFTDMTk",
                "token_type_hint": "refresh_token"
              }
        responses:
          200:
            description: Success
            body:
              application/json:
                type: TokenResponse
                example: |
                  {
                      "access_token": "",
                      "id_token": "null",
                      "refresh_token": "EnL9U2f3-WiVPwL60CFBI21UY_oxWAwX5JkgO-X12Vs",
                      "expires_in": 0,
                      "refresh_token_expires_in": 0,
                      "token_type": "Bearer",
                      "usid": "null",
                      "customer_id": "null",
                      "enc_user_id": "null",
                      "idp_access_token": ""
                  }
          400:
            description: Bad Request
            body:
              application/problem+json:
                type: Oauth2ErrorResponse
                example: |
                  {
                    "error": "invalid_request",
                    "error_description": "Bad or missing refresh token."
                  }
          401:
            description: Unauthorized
            body:
              application/problem+json:
                type: Oauth2ErrorResponse
                example: |
                  {
                  "error": "invalid_client",
                  "error_description": "Basic Authorization failed."
                  }
          500:
            description: Internal Server Error
            body:
              application/problem+json:
                type: Oauth2ErrorResponse
                example: |
                  {
                  "error": "server_error",
                  "error_description": "The server has encountered a situation that it doesn't know how to handle."
                  }
    /introspect:
      description: Returns information about an access token or refresh token. Used by resource servers or other internal servers.
      post:
        description: Returns the token properties. A basic auth header with Base64-encoded `clientId:secret` is required in the Authorization header, as well as an access token or refresh token. Use `token_type_hint` to help identify the token.
        displayName: introspectToken
        headers:
          Authorization:
            displayName: Authorization
            description: Base64 string for HTTP Basic authentication.
            type: string
            required: true
            example: "Basic <client credentials>"
        body:
          application/x-www-form-urlencoded:
            type: TokenActionRequest
            example: | 
              {
                "token": "eyJ2ZXIiOiIxLjAiLCJraWQiOiI0ZTQyNTFkOS0zM2Y2LTRjMTMtYjZmZC1mOWJkNTJmYTZhNDciLCJ0eXAiOiJqd3QiLCJjbHYiOiJKMi4xLjAiLCJhbGciOiJFUzI1NiJ9.eyJhdXQiOiJHVUlEIiwic2NwIjoic2ZjYy5wcm9kdWN0cy5ybyBzZmNjLmNhdGFsb2dzLnJvIHNmY2Muc2hvcHBlci5ydyIsInN1YiI6ImNjLXNsYXM6OnNsc2FfZGV2OjpzY2lkOjU1M2FjOGFjLTRkYjktNGVkMy04MjVjLTNhZTNiZjVkMzI3Yjo6dXNpZDoxY2E3OWZiNi0xYjIyLTRmOWItOGJiNi05YmU5NWNjMjA4NjMiLCJjdHgiOiJzbGFzLm5vdF9mb3JfZXh0ZXJuYWxfdXNlIiwiaXNzIjoic2xhcy9kZXYvc2xzYV9kZXYiLCJpc3QiOjEsImF1ZCI6ImNvbW1lcmNlY2xvdWQvZGV2L3Nsc2FfZGV2IiwibmJmIjoxNTk0NzY0MDgwLCJzdHkiOiJVc2VyIiwiaXNiIjoidWlkbzpzbGFzOjp1cG46R3Vlc3Q6OnVpZG46R3Vlc3QgVXNlciIsImV4cCI6MTU5NDc2NTkxMCwiaWF0IjoxNTk0NzY0MTEwLCJqdGkiOiJDMkMxNjM0NTE0NTEwLTE3MTQzMTg2NzY0MjcwNTcyNjQ2NTYxMzgifQ.UVYAsWXCn3hoUPy8vLlc7O96RZEHD3N3ZgdNH-ZVvJ1G-R6uJ2VPrYvwKmYXF41Ujm2bo83AYOHVqEEEPT8Kgw",
                "token_type_hint": "access_token"
              }
        responses:
          200:
            description: Success
            body:
              application/json:
                example: |
                  {
                    "active": true,
                    "scope": "offline_access openid",
                    "client_id": "553ac8ac-4db9-4ed3-825c-3ae3bf5d327b",
                    "sub": "usid:edbf780a-2d83-4e82-9f64-8d051e3538d2::uido:Google::upn:blair.slas.test@gmail.com::uidn:Foo SLAS-Test",
                    "exp": 1602523099,
                    "iat": 1594747099,
                    "iss": "https://localhost:9000/",
                    "token_type": "refresh_token"
                  }
          400:
            description: Bad Request
            body:
              application/problem+json:
                type: Oauth2ErrorResponse
                example: |
                  {
                    "error": "invalid_request",
                    "error_description": "Bad or missing access token or refresh token"
                  }
          401:
            description: Unauthorized
            body:
              application/problem+json:
                type: Oauth2ErrorResponse
                example: |
                  {
                  "error": "invalid_client",
                  "error_description": "Basic Authorization failed."
                  }
          500:
            description: Internal Server Error
            body:
              application/problem+json:
                type: Oauth2ErrorResponse
                example: |
                  {
                  "error": "server_error",
                  "error_description": "The server has encountered a situation that it doesn't know how to handle."
                  }
    /userinfo:
      description: Return claims about the authenticated user.
      get:
        description: Returns a JSON listing of claims about the currently authenticated user.
        displayName: getUserInfo
        securedBy:
          - CommerceCloudStandards.ShopperToken:
              {
                Bearer eyJ2ZXIiOiIxLjAiLCJraWQiOiI0ZTQyNTFkOS0zM2Y2LTRjMTMtYjZmZC1mOWJkNTJmYTZhNDciLCJ0eXAiOiJqd3QiLCJjbHYiOiJKMi4xLjAiLCJhbGciOiJFUzI1NiJ9.eyJhdXQiOiJHVUlEIiwic2NwIjoic2ZjYy5wcm9kdWN0cy5ybyBzZmNjLmNhdGFsb2dzLnJvIHNmY2Muc2hvcHBlci5ydyIsInN1YiI6ImNjLXNsYXM6OnNsc2FfZGV2OjpzY2lkOjU1M2FjOGFjLTRkYjktNGVkMy04MjVjLTNhZTNiZjVkMzI3Yjo6dXNpZDoxY2E3OWZiNi0xYjIyLTRmOWItOGJiNi05YmU5NWNjMjA4NjMiLCJjdHgiOiJzbGFzLm5vdF9mb3JfZXh0ZXJuYWxfdXNlIiwiaXNzIjoic2xhcy9kZXYvc2xzYV9kZXYiLCJpc3QiOjEsImF1ZCI6ImNvbW1lcmNlY2xvdWQvZGV2L3Nsc2FfZGV2IiwibmJmIjoxNTk0NzY0MDgwLCJzdHkiOiJVc2VyIiwiaXNiIjoidWlkbzpzbGFzOjp1cG46R3Vlc3Q6OnVpZG46R3Vlc3QgVXNlciIsImV4cCI6MTU5NDc2NTkxMCwiaWF0IjoxNTk0NzY0MTEwLCJqdGkiOiJDMkMxNjM0NTE0NTEwLTE3MTQzMTg2NzY0MjcwNTcyNjQ2NTYxMzgifQ.UVYAsWXCn3hoUPy8vLlc7O96RZEHD3N3ZgdNH-ZVvJ1G-R6uJ2VPrYvwKmYXF41Ujm2bo83AYOHVqEEEPT8Kgw,
              }
        #       headers:
        #          Authorization:
        #            displayName: Authorization
        #            description: SLAS Access Token
        #            type: string
        #           required: true
        #            example: "eyJ2ZXIiOiIxLjAiLCJraWQiOiI0ZTQyNTFkOS0zM2Y2LTRjMTMtYjZmZC1mOWJkNTJmYTZhNDciLCJ0eXAiOiJqd3QiLCJjbHYiOiJKMi4xLjAiLCJhbGciOiJFUzI1NiJ9.eyJhdXQiOiJHVUlEIiwic2NwIjoic2ZjYy5wcm9kdWN0cy5ybyBzZmNjLmNhdGFsb2dzLnJvIHNmY2Muc2hvcHBlci5ydyIsInN1YiI6ImNjLXNsYXM6OnNsc2FfZGV2OjpzY2lkOjU1M2FjOGFjLTRkYjktNGVkMy04MjVjLTNhZTNiZjVkMzI3Yjo6dXNpZDoxY2E3OWZiNi0xYjIyLTRmOWItOGJiNi05YmU5NWNjMjA4NjMiLCJjdHgiOiJzbGFzLm5vdF9mb3JfZXh0ZXJuYWxfdXNlIiwiaXNzIjoic2xhcy9kZXYvc2xzYV9kZXYiLCJpc3QiOjEsImF1ZCI6ImNvbW1lcmNlY2xvdWQvZGV2L3Nsc2FfZGV2IiwibmJmIjoxNTk0NzY0MDgwLCJzdHkiOiJVc2VyIiwiaXNiIjoidWlkbzpzbGFzOjp1cG46R3Vlc3Q6OnVpZG46R3Vlc3QgVXNlciIsImV4cCI6MTU5NDc2NTkxMCwiaWF0IjoxNTk0NzY0MTEwLCJqdGkiOiJDMkMxNjM0NTE0NTEwLTE3MTQzMTg2NzY0MjcwNTcyNjQ2NTYxMzgifQ.UVYAsWXCn3hoUPy8vLlc7O96RZEHD3N3ZgdNH-ZVvJ1G-R6uJ2VPrYvwKmYXF41Ujm2bo83AYOHVqEEEPT8Kgw"
        queryParameters:
          channel_id:
            description: Used when getting user information for a SFCC login. For an ECOM customer, this is angalous to the site ID. Required when getting user information for an ECOM customer.
            required: false
            maxLength: 100
            type: string
            example: "RefArch"
        responses:
          200:
            description: Success
            body:
              application/json:
                type: string
                example: |
                  {
                      "sub": "98a84e4b-be50-422a-ab04-e9034e859eb9",
                      "name": "Slas Test",
                      "given_name": "Slas",
                      "family_name": "Test",
                      "email": "slas-okta-test@test.org",
                      "external_id": "okta-00u38qdjnScLOB1mq5d6",
                      "customer_id": "abxHc1lblIlKwRl0k1mqYYkewY",
                      "validated": true
                  }
          400:
            description: Bad Request
            body:
              application/problem+json:
                type: Oauth2ErrorResponse
                example: |
                  {
                    "error": "invalid_request",
                    "error_description": "Bad or missing access token."
                  }
          500:
            description: Internal Server Error
            body:
              application/problem+json:
                type: Oauth2ErrorResponse
                example: |
                  {
                  "error": "server_error",
                  "error_description": "The server has encountered a situation that it doesn't know how to handle."
                  }

    /.well-known/openid-configuration:
      description: |
        OpenID Connect (OIDC) is an identity layer built on top of the OAuth 2.1 standard and supported by some OAuth 2.1 providers, such as Google. It defines a sign-in flow that enables a client application to authenticate a user and obtain information about the user. Each piece of user information is called a claim. Claims can be used to access username, email, and so on. User identity information is encoded in a secure JSON Web Token (JWT). 

        For performance purposes, the `/.well-known/openid-configuration` endpoint is rate limited to 25 call per minute.
      get:
        description: |
          Returns a JSON listing of the OpenID/OAuth endpoints, supported scopes and claims, public keys used to sign the tokens, and other details.

          For performance purposes, the `/jwks` endpoint is rate limited to 25 call per minute.
        displayName: getWellknownOpenidConfiguration
        responses:
          200:
            description: Success
            body:
              application/json:
                type: string
                example: |
                  {
                      "issuer": "https://stg.us.shopper.cc.salesforce.com/api/v1/organizations/zzzz_tst/oauth2",
                      "authorization_endpoint": "https://stg.us.shopper.cc.salesforce.com/api/v1/organizations/zzzz_tst/oauth2/authorize",
                      "token_endpoint": "https://stg.us.shopper.cc.salesforce.com/api/v1/organizations/zzzz_tst/oauth2/token",
                      "revocation_endpoint": "https://stg.us.shopper.cc.salesforce.com/api/v1/organizations/zzzz_tst/oauth2/revoke",
                      "userinfo_endpoint": "https://stg.us.shopper.cc.salesforce.com/api/v1/organizations/zzzz_tst/oauth2/userinfo",
                      "jwks_uri": "https://stg.us.shopper.cc.salesforce.com/api/v1/organizations/zzzz_tst/oauth2/jwks",
                      "grant_types_supported": [
                          "authorization_code",
                          "authorization_code_pkce",
                          "client_credentials",
                          "refresh_token"
                      ],
                      "id_token_encryption_enc_values_supported": [
                          "A256GCM"
                      ],
                      "subject_types_supported": [
                          "public"
                      ],
                      "claims_supported": [
                          "email",
                          "name",
                          "given_name",
                          "family_name",
                          "sub"
                      ],
                      "scopes_supported": [
                          "email",
                          "openid",
                          "profile"
                      ],
                      "response_types_supported": [
                          "code",
                          "token",
                          "token id_token"
                      ],
                      "code_challenge_methods_supported": [
                          "S256"
                      ]
                  }
          400:
            description: Bad Request
            body:
              application/problem+json:
                type: Oauth2ErrorResponse
                example: |
                  {
                    "error": "invalid_request",
                    "error_description": "Tenant Id Exception - Must be a well-formed tenantId"
                  }
          500:
            description: Internal Server Error
            body:
              application/problem+json:
                type: Oauth2ErrorResponse
                example: |
                  {
                  "error": "server_error",
                  "error_description": "The server has encountered a situation that it doesn't know how to handle."
                  }
    /jwks:
      description: |
        The JSON Web Key Set (JWKS) is a set of keys that contains the public keys used to verify any JSON Web Token (JWT) issued by the authorization server and signed using the EC256 signing algorithm. 

        For performance purposes, the `/jwks` endpoint is rate limited to 25 call per minute.
      get:
        description: |
          Returns a JSON Web Key Set (JWKS) containing the current, past, and future public keys. The key set enables clients to validate the Shopper JSON Web Token (JWT) issued by SLAS.

          For performance purposes, the `/jwks` endpoint is rate limited to 25 call per minute.
        displayName: getJwksUri
        responses:
          200:
            description: Success
            body:
              application/json:
                type: string
                example: |
                  {
                    "keys": [
                        {
                            "kty": "EC",
                            "crv": "P-256",
                            "use": "sig",
                            "kid": "2d670fa8-0f28-44a1-b8b4-87a6d2feb1d8",
                            "x": "_2tPqxGhgX6cA5Qg7v6UH_9om8OR3-OehkgXXWraTp8",
                            "y": "DAykmQPtf282buIcL0rLwKYbK6ApgripMjazdAthUFw"
                        },
                        {
                            "kty": "EC",
                            "crv": "P-256",
                            "use": "sig",
                            "kid": "eb70508f-4d64-46f7-a3d5-b36558d6e6b6",
                            "x": "VV0JVJFhkz71wY0E73Z-snorZ5oJf1QOdkIbCjyMqLs",
                            "y": "QLkqBVSPPrkd7HjaSEMgMU9Ob-FDpg1W-oLq5I4ExqQ"
                        }
                    ]
                  }
          400:
            description: Bad Request
            body:
              application/problem+json:
                type: Oauth2ErrorResponse
                example: |
                  {
                    "error": "invalid_request",
                    "error_description": "Tenant Id Exception - Must be a well-formed tenantId"
                  }
          500:
            description: Internal Server Error
            body:
              application/problem+json:
                type: Oauth2ErrorResponse
                example: |
                  {
                    "error": "server_error",
                    "error_description": "The server has encountered a situation it doesn't know how to handle."
                  }
