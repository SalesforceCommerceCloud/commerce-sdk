import { BaseClient, ClientConfig, ResponseError } from "@commerce-sdk/core";

import {
{{#each model.declares}}
    {{#eq $classData.name "amf.client.model.domain.NodeShape"}}
        {{getValue name}}{{#unless @last}},{{/unless}}
    {{/eq}}
{{/each}}
} from "./{{apiSpec}}.types";

export class Client extends BaseClient {
  constructor(config: ClientConfig = new ClientConfig()) {
    if (!!!config.baseUri) {
      config.baseUri = "{{servers/0/url}}";
    }
    super(config);
  }

{{#each model.encodes.endPoints}}
{{#each operations}}
{{#or (is method "get") (is method "delete") (is method "post") (is method "put")}}
  /**
  * {{description}}
  */
  {{name}}(parameters = {}{{#or (is method "post") (is method "put")}}, body: {{request.payloads.[0].schema.inherits.[0].linkTarget.name}}{{/or}}): Promise<{{#if (eq (isReturnPayloadDefined .) true)}}{{getReturnPayloadType .}}{{else}}object{{/if}}> {
    const pathParameters = {
{{#each ../parameters}}      "{{name}}": parameters["{{name}}"]{{#unless @last}},{{/unless}}
{{/each}}
    };

{{#if ../parameters}}
    for (let param in pathParameters) {
      if (pathParameters[param] === undefined
          || pathParameters[param] === null) {
        throw new Error(`Parameter '${param}' is required when calling {{name}}`);
      }
    }

{{/if}}
    const queryParameters = {
{{#each request/queryParameters}}      "{{name}}": parameters["{{name}}"]{{#unless @last}},{{/unless}}
{{/each}}
    }

    const requiredQueryParameters = [];
{{#each request/queryParameters}}{{#is required "true"}}    requiredQueryParameters.push("{{name}}");
{{/is}}{{/each}}

{{#if request/queryParameters}}
    for (let param in requiredQueryParameters) {
      if (queryParameters[param] === undefined
          || queryParameters[param] === null) {
        throw new Error(`Parameter '${param}' is required when calling {{name}}`);
      }
    }

{{/if}}
    return this.{{method}}("{{../path}}", pathParameters, queryParameters{{#or (is method "post") (is method "put")}}, body{{/or}}){{#eq (isReturnPayloadDefined .) true}}.then({{getReturnPayloadType .}}.instanceFromJson){{/eq}};
  }

{{/or}}
{{/each}}
{{/each}}
}
