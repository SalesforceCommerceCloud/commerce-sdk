{{#each model.encodes.endPoints}}
  {{#each operations}}
    /**
    * {{description}}
    */
    {{name}}(
      options{{#or (is method "get") (is method "delete")}}?{{/or}}: {
        rawResponse?: boolean,
        parameters?: {
          {{#each ../parameters}}
          {{name}}: any
          {{/each}}
          {{#each request/queryParameters}}
          {{name}}{{#if (not (is required "true"))}}?{{/if}}: any
          {{/each}}
        },
        headers?: { [key: string]: string }{{#or (is method "patch") (is method "post") (is method "put")}}, 
        body: {{default request.payloads.[0].schema.inherits.[0].linkTarget.name "object"}}{{/or}}
      }
    ): Promise<{{getReturnPayloadType .}}> {
    
      const parameters = (options && options.parameters) ? options.parameters : {};
      
      const pathParameters = {
      {{#each ../parameters}}
        "{{name}}": parameters["{{name}}"]{{#unless @last}},{{/unless}}
      {{/each}}
      };

      const queryParameters = _.omit(parameters, _.keys(pathParameters));

      // @ts-ignore
      return StaticClient.{{method}}({
        client: this,
        rawResponse: (options || {}).rawResponse,
        path: "{{../path}}",
        pathParameters: pathParameters,
        queryParameters: queryParameters,
        headers: (options || {}).headers{{#or (is method "patch") (is method "post") (is method "put")}}, 
        body: (options || {}).body{{/or}}
      });
    }

  {{/each}}
{{/each}}
