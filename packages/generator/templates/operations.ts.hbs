{{#each model.encodes.endPoints}}
  {{#each operations}}
      /**
      * {{description}}
      */
      {{name}}(
        {{#and (isEmpty ../parameters) (equalsLength request.queryParameters 0)}}
          {{#or (is method "patch") (is method "post") (is method "put")}}body: {{default request.payloads.[0].schema.inherits.[0].linkTarget.name "object"}}{{/or}}
        {{else}}
        parameters: {
          {{#each ../parameters}}
          {{name}}: any
          {{/each}}
          {{#each request/queryParameters}}
          {{name}}{{#if (not (is required "true"))}}?{{/if}}: any
          {{/each}}
        }{{#or (is method "patch") (is method "post") (is method "put")}}, body: {{default request.payloads.[0].schema.inherits.[0].linkTarget.name "object"}}{{/or}}
        {{/and}}
      ): Promise<{{#if (eq (isReturnPayloadDefined .) true)}}{{getReturnPayloadType .}}{{else}}object{{/if}}> {

        const pathParameters = {
    {{#each ../parameters}}
      "{{name}}": parameters["{{name}}"]{{#unless @last}},{{/unless}}
    {{/each}}
        };

        const queryParameters = {
    {{#each request/queryParameters}}
      "{{name}}": parameters["{{name}}"]{{#unless @last}},{{/unless}}
    {{/each}}
        }

    // @ts-ignore
    return StaticClient.{{method}}({
          client: this,
          path: "{{../path}}",
          pathParameters: pathParameters,
          queryParameters: queryParameters{{#or (is method "patch") (is method "post") (is method "put")}}, body: body{{/or}}{{getSecurityScheme ", authScheme: " security}}
      });
    }

  {{/each}}
{{/each}}
