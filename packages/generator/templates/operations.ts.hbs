{{#each model.encodes.endPoints}}
  {{#each operations}}
    /**
    * {{description}}
    * 
    * If you would like to get a raw Response object use the other {{name}} function.
    * 
    * @returns A promise of type {{getReturnPayloadType .}}
    */
    {{name}}(
      options{{#or (is method "get") (is method "delete")}}?{{/or}}: {
        parameters?: {
          {{#each ../parameters}}
          {{! common parameters can be configured at the client level and therefore are not required }}
          {{name}}{{#if (isCommonPathParameter name)}}?{{/if}}: {{{ getParameterDataType .}}}
          {{/each}}
          {{#each request/queryParameters}}
          {{name}}{{#if (or (not (is required "true")) (isCommonQueryParameter name))}}?{{/if}}: {{{ getParameterDataType .}}}
          {{/each}}
        },
        headers?: { [key: string]: string }{{#or (is method "patch") (is method "post") (is method "put")}}, 
        body: {{default request.payloads.[0].schema.inherits.[0].linkTarget.name "object"}}{{/or}}
      }
    ): Promise<{{getReturnPayloadType .}}>;

    /**
    * {{description}}
    *
    * @returns A promise of type Response if rawResponse is true, a promise of type {{getReturnPayloadType .}} otherwise
    */
    {{name}}<T extends boolean>(
      options{{#or (is method "get") (is method "delete")}}?{{/or}}: {
        parameters?: {
          {{#each ../parameters}}
          {{! common parameters can be configured at the client level and therefore are not required }}
          {{name}}{{#if (isCommonPathParameter name)}}?{{/if}}: {{{ getParameterDataType .}}}
          {{/each}}
          {{#each request/queryParameters}}
          {{name}}{{#if (or (not (is required "true")) (isCommonQueryParameter name))}}?{{/if}}: {{{ getParameterDataType .}}}
          {{/each}}
        },
        headers?: { [key: string]: string }{{#or (is method "patch") (is method "post") (is method "put")}}, 
        body: {{default request.payloads.[0].schema.inherits.[0].linkTarget.name "object"}}{{/or}}
      },
      rawResponse?: T
    ): Promise<T extends true ? Response : {{getReturnPayloadType .}}>;

    /**
    * {{description}}
    */
    {{name}}(
      options{{#or (is method "get") (is method "delete")}}?{{/or}}: {
        parameters?: {
          {{#each ../parameters}}
          {{! common parameters can be configured at the client level and therefore are not required }}
          {{name}}{{#if (isCommonPathParameter name)}}?{{/if}}: {{{ getParameterDataType .}}}
          {{/each}}
          {{#each request/queryParameters}}
          {{name}}{{#if (or (not (is required "true")) (isCommonQueryParameter name))}}?{{/if}}: {{{ getParameterDataType .}}}
          {{/each}}
        },
        headers?: { [key: string]: string }{{#or (is method "patch") (is method "post") (is method "put")}}, 
        body: {{default request.payloads.[0].schema.inherits.[0].linkTarget.name "object"}}{{/or}}
      },
      rawResponse?: boolean,
    ): Promise<Response | {{getReturnPayloadType .}}> {
    
      const parameters = (options && options.parameters) ? options.parameters : {};
      
      const pathParameters = {
      {{#each ../parameters}}
        "{{{name}}}": parameters["{{{name}}}"]
        {{! if it is a common path parameter, fallback to client config for undefined }}
        {{#if (isCommonPathParameter name)}} !== undefined ? parameters["{{{name}}}"] : this.clientConfig.parameters["{{{name}}}"]{{/if}}
        {{#unless @last}},{{/unless}}
      {{/each}}
      };

      const queryParameters = _.omit(parameters, _.keys(pathParameters));

      {{#each request.queryParameters}}
        {{! for queryParameters that are common query parameters, fallback to client config for undefined }}
        {{#if (isCommonQueryParameter name)}}
        queryParameters["{{{name}}}"] =
          queryParameters["{{{name}}}"] !== undefined 
            ? parameters["{{{name}}}"] : this.clientConfig.parameters["{{{name}}}"];
        {{/if}}
      {{/each}}

      // @ts-ignore
      return StaticClient.{{method}}({
        client: this,
        rawResponse: rawResponse,
        path: "{{../path}}",
        pathParameters: pathParameters,
        queryParameters: queryParameters,
        headers: (options || {}).headers{{#or (is method "patch") (is method "post") (is method "put")}}, 
        body: (options || {}).body{{/or}}
      });
    }

  {{/each}}
{{/each}}
