
import { ShopperToken, stripBearer, ResponseError } from "@commerce-apps/core"
import  * as sdk from "./"

//type of the input parameter of auth function
type authFuncParamType = Parameters<typeof sdk.{{shopperAuthClient}}.Client.prototype.{{shopperAuthApi}}>[0];

/**
 * @description This wraps the parameters for the authorization call to retrieve a token.
 * That call can be made directly, this is here just for convenience
 * @example
 * const clientConfig: ClientConfig = {
    parameters: {
        clientId: "XXXXXX",
        organizationId: "XXXX",
        shortCode: "XXX",
        siteId: "XX"
    }
   };
   helpers.getShopperToken(clientConfig, { type: "guest" })
 * @param clientConfig Client configuration properties
 * @param body Post body required for authorization
 * @returns {Promise<ShopperToken>}
 */
export async function getShopperToken (
    clientConfig: sdk.ClientConfig,
    body: authFuncParamType["body"]
): Promise<ShopperToken>{
    let client = new sdk.{{shopperAuthClient}}.Client(clientConfig);

    let response = (await client.{{shopperAuthApi}}({
        rawResponse: true,
        body: body
    })) as Response;
    if (!response.ok) {
        throw new ResponseError(response);
    }
    return new ShopperToken(stripBearer(response.headers.get("Authorization")));
}

const shopperAuthApi = sdk.{{shopperAuthClient}}.Client.prototype.{{shopperAuthApi}};

/**
* @deprecated Use the "getShopperToken" function instead
* @description This wraps the parameters for the authCall to retrieve a token.
*  That call can be called directly, this is here just for convenience
* @export
* @template T A template used to extend the parameters of the shopper authentication call
* @param {(T extends (arg: infer A) => any
*           ? { parameters: { clientId?: string; shortCode?: string } } & A
*           : never)} options This provides the type ahead for this parameter properly
* @returns {Promise<ShopperToken>}
*/
export async function getAuthToken<T extends typeof shopperAuthApi>(
    options: T extends (arg: infer A) => any
    ? { parameters: { clientId?: string; shortCode?: string } } & A
    : never
    ): Promise<ShopperToken> {

    let client = new sdk.{{shopperAuthClient}}.Client({
    parameters: {
    shortCode: options.parameters.shortCode
    }
    });

    options.rawResponse = true;

    // At some point this should go through the same stripping as everything else.
    //  Should be part of the global config story
    delete options.parameters.shortCode;

    let response = await client.authorizeCustomer(options) as Response;
    if (!response.ok) {
    throw new Error(`${response.status}: ${response.statusText}`)
    }
    return new ShopperToken(stripBearer(response.headers.get("Authorization")));
}
