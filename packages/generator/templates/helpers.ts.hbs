
import { ShopperToken, stripBearer, ResponseError, getObjectFromResponse } from "@commerce-apps/core"
import  * as sdk from "./"

//type of the input parameter of auth function
type AuthFuncParamType = Parameters<typeof sdk.{{shopperAuthClient}}.prototype.{{shopperAuthApi}}>[0];
// get the type(s) wrapped inside the promise
type Unpacked<T> = T extends Promise<infer U> ? U : T;
// get the return type of shopperAuthApi 
type CustomerReturnType = ReturnType<typeof sdk.{{shopperAuthClient}}.prototype.{{shopperAuthApi}}>;
// get only the dto type by excluding the response type
type CustomerType = Exclude<Unpacked<CustomerReturnType>, Response>

/**
 * @description This wraps the parameters for the authorization call to retrieve a token.
 * That call can be made directly, this is here just for convenience
 * @example
 * const clientConfig: ClientConfig = {
    parameters: {
        clientId: "XXXXXX",
        organizationId: "XXXX",
        shortCode: "XXX",
        siteId: "XX"
    }
   };
   helpers.getShopperToken(clientConfig, { type: "guest" })
 * @param clientConfig Client configuration properties
 * @param body Post body required for authorization
 * @returns {Promise<ShopperToken>}
 */
export async function getShopperToken (
    clientConfig: sdk.ClientConfig,
    body: AuthFuncParamType["body"]
): Promise<ShopperToken<CustomerType>>{
    let client = new sdk.{{shopperAuthClient}}(clientConfig);

    const response: Response = (await client.{{shopperAuthApi}}({body}, true));
    if (!response.ok) {
        throw new ResponseError(response);
    }
    const dto: CustomerType = await getObjectFromResponse(response);

    return new ShopperToken(dto, stripBearer(response.headers.get("Authorization")));
}
