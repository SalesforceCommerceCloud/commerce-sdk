{{#each model.encodes.endPoints}}
  {{#each operations}}
    /**
    * {{{formatForTsDoc description}}}
    * 
    * If you would like to get a raw Response object use the other {{name}} function.
    * 
    * @param options - An object containing the options for this method.
    * @param parameters - An object containing the parameters for this method.
    {{#each ../parameters }}
    * @param {{{name}}} - {{#if (getValue description)}}{{{getValue description}}}{{/if}}
    {{/each}}
    {{#each request/queryParameters}}
    * @param {{{name}}} - {{#if (getValue description)}}{{{getValue description}}}{{/if}}
    {{/each}}
    * @param headers - An object literal of key value pairs of the headers to be
    * sent with this request.
    {{#or (is method "patch") (is method "post") (is method "put")}}
    * @param body - The data to send as the request body.
    {{/or}}
    *
    * @returns A promise of type {{addNamespace (getReturnTypeFromOperation this) @root.name.upperCamelCase}}.
    * {{#if (eq (lowercase @root.metadata.categories.[CC Version Status].[0]) "beta")}}
    * @beta
    * {{/if}}
    */
    {{name}}(
      options{{#or (is method "get") (is method "delete")}}?{{/or}}: {
        parameters?: {
          {{#each ../parameters}}
          {{! common parameters can be configured at the client level and therefore are not required }}
          {{name}}{{#if (isCommonPathParameter name)}}?{{/if}}: {{{ getTypeFromParameter this}}}
          {{/each}}
          {{#each request/queryParameters}}
          {{name}}{{#if (or (not (is required "true")) (isCommonQueryParameter name))}}?{{/if}}: {{{ getTypeFromParameter this}}}
          {{/each}}
        },
        retrySettings?: OperationOptions,
        fetchOptions?: RequestInit,
        headers?: { [key: string]: string }{{#or (is method "patch") (is method "post") (is method "put")}},
        body: {{{addNamespace (getPayloadTypeFromRequest request) @root.name.upperCamelCase}}}{{/or}}
      }
    ): Promise<{{addNamespace (getReturnTypeFromOperation this) @root.name.upperCamelCase}}>;

    /**
    * {{{formatForTsDoc description}}}
    *
    * @param options - An object containing the options for this method.
    * @param parameters - An object containing the parameters for this method.
    {{#each ../parameters }}
    * @param {{{name}}} - {{#if (getValue description)}}{{{getValue description}}}{{/if}}
    {{/each}}
    {{#each request/queryParameters}}
    * @param {{{name}}} - {{#if (getValue description)}}{{{getValue description}}}{{/if}}
    {{/each}}
    * @param headers - An object literal of key value pairs of the headers to be
    * sent with this request.
    {{#or (is method "patch") (is method "post") (is method "put")}}
    * @param body - The data to send as the request body.
    {{/or}}
    * @param rawResponse - Set to true to return entire Response object instead of DTO.
    *
    * @returns A promise of type Response if rawResponse is true, a promise of type {{addNamespace (getReturnTypeFromOperation this) @root.name.upperCamelCase}} otherwise.
    * {{#if (eq (lowercase @root.metadata.categories.[CC Version Status].[0]) "beta")}}
    * @beta
    * {{/if}}
    */
    {{name}}<T extends boolean>(
      options{{#or (is method "get") (is method "delete")}}?{{/or}}: {
        parameters?: {
          {{#each ../parameters}}
          {{! common parameters can be configured at the client level and therefore are not required }}
          {{name}}{{#if (isCommonPathParameter name)}}?{{/if}}: {{{ getTypeFromParameter this}}}
          {{/each}}
          {{#each request/queryParameters}}
          {{name}}{{#if (or (not (is required "true")) (isCommonQueryParameter name))}}?{{/if}}: {{{ getTypeFromParameter this}}}
          {{/each}}
        },
        retrySettings?: OperationOptions,
        fetchOptions?: RequestInit,
        headers?: { [key: string]: string }{{#or (is method "patch") (is method "post") (is method "put")}},
        body: {{{addNamespace (getPayloadTypeFromRequest request) @root.name.upperCamelCase}}}{{/or}}
      },
      rawResponse?: T
    ): Promise<T extends true ? Response : {{addNamespace (getReturnTypeFromOperation this) @root.name.upperCamelCase}}>;

    /**
    * {{{formatForTsDoc description}}}
    *
    * @param options - An object containing the options for this method.
    * @param parameters - An object containing the parameters for this method.
    {{#each ../parameters }}
    * @param {{{name}}} - {{#if (getValue description)}}{{{getValue description}}}{{/if}}
    {{/each}}
    {{#each request/queryParameters}}
    * @param {{{name}}} - {{#if (getValue description)}}{{{getValue description}}}{{/if}}
    {{/each}}
    * @param headers - An object literal of key value pairs of the headers to be
    * sent with this request.
    {{#or (is method "patch") (is method "post") (is method "put")}}
    * @param body - The data to send as the request body.
    {{/or}}
    * @param rawResponse - Set to true to return entire Response object instead of DTO.
    *
    * @returns A promise of type Response if rawResponse is true, a promise of type {{addNamespace (getReturnTypeFromOperation this) @root.name.upperCamelCase}} otherwise.
    * {{#if (eq (lowercase @root.metadata.categories.[CC Version Status].[0]) "beta")}}
    * @beta
    * {{/if}}
    */
    {{name}}(
      options{{#or (is method "get") (is method "delete")}}?{{/or}}: {
        parameters?: {
          {{#each ../parameters}}
          {{! common parameters can be configured at the client level and therefore are not required }}
          {{name}}{{#if (isCommonPathParameter name)}}?{{/if}}: {{{ getTypeFromParameter this}}}
          {{/each}}
          {{#each request/queryParameters}}
          {{name}}{{#if (or (not (is required "true")) (isCommonQueryParameter name))}}?{{/if}}: {{{ getTypeFromParameter this}}}
          {{/each}}
        },
        retrySettings?: OperationOptions,
        fetchOptions?: RequestInit,
        headers?: { [key: string]: string }{{#or (is method "patch") (is method "post") (is method "put")}},
        body: {{{addNamespace (getPayloadTypeFromRequest request) @root.name.upperCamelCase}}}{{/or}}
      },
      rawResponse?: boolean,
    ): Promise<Response | {{addNamespace (getReturnTypeFromOperation this) @root.name.upperCamelCase}}> {
    
      const parameters = (options && options.parameters) ? options.parameters : {};
      
      const pathParameters = {
      {{#each ../parameters}}
        "{{{name}}}": parameters["{{{name}}}"]
        {{! if it is a common path parameter, fallback to client config for undefined }}
        {{#if (isCommonPathParameter name)}} !== undefined ? parameters["{{{name}}}"] : this.clientConfig.parameters["{{{name}}}"]{{/if}}
        {{#unless @last}},{{/unless}}
      {{/each}}
      };

      const queryParameters = _.omit(parameters, _.keys(pathParameters));

      {{#each request.queryParameters}}
        {{! for queryParameters that are common query parameters, fallback to client config for undefined }}
        {{#if (isCommonQueryParameter name)}}
        queryParameters["{{{name}}}"] =
          queryParameters["{{{name}}}"] !== undefined 
            ? parameters["{{{name}}}"] : this.clientConfig.parameters["{{{name}}}"];
        {{/if}}
      {{/each}}

      const headers = mergeHeaders(getHeaders(options), {
        {{#if (isRequestWithPayload request)}}
        "Content-Type": "{{{getMediaTypeFromRequest request}}}",
        {{/if}}
        [USER_AGENT_HEADER]: USER_AGENT_VALUE
      });

      // @ts-ignore
      return StaticClient.{{method}}({
        client: this,
        rawResponse: rawResponse,
        path: "{{../path}}",
        pathParameters: pathParameters,
        queryParameters: queryParameters,
        retrySettings: (options || {}).retrySettings,
        headers: headers{{#or (is method "patch") (is method "post") (is method "put")}}, 
        body: (options || {}).body{{/or}},
        ...(options.fetchOptions && { fetchOptions: options.fetchOptions })
      });
    }

  {{/each}}
{{/each}}
