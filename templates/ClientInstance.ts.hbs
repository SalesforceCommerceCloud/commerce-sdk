
import {
  BaseClient,
  ClientConfig,
  Response,
  ResponseError,
  StaticClient,
  getHeaders,
  mergeHeaders
} from "@commerce-apps/core";
import _ from "lodash";
import type { OperationOptions } from "retry";
import type { RequestInit } from "node-fetch";

// eslint-disable-next-line @typescript-eslint/no-namespace
export namespace {{name.upperCamelCase}} {
  {{#each dataTypes}}
  {{!-- TODO: Remove this special case handling once namespaced types are added --}}
      {{#if (eq (getValue name) "ResourceBadRequest")}}
          // This is a known deviation from the RAML definition, required due to limitations in
          // the SDK generation. The full definition will be included in the next major release.
          export type ResourceBadRequest = { [key: string]: any };
      {{else if (or (isTypeDefinition this) (isArrayType this))}}
  export type {{getValue name}} = {{> dtoPartial typeDto=this}}
      {{/if}}
      {{!-- Traits are internal types and do not need to be exported --}}
      {{#if (isTraitDefinition this)}}
        {{#if (isAllowedTrait this) }}
  type {{getValue name}} = {{> dtoPartial typeDto=this}}
        {{else}}
        {{log "Cannot convert invalid trait to type:" (getValue name) lavel="warn"}}
        {{/if}}
      {{/if}}
  {{/each}}
}

const USER_AGENT_HEADER = "user-agent";
const USER_AGENT_VALUE = "commerce-sdk@{{parent.parent.metadata.sdkVersion}};"

/**
* [{{{metadata.name}}}](https://developer.salesforce.com/docs/commerce/commerce-api/references?meta={{{metadata.assetId}}}:Summary)
* ==================================
*
* *{{metadata.description}}*<br />
*
* {{#if (isShopperAPI name) }}
* Example with shopper auth
* {{else}}
* For instructions on how to retrieve access token for admin APIs: <a>https://developer.salesforce.com/docs/commerce/commerce-api/guide/authorization-for-admin-apis.html</a><br/><br/>
* Example with admin auth
* {{/if}}
* ```typescript
* import { {{pascalcase metadata.categories.[CC API Family].[0]}}, ClientConfig{{#if (isShopperAPI name) }}, Customer, slasHelpers{{/if}} } from "commerce-sdk";
* // or
* const { {{pascalcase metadata.categories.[CC API Family].[0]}}, ClientConfig{{#if (isShopperAPI name) }}, Customer, slasHelpers{{/if}} } = require("commerce-sdk");
* 
* const clientConfig: ClientConfig = {
*   parameters: {
*     clientId: "XXXXXX",
*     organizationId: "XXXX",
*     shortCode: "XXX",
*     siteId: "XX"
*   }
* };
* {{#if (isShopperAPI name) }}
* // must be registered in SLAS. On server, redirectURI is never called
* const redirectURI = "http://localhost:3000/callback";
* const slasClient = new Customer.ShopperLogin(clientConfig);
* token = await slasHelpers.loginGuestUser(slasClient, { redirectURI });
* {{else}}
* token = { access_token: 'INSERT_ACCESS_TOKEN_HERE' };
* {{/if}}
* clientConfig.headers['authorization'] = `Bearer ${token.access_token}`;
* const {{name.lowerCamelCase}}Client = new {{pascalcase metadata.categories.[CC API Family].[0]}}.{{name.upperCamelCase}}(clientConfig);
* ```
*
* <span style="font-size:.7em; display:block; text-align: right">
* API Version: {{metadata.version}}<br />
* Last Updated: {{metadata.updatedDate}}<br />  
* </span>
{{#if (eq (lowercase metadata.categories.[CC Version Status].[0]) "beta")}}
* @beta 
* {{/if}}
* 

*/
export class {{name.upperCamelCase}} extends BaseClient {
  constructor(config: ClientConfig) {
    super(config);

    if (!!!config.baseUri) {
      this.clientConfig.baseUri = "{{getBaseUriFromDocument model}}";
    }

  }

  {{> operationsPartial}}

}
