import { ShopperToken, stripBearer, ResponseError, getObjectFromResponse } from "@commerce-apps/core"
import  * as sdk from "../"

// Type of the first input parameter for the auth function
type AuthFuncParamType = Parameters<sdk.{{metadata.shopperAuthClient}}["{{metadata.shopperAuthApi}}"]>[0];
// Type returned by the auth function
type CustomerType = sdk.{{metadata.shopperAuthClient}}.{{metadata.shopperAuthDataType}};

/**
 * This wraps the parameters for the authorization call to retrieve a token.
 * That call can be made directly, this is here just for convenience
 * ```ts
 * const clientConfig: ClientConfig = {
 *  parameters: {
 *      clientId: "XXXXXX",
 *      organizationId: "XXXX",
 *      shortCode: "XXX",
 *      siteId: "XX"
 *  }
 * };
 * helpers.getShopperToken(clientConfig, { type: "guest" })
 * ```
 * @param clientConfig - Client configuration properties
 * @param body - Post body required for authorization
 * @returns the retrieved Shopper token
 */
export async function getShopperToken (
    clientConfig: sdk.ClientConfig,
    body: AuthFuncParamType["body"]
): Promise<ShopperToken<CustomerType>>{
    let client = new sdk.{{metadata.shopperAuthClient}}(clientConfig);

    const response = await client.{{metadata.shopperAuthApi}}({body}, true);
    if (!response.ok) {
        throw new ResponseError(response);
    }
    const dto: CustomerType = await getObjectFromResponse(response);

    return new ShopperToken(dto, stripBearer(response.headers.get("Authorization")));
}
