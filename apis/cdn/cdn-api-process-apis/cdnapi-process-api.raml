#%RAML 1.0
title: CDN Zones

version: v1
# description: Provides access to Commerce Cloud Digital CDN-related functionality.
description: !include cdn-zones-description.md

documentation:
  - title: Use Cases
    content: !include use-cases.md
  - title: Glossary
    content: !include glossary.md

protocols: HTTPS
baseUri: https://{shortCode}.api.commercecloud.salesforce.com/cdn/zones/{version}
baseUriParameters:
  shortCode:
    description: Region-specific merchant identifier.
    example: 0dnz6oep

mediaType: application/json

uses:
  ApiStandards: /exchange_modules/893f605e-10e2-423a-bdb4-f952f56eb6d8/api-standards/1.1.12/api-standards.raml
  CommerceCloudStandards: /exchange_modules/893f605e-10e2-423a-bdb4-f952f56eb6d8/commerce-cloud-standards/2.0.1/commerce-cloud-standards.raml

types:
  
  Zone: !include dataTypes/Zone.raml
  WafGroup: !include dataTypes/WAFGroup.raml
  WafRule: !include dataTypes/WAFRule.raml
  FirewallRule: !include dataTypes/FirewallRule.raml
  ErrorResponse: ApiStandards.ErrorResponse
  CollectionResponseEnvelope: !include dataTypes/CollectionResponseEnvelope.raml
  ItemResponseEnvelope: !include dataTypes/ItemResponseEnvelope.raml
  SpeedSetting: !include dataTypes/SpeedSetting.raml
  Certificate: !include dataTypes/Certificate.raml
  CertificateRequest: !include dataTypes/CertificateRequest.raml
  OCAPICachingToggleRequest: !include dataTypes/OCAPICachingToggleRequest.raml
  CachePurgeRequest: !include dataTypes/CachePurgeRequest.raml
  CachePurgeResponse: !include dataTypes/CachePurgeResponse.raml
  StorefrontZoneCreateRequest: !include dataTypes/StorefrontZoneCreateRequest.raml
  StorefrontZoneCreateResponse: !include dataTypes/StorefrontZoneCreateResponse.raml
  CustomHostnameValidationResponse: !include dataTypes/CustomHostnameValidationResponse.raml
  Hsts: !include dataTypes/Hsts.raml
  SecuritySetting: !include dataTypes/SecuritySetting.raml
  MRTRulesPostRequest: !include dataTypes/MRTRulesPostRequest.raml
  MRTRulePatchRequest: !include dataTypes/MRTRulePatchRequest.raml
  MRTRulesetPatchRequest: !include dataTypes/MRTRulesetPatchRequest.raml
  MRTRulesResponse: !include dataTypes/MRTRulesResponse.raml
  MRTRuleset: !include dataTypes/MRTRuleset.raml
  MRTRules: !include dataTypes/MRTRules.raml
  LogpushOwnershipPostRequest: !include dataTypes/LogpushOwnershipPostRequest.raml
  LogpushOwnershipPostResponse: !include dataTypes/LogpushOwnershipPostResponse.raml
  LogpushCreateRequest: !include dataTypes/LogpushCreateRequest.raml
  LogpushResponse: !include dataTypes/LogpushResponse.raml
  LogpushUpdateRequest: !include dataTypes/LogpushUpdateRequest.raml
  CustomRulesPostRequest: !include dataTypes/CustomRulesPostRequest.raml
  CustomRulesPatchRequest: !include dataTypes/CustomRulesPatchRequest.raml
  CustomRulesPatchOrderRequest: !include dataTypes/CustomRulesPatchOrderRequest.raml
  CustomRule: !include dataTypes/CustomRule.raml
  RulePosition: !include dataTypes/RulePosition.raml
  RateLimitingRule: !include dataTypes/RateLimitingRule.raml
  RateLimitingRulesPostRequest: !include dataTypes/RateLimitingRulesPostRequest.raml
  RateLimitingRulesPatchRequest: !include dataTypes/RateLimitingRulesPatchRequest.raml
  WAFManagedRuleset: !include dataTypes/WAFManagedRuleset.raml
  WAFManagedRulesetRequest: !include dataTypes/WAFManagedRulesetRequest.raml
  WAFManagedRule: !include dataTypes/WAFManagedRule.raml
  WAFManagedRuleRequest: !include dataTypes/WAFManagedRuleRequest.raml
  WafPackagePatchRequest: !include dataTypes/WafPackagePatchRequest.raml
  WAFRulePackage: !include dataTypes/WAFRulePackage.raml
  OriginHeaderModification: !include dataTypes/OriginHeaderModification.raml
  OriginHeaderModificationPutRequest: !include dataTypes/OriginHeaderModificationPutRequest.raml

  ZonesEnvelope:
    type: CollectionResponseEnvelope
    properties:
      data:
        type: Zone[]
  ZoneEnvelope:
    type: ItemResponseEnvelope
    properties:
      data:
        type: Zone
  WafGroupsEnvelope:
    type: CollectionResponseEnvelope
    properties:
      data:
        type: WafGroup[]
  WafGroupEnvelope:
    type: ItemResponseEnvelope
    properties:
      data:
        type: WafGroup
  WafRuleEnvelope:
    type: ItemResponseEnvelope
    properties:
      data:
        type: WafRule
  WafRulesEnvelope:
    type: CollectionResponseEnvelope
    properties:
      data:
        type: WafRule[]
  SpeedSettingsEnvelope:
    type: ItemResponseEnvelope
    properties:
      data:
        type: SpeedSetting
  SecuritySettingsEnvelope:
    type: ItemResponseEnvelope
    properties:
      data:
        type: SecuritySetting
  WAFRulePackageEnvelope:
    type: ItemResponseEnvelope
    properties:
      data:
        type: WAFRulePackage
  CertificateEnvelope:
    type: ItemResponseEnvelope
    properties:
      data:
        type: Certificate
  CertificatesEnvelope:
    type: CollectionResponseEnvelope
    properties:
      data:
        type: Certificate[]
  CachePurgeResponseEnvelope:
    type: ItemResponseEnvelope
    properties:
      data:
        type: CachePurgeResponse
  StorefrontZoneCreateEnvelope:
    type: ItemResponseEnvelope
    properties:
      data:
        type: StorefrontZoneCreateResponse
  CustomHostnameValidationEnvelope:
      type: ItemResponseEnvelope
      properties:
        data:
          type: CustomHostnameValidationResponse
  MRTRulesResponseEnvelope:
    type: ItemResponseEnvelope
    properties:
      data:
        type: MRTRulesResponse
  LogpushEnvelope:
    type: ItemResponseEnvelope
    properties:
      data:
        type: LogpushResponse
  LogpushJobsEnvelope:
    type: CollectionResponseEnvelope
    properties:
      data:
        type: LogpushResponse[]
  CustomRuleEnvelope:
    type: ItemResponseEnvelope
    properties:
      data:
        type: CustomRule
  CustomRulesEnvelope:
    type: CollectionResponseEnvelope
    properties:
      data:
        type: CustomRule[]
  RateLimitingRuleEnvelope:
    type: ItemResponseEnvelope
    properties:
      data:
        type: RateLimitingRule
  RateLimitingRulesEnvelope:
    type: CollectionResponseEnvelope
    properties:
      data:
        type: RateLimitingRule[]
  WAFManagedRulesetsEnvelope:
    type: CollectionResponseEnvelope
    properties:
      data:
        type: WAFManagedRuleset[]
  WAFManagedRulesetEnvelope:
    type: ItemResponseEnvelope
    properties:
      data:
        type: WAFManagedRuleset
  WAFManagedRulesEnvelope:
    type: CollectionResponseEnvelope
    properties:
      data:
        type: WAFManagedRule[]
  WAFManagedRuleEnvelope:
    type: ItemResponseEnvelope
    properties:
      data:
        type: WAFManagedRule
  OriginHeaderModificationEnvelope:
    type: ItemResponseEnvelope
    properties:
      data:
        type: OriginHeaderModification

traits:
  hasUnauthorizedResponse: !include traits/HasUnauthorizedResponse.raml
  hasForbiddenAccessResponse: !include traits/HasForbiddenAccessResponse.raml
  hasInternalServerErrorResponse: !include traits/HasInternalServerErrorResponse.raml
  hasResourceNotFoundResponse: !include traits/HasResourceNotFoundResponse.raml
  hasBadRequestResponse: !include traits/HasBadRequestResponse.raml
  hasConflictResponse: !include traits/HasConflictResponse.raml

/organizations/{organizationId}:
  type: CommerceCloudStandards.Organization

  /storefront-zones:
    post:
      is: [hasBadRequestResponse, hasUnauthorizedResponse, hasForbiddenAccessResponse, hasInternalServerErrorResponse, hasResourceNotFoundResponse]
      displayName: createStorefrontZone
      description: Create a new storefront zone.
      body:
        application/json:
          type: StorefrontZoneCreateRequest
          example: !include /examples/zone/storefront-zone-create-request.raml
      responses:
        '201':
          description: Successfully created new storefront zone.
          body:
            application/json:
              type: StorefrontZoneCreateEnvelope
              example: !include /examples/zone/storefront-zone-create-response.raml
      securedBy:
        - CommerceCloudStandards.AmOAuth2: { scopes: [ sfcc.cdn-zones.rw ] }
  /zones/info:
    is: [hasUnauthorizedResponse, hasForbiddenAccessResponse, hasInternalServerErrorResponse]
    get:
      is: [ApiStandards.OffsetPaginated: {maxLimit: 50, defaultSize: 25}, hasResourceNotFoundResponse]
      displayName: getZonesInfo
      description: Retrieves zone information.
      responses:
        '200':
          description: Successfully retrieved zone information requested by the caller.
          body:
            application/json:
              type: ZonesEnvelope
              example: !include /examples/zone/zones-get-response.raml
      securedBy:
        - CommerceCloudStandards.AmOAuth2: { scopes: [ sfcc.cdn-zones, sfcc.cdn-zones.rw ] }
  /zones/{zoneId}/waf/groups:
    is: [hasUnauthorizedResponse, hasForbiddenAccessResponse, hasInternalServerErrorResponse]
    get:
      is: [hasResourceNotFoundResponse]
      displayName: getWafGroups
      description: Retrieves all WAF groups accessible to the caller. Not applicable for zones using WAFv2. For any zones created after the 24.5 release, use the endpoints for WAF managed rulesets instead.
      responses:
        '200':
          description: Successfully retrieved details of WAF groups that caller has access to.
          body:
            application/json:
              type: WafGroupsEnvelope
              example: !include /examples/waf/wafgroups-get-response.raml
      securedBy:
        - CommerceCloudStandards.AmOAuth2: { scopes: [ sfcc.cdn-zones, sfcc.cdn-zones.rw ] }

    /{groupId}:
      put:
        is: [hasUnauthorizedResponse, hasForbiddenAccessResponse, hasInternalServerErrorResponse, hasBadRequestResponse]
        displayName: updateWafGroup
        description: Updates action or mode of a specific WAF group. Not applicable for zones using WAFv2. For any zones created after the 24.5 release, use the endpoints for WAF managed rulesets instead.
        body:
          application/json:
            type: WafGroup
            example: !include /examples/waf/wafgroup-put-request.raml
        responses:
          '200':
            description: Successfully updated the WAF group specified by the caller.
            body:
              application/json:
                type: WafGroupEnvelope
                example: !include /examples/waf/wafgroup-put-response.raml
        securedBy:
          - CommerceCloudStandards.AmOAuth2: { scopes: [ sfcc.cdn-zones.rw ] }

  /zones/{zoneId}/waf/rules:
    is: [hasUnauthorizedResponse, hasForbiddenAccessResponse, hasInternalServerErrorResponse]
    get:
      is: [hasResourceNotFoundResponse]
      displayName: getWafRules
      description: Retrieves WAF rules under the waf group specified by the caller. Not applicable for zones using WAFv2. For any zones created after the 24.5 release, use the endpoints for WAF managed rulesets instead.
      queryParameters:
        groupId:
          displayName: GroupId
          type: string
          description: WAF Group that contains the WAF rules.
          example: f90712123fb02287348dd34c0a282bb9
          required: false
      responses:
        '200':
          description: Successfully retrieved WAF rules requested by the caller.
          body:
            application/json:
              type: WafRulesEnvelope
              example: !include /examples/waf/wafrules-get-response.raml
      securedBy:
        - CommerceCloudStandards.AmOAuth2: { scopes: [ sfcc.cdn-zones, sfcc.cdn-zones.rw ] }
    /{ruleId}:
      is: [hasUnauthorizedResponse, hasForbiddenAccessResponse, hasInternalServerErrorResponse]
      get:
        is: [hasResourceNotFoundResponse]
        displayName: getWafRule
        description: Retrieves details of a specific WAF rule. Not applicable for zones using WAFv2. For any zones created after the 24.5 release, use the endpoints for WAF managed rulesets instead.
        responses:
          '200':
            description: Successfully retrieved details of the WAF rule requested by the caller.
            body:
              application/json:
                type: WafRuleEnvelope
                example: !include /examples/waf/wafrule-get-response.raml
        securedBy:
          - CommerceCloudStandards.AmOAuth2: { scopes: [ sfcc.cdn-zones, sfcc.cdn-zones.rw ] }
      put:
        is: [hasBadRequestResponse]
        displayName: updateWafRule
        description: Updates action of a specific WAF rule. Not applicable for zones using WAFv2. For any zones created after the 24.5 release, use the endpoints for WAF managed rulesets instead.
        body:
          application/json:
            type: WafRule
            example: !include /examples/waf/wafrule-put-request.raml
        responses:
          '200':
            description: Successfully updated the WAF rule specified by the caller.
            body:
              application/json:
                type: WafRuleEnvelope
                example: !include /examples/waf/wafrule-put-response.raml
        securedBy:
          - CommerceCloudStandards.AmOAuth2: { scopes: [ sfcc.cdn-zones.rw ] }

  /zones/{zoneId}/speed-settings:
    is: [hasResourceNotFoundResponse, hasUnauthorizedResponse, hasForbiddenAccessResponse, hasInternalServerErrorResponse]
    get:
      displayName: getSpeedSettings
      description: Retrieve speed settings for a zone.
      responses:
        '200':
          description: Successfully returned back speed settings requested by the caller.
          body:
            application/json:
              type: SpeedSettingsEnvelope
              example: !include /examples/zone/speed-settings-response.raml
      securedBy:
        - CommerceCloudStandards.AmOAuth2: { scopes: [ sfcc.cdn-zones, sfcc.cdn-zones.rw ] }
    patch:
      is: [hasBadRequestResponse]
      displayName: updateSpeedSettings
      description: Update speed settings for a zone.

      body:
        application/json:
          type: SpeedSetting
          examples: !include /examples/zone/speed-settings-patch-request.raml

      responses:
        '200':
          description: Successfully updated speed settings requested by the caller.
          body:
            application/json:
              type: SpeedSettingsEnvelope
              examples:
                response : !include /examples/zone/speed-settings-response.raml
      securedBy:
        - CommerceCloudStandards.AmOAuth2: { scopes: [ sfcc.cdn-zones.rw ] }
  /zones/{zoneId}/security-settings:
    is: [hasBadRequestResponse, hasInternalServerErrorResponse, hasForbiddenAccessResponse, hasUnauthorizedResponse]
    get:
      displayName: getSecuritySettings
      description: Retrieve security settings for a zone.
      responses:
        '200':
          description: Successfully returned security settings for zone.
          body:
            application/json:
              type: SecuritySettingsEnvelope
              example: !include /examples/zone/security-settings-response.raml
      securedBy:
        - CommerceCloudStandards.AmOAuth2: { scopes: [ sfcc.cdn-zones, sfcc.cdn-zones.rw ] }
    patch:
      displayName: updateSecuritySettings
      description: Update security settings for a zone.
      body:
        application/json:
          type: SecuritySetting
          example: !include /examples/zone/security-settings-update-request.raml
      responses:
        '200':
          description: Successfully updated security settings.
          body:
            application/json:
              type: SecuritySettingsEnvelope
              example: !include /examples/zone/security-settings-response.raml
      securedBy:
        - CommerceCloudStandards.AmOAuth2: { scopes: [ sfcc.cdn-zones.rw ] }
  /zones/{zoneId}/cachepurge:
    post:
      is: [hasUnauthorizedResponse, hasForbiddenAccessResponse, hasInternalServerErrorResponse, hasResourceNotFoundResponse]
      displayName: cachePurge
      description: Request to purge the cache for the host given in the request body
      body:
        application/json:
          type: CachePurgeRequest
      responses:
        '200':
          description: Returns completed operationId statuses that represent the rule list operations the server processed.
          body:
            application/json:
              type: CachePurgeResponseEnvelope
      securedBy:
        - CommerceCloudStandards.AmOAuth2: { scopes: [ sfcc.cdn-zones.rw ] }
  /zones/{zoneId}/ocapicachingpagerule:
    is: [hasUnauthorizedResponse, hasForbiddenAccessResponse, hasInternalServerErrorResponse, hasResourceNotFoundResponse]
    patch:
      is: [ hasBadRequestResponse ]
      displayName: toggleOcapiCachingPageRule
      description: Request to enable or disable OCAPI Caching page rule.
      body:
        application/json:
          type: OCAPICachingToggleRequest
      responses:
        '200':
          description: Returns the current state of OCAPI Caching page rule.
          body:
            application/json:
              type: OCAPICachingToggleRequest
      securedBy:
        - CommerceCloudStandards.AmOAuth2: { scopes: [ sfcc.cdn-zones.rw ] }
  /zones/{zoneId}/certificates:
    is: [hasUnauthorizedResponse, hasForbiddenAccessResponse, hasInternalServerErrorResponse]
    get:
      is: [ApiStandards.OffsetPaginated: {maxLimit: 50, defaultSize: 25}, hasResourceNotFoundResponse]
      displayName: getCertificates
      description: Retrieves a list of certificates information for a zone.
      responses:
        '200':
          description: Successfully retrieved list of certificates for the specified zone.
          body:
            application/json:
              type: CertificatesEnvelope
              examples:
                  Proxy Zone Certificates Response: !include /examples/zone/certificates-get-response1.raml
                  Legacy Zone Certificates Response: !include /examples/zone/certificates-get-response2.raml
      securedBy:
        - CommerceCloudStandards.AmOAuth2: { scopes: [ sfcc.cdn-zones, sfcc.cdn-zones.rw ] }
    post:
      is: [hasBadRequestResponse, hasConflictResponse, hasUnauthorizedResponse, hasForbiddenAccessResponse, hasInternalServerErrorResponse, hasResourceNotFoundResponse]
      displayName: addCertificateForZone
      description: Add Certificates For Zone
      body:
        type: CertificateRequest
        examples: !include /examples/zone/certificate-post-request.raml
      responses:
        '201':
          description: Returns back information about added certificate.
          body:
            application/json:
              type: CertificateEnvelope
              examples:
                  Self-Managed Certificate Response: !include /examples/zone/certificate-post-response1.raml
                  eCDN-Managed Certificate Response: !include /examples/zone/certificate-post-response2.raml
      securedBy:
        - CommerceCloudStandards.AmOAuth2: { scopes: [ sfcc.cdn-zones.rw ] }
    /{certificateId}:
      is: [ hasUnauthorizedResponse, hasForbiddenAccessResponse, hasInternalServerErrorResponse ]
      delete:
        is: [ hasResourceNotFoundResponse ]
        displayName: deleteCertificate
        description: This action deletes a custom hostname and the certificate associated with it. Note that a valid certificate is necessary for a site to remain operational. DELETING AN IN-USE CERTIFICATE MAY RESULT IN DOWNTIME.
        responses:
          204:
            description: Successfully deleted the custom hostname and certificate associated with it.
        securedBy:
          - CommerceCloudStandards.AmOAuth2: { scopes: [ sfcc.cdn-zones.rw ] }
      patch:
        is: [hasBadRequestResponse]
        displayName: updateCertificate
        description: Updates the certificate for a given certificateId for a particular zone.
        body:
          application/json:
            type: CertificateRequest
            examples: !include /examples/zone/certificate-update-request.raml
        responses:
          '200':
            description: Successfully updated speed settings requested by the caller.
            body:
              application/json:
                type: CertificateEnvelope
                examples:
                  Self-Managed Certificate Response: !include /examples/zone/certificate-update-response1.raml
                  eCDN-Managed Certificate Response: !include /examples/zone/certificate-update-response2.raml
        securedBy:
          - CommerceCloudStandards.AmOAuth2: { scopes: [ sfcc.cdn-zones.rw ] }
    /custom-hostnames/{customHostnameId}:
      patch:
        is: [ hasBadRequestResponse, hasUnauthorizedResponse, hasForbiddenAccessResponse, hasInternalServerErrorResponse ]
        displayName: validateCustomHostname
        description: Trigger the validation of a custom hostname.
        responses:
          '200':
            description: Trigger the custom hostname validation process.
            body:
              application/json:
                type: CustomHostnameValidationEnvelope
                examples:
                  response : !include /examples/zone/custom-hostnames-patch-response.raml
        securedBy:
          - CommerceCloudStandards.AmOAuth2: { scopes: [ sfcc.cdn-zones.rw ] }
  /zones/{zoneId}/mrtrules:
    is: [hasResourceNotFoundResponse, hasInternalServerErrorResponse, hasForbiddenAccessResponse, hasUnauthorizedResponse]
    post:
      is: [hasBadRequestResponse]
      displayName: createMrtRules
      description: Create MRT rules to route to a new MRT environment.
      body:
        application/json:
          type: MRTRulesPostRequest
          examples:
            Single Hostname Request: !include /examples/mrtrules/mrt-rules-post-request-single-hostname.raml
            Multiple Hostnames Request: !include /examples/mrtrules/mrt-rules-post-request-multiple-hostnames.raml
      responses:
        201:
          description: Create MRT rules to route to a new MRT environment.
          body:
            application/json:
              type: MRTRulesResponseEnvelope
              examples:
                Single Hostname Response: !include /examples/mrtrules/mrt-rules-post-response-single-hostname.raml
                Multiple Hostnames Response: !include /examples/mrtrules/mrt-rules-post-response-multiple-hostnames.raml
      securedBy:
        - CommerceCloudStandards.AmOAuth2: { scopes: [ sfcc.cdn-zones.rw ] }
    patch:
      is: [hasBadRequestResponse]
      displayName: updateMrtRuleset
      description: Update the MRT environment hostname or add MRT rules to route to an existing MRT environment.
      body:
        application/json:
          type: MRTRulesetPatchRequest
          examples:
            Update MRT Hostname Request: !include /examples/mrtrules/mrt-ruleset-patch-request-update-hostname.raml
            Add Rules for Existing MRT Hostname Request: !include /examples/mrtrules/mrt-ruleset-patch-request-add-rules.raml
      responses:
        200:
          description: Update the MRT environment hostname or add MRT rules to route to an existing MRT environment.
          body:
            application/json:
              type: MRTRulesResponseEnvelope
              examples:
                Update MRT Hostname Response: !include /examples/mrtrules/mrt-ruleset-patch-response-update-hostname.raml
                Add Rules for Existing MRT Hostname Response: !include /examples/mrtrules/mrt-ruleset-patch-response-add-rules.raml
      securedBy:
        - CommerceCloudStandards.AmOAuth2: { scopes: [ sfcc.cdn-zones.rw ] }
    get:
      is: [hasBadRequestResponse]
      displayName: getMrtRules
      description: Get all MRT rules.
      responses:
        200:
          description: Get all MRT rules.
          body:
            application/json:
              type: MRTRulesResponseEnvelope
              example: !include /examples/mrtrules/mrt-rules-get-response.raml
      securedBy:
        - CommerceCloudStandards.AmOAuth2: { scopes: [ sfcc.cdn-zones, sfcc.cdn-zones.rw ] }
    /{rulesetId}:
      delete:
        displayName: deleteMrtRuleset
        description: Delete the MRT ruleset and all rules within the ruleset.
        responses:
          204:
            description: Delete the MRT ruleset and all rules within the ruleset.
        securedBy:
          - CommerceCloudStandards.AmOAuth2: { scopes: [ sfcc.cdn-zones.rw ] }
      /rules/{ruleId}:
        is: [hasResourceNotFoundResponse, hasInternalServerErrorResponse, hasForbiddenAccessResponse, hasUnauthorizedResponse]
        delete:
          displayName: deleteMrtRule
          description: Delete an MRT rule.
          responses:
            204:
              description: Delete an MRT rule.
          securedBy:
            - CommerceCloudStandards.AmOAuth2: { scopes: [ sfcc.cdn-zones.rw ] }
        patch:
          is: [hasBadRequestResponse]
          displayName: updateMrtRule
          description: Update an MRT rule.
          body:
            application/json:
              type: MRTRulePatchRequest
              example: !include /examples/mrtrules/mrt-rule-patch-request.raml
          responses:
            200:
              description: Update an MRT rule.
              body:
                application/json:
                  type: MRTRulesResponseEnvelope
                  example: !include /examples/mrtrules/mrt-rule-patch-response.raml
          securedBy:
            - CommerceCloudStandards.AmOAuth2: { scopes: [ sfcc.cdn-zones.rw ] }
  /zones/{zoneId}/logpush/ownership:
    is: [ hasResourceNotFoundResponse, hasInternalServerErrorResponse, hasForbiddenAccessResponse, hasUnauthorizedResponse ]
    post:
      is: [ hasBadRequestResponse ]
      displayName: createLogpushOwnership
      description: Create Logpush ownership token file.
      body:
        application/json:
          type: LogpushOwnershipPostRequest
          example: !include /examples/logpush/logpush-ownership-post-request.raml
      responses:
        '201':
          description: Creates new Logpush Ownership token.
          body:
            application/json:
              type: LogpushOwnershipPostResponse
              example: !include /examples/logpush/logpush-ownership-post-response.raml
      securedBy:
        - CommerceCloudStandards.AmOAuth2: { scopes: [ sfcc.cdn-zones.rw ] }
  /zones/{zoneId}/logpush/jobs:
    is: [ hasResourceNotFoundResponse, hasInternalServerErrorResponse, hasForbiddenAccessResponse, hasUnauthorizedResponse ]
    post:
      is: [ hasBadRequestResponse ]
      displayName: createLogpushJob
      description: Create Logpush job.
      body:
        application/json:
          type: LogpushCreateRequest
          examples:
            request1 : !include /examples/logpush/logpush-create-request1.raml
            request2 : !include /examples/logpush/logpush-create-request2.raml
      responses:
        '201':
          description: Returns job detail after successful Logpush job creation.
          body:
            application/json:
              type: LogpushEnvelope
              examples:
                response1 : !include /examples/logpush/logpush-create-response1.raml
                response2 : !include /examples/logpush/logpush-create-response2.raml
      securedBy:
        - CommerceCloudStandards.AmOAuth2: { scopes: [ sfcc.cdn-zones.rw ] }
    get:
      is: [ hasBadRequestResponse ]
      displayName: listLogpushJob
      description: List Logpush job.
      responses:
        '200':
          description: Returns all jobs with detail in zone.
          body:
            application/json:
              type: LogpushJobsEnvelope
              example: !include /examples/logpush/logpush-get-list-job.raml
      securedBy:
        - CommerceCloudStandards.AmOAuth2: { scopes: [ sfcc.cdn-zones, sfcc.cdn-zones.rw ] }
    /{jobId}:
      is: [ hasResourceNotFoundResponse, hasInternalServerErrorResponse, hasForbiddenAccessResponse, hasUnauthorizedResponse ]
      get:
        is: [ hasBadRequestResponse ]
        displayName: getLogpushJob
        description: Get Logpush job details.
        responses:
          '200':
            description: Returns job detail from given Logpush job ID.
            body:
              application/json:
                type: LogpushEnvelope
                examples:
                  response1: !include /examples/logpush/logpush-get-job-by-id1.raml
                  response2: !include /examples/logpush/logpush-get-job-by-id2.raml
                  response3: !include /examples/logpush/logpush-get-job-by-id3.raml
        securedBy:
          - CommerceCloudStandards.AmOAuth2: { scopes: [ sfcc.cdn-zones, sfcc.cdn-zones.rw ] }
      put:
        is: [ hasResourceNotFoundResponse, hasInternalServerErrorResponse, hasForbiddenAccessResponse, hasUnauthorizedResponse ]
        displayName: updateLogpushJob
        description: Update Logpush job.
        body:
          application/json:
            type: LogpushUpdateRequest
            example: !include /examples/logpush/logpush-update-request.raml
        responses:
          '200':
            description: Returns job detail after successful logpush is enabled or disabled.
            body:
              application/json:
                type: LogpushEnvelope
                example: !include /examples/logpush/logpush-update-response.raml
        securedBy:
          - CommerceCloudStandards.AmOAuth2: { scopes: [ sfcc.cdn-zones.rw ] }
      delete:
        displayName: deleteLogpushJob
        description: Delete Logpush job by job ID.
        responses:
          204:
            description: Delete Logpush job by job ID.
        securedBy:
          - CommerceCloudStandards.AmOAuth2: { scopes: [ sfcc.cdn-zones.rw ] }
  /zones/{zoneId}/firewall/waf/packages/owasp:
    is: [hasUnauthorizedResponse, hasForbiddenAccessResponse, hasInternalServerErrorResponse, hasResourceNotFoundResponse]
    get:
      is: [hasBadRequestResponse]
      displayName: getOwaspWafPackage
      description: Get a OWASP ModSecurity Core Rule Set.
      responses:
        '200':
          description: Successfully retrieved a OWASP ModSecurity Core Rule Set
          body:
            application/json:
              type: WAFRulePackageEnvelope
              examples:
                response : !include /examples/wafpackages/wafpackages_get_example.raml
      securedBy:
        - CommerceCloudStandards.AmOAuth2: { scopes: [ sfcc.cdn-zones, sfcc.cdn-zones.rw ] }
    patch:
      is: [ hasBadRequestResponse ]
      displayName: patchOwaspWafPackage
      description: Patch a OWASP ModSecurity Core Rule Set.
      body:
        application/json:
          type: WafPackagePatchRequest
          examples: !include /examples/wafpackages/wafpackages_patch_example.raml
      responses:
        '200':
          description: Successfully patched a OWASP ModSecurity Core Rule Set
          body:
            application/json:
              type: WAFRulePackageEnvelope
              examples:
                response: !include /examples/wafpackages/wafpackages_get_example.raml
      securedBy:
        - CommerceCloudStandards.AmOAuth2: { scopes: [ sfcc.cdn-zones.rw ] }
  /zones/{zoneId}/firewall-custom/rules:
    is: [hasUnauthorizedResponse, hasForbiddenAccessResponse, hasInternalServerErrorResponse, hasResourceNotFoundResponse]
    post:
      is: [hasBadRequestResponse]
      displayName: createCustomRule
      description: Creates a custom rule.
      body:
        application/json:
          type: CustomRulesPostRequest
          example: !include /examples/customrules/custom-rules-post-request.raml
      responses:
        '201':
          description: Successfully created the custom rule requested by the caller.
          body:
            application/json:
              type: CustomRuleEnvelope
              example: !include /examples/customrules/custom-rule-response.raml
      securedBy:
        - CommerceCloudStandards.AmOAuth2: { scopes: [ sfcc.cdn-zones.rw ] }
    get:
      is: [ApiStandards.OffsetPaginated: {maxLimit: 50, defaultSize: 25}]
      displayName: getCustomRules
      description: Retrieves existing custom rules.
      responses:
        '200':
          description: Successfully returned back the list of custom rules requested by the caller.
          body:
            application/json:
              type: CustomRulesEnvelope
              example: !include /examples/customrules/custom-rules-response.raml
      securedBy:
        - CommerceCloudStandards.AmOAuth2: { scopes: [ sfcc.cdn-zones, sfcc.cdn-zones.rw ] }
    patch:
      is: [hasBadRequestResponse]
      displayName: updateOrderOfCustomRules
      description: Updates the order of all existing custom rules.
      body:
        application/json:
          type: CustomRulesPatchOrderRequest
      responses:
        '200':
          description: Successfully updated the order of existing custom rules as requested by the caller.
          body:
            application/json:
              type: CustomRulesEnvelope
              example: !include /examples/customrules/custom-rules-response.raml
      securedBy:
        - CommerceCloudStandards.AmOAuth2: { scopes: [ sfcc.cdn-zones.rw ] }
    /{ruleId}:
      is: [hasUnauthorizedResponse, hasForbiddenAccessResponse, hasInternalServerErrorResponse, hasResourceNotFoundResponse]
      get:
        displayName: getCustomRule
        description: Retrieves a specific custom rule.
        responses:
          '200':
            description: Successfully returned back the custom rule requested by the caller.
            body:
              application/json:
                type: CustomRuleEnvelope
                example: !include /examples/customrules/custom-rule-response.raml
        securedBy:
          - CommerceCloudStandards.AmOAuth2: { scopes: [ sfcc.cdn-zones, sfcc.cdn-zones.rw ] }
      patch:
        is: [hasBadRequestResponse]
        displayName: updateCustomRule
        description: Updates a specific custom rule.
        body:
          application/json:
            type: CustomRulesPatchRequest
        responses:
          '200':
            description: Successfully updated the custom rule requested by the caller.
            body:
              application/json:
                type: CustomRuleEnvelope
                example: !include /examples/customrules/custom-rule-response.raml
        securedBy:
          - CommerceCloudStandards.AmOAuth2: { scopes: [ sfcc.cdn-zones.rw ] }
      delete:
        displayName: deleteCustomRule
        description: Deletes a specific custom rule.
        responses:
          '204':
            description: Successfully deleted the custom rule requested by the caller.
        securedBy:
          - CommerceCloudStandards.AmOAuth2: { scopes: [ sfcc.cdn-zones.rw ] }
  /zones/{zoneId}/rate-limiting/rules:
    is: [hasUnauthorizedResponse, hasForbiddenAccessResponse, hasInternalServerErrorResponse, hasResourceNotFoundResponse]
    post:
      is: [hasBadRequestResponse]
      displayName: createRateLimitingRule
      description: Creates a rate limiting rule.
      body:
        application/json:
          type: RateLimitingRulesPostRequest
          example: !include /examples/ratelimitingrules/rate-limiting-rules-post-request.raml
      responses:
        '201':
          description: Successfully created the rate limiting rule requested by the caller.
          body:
            application/json:
              type: RateLimitingRuleEnvelope
              example: !include /examples/ratelimitingrules/rate-limiting-rule-response.raml
      securedBy:
        - CommerceCloudStandards.AmOAuth2: { scopes: [ sfcc.cdn-zones.rw ] }
    get:
      displayName: getRateLimitingRules
      description: Retrieves existing rate limiting rules.
      responses:
        '200':
          description: Successfully returned back the list of rate limiting rules requested by the caller.
          body:
            application/json:
              type: RateLimitingRulesEnvelope
              example: !include /examples/ratelimitingrules/rate-limiting-rules-response.raml
      securedBy:
        - CommerceCloudStandards.AmOAuth2: { scopes: [ sfcc.cdn-zones, sfcc.cdn-zones.rw ] }
    /{ruleId}:
      is: [hasUnauthorizedResponse, hasForbiddenAccessResponse, hasInternalServerErrorResponse, hasResourceNotFoundResponse]
      get:
        displayName: getRateLimitingRule
        description: Retrieves a specific rate limiting rule.
        responses:
          '200':
            description: Successfully returned back the rate limiting rule requested by the caller.
            body:
              application/json:
                type: RateLimitingRuleEnvelope
                example: !include /examples/ratelimitingrules/rate-limiting-rule-response.raml
        securedBy:
        - CommerceCloudStandards.AmOAuth2: { scopes: [ sfcc.cdn-zones, sfcc.cdn-zones.rw ] }
      patch:
        is: [hasBadRequestResponse]
        displayName: updateRateLimitingRule
        description: Updates a specific rate limiting rule.
        body:
          application/json:
            type: RateLimitingRulesPatchRequest
        responses:
          '200':
            description: Successfully updated the rate limiting rule requested by the caller.
            body:
              application/json:
                type: RateLimitingRuleEnvelope
                example: !include /examples/ratelimitingrules/rate-limiting-rule-response.raml
        securedBy:
        - CommerceCloudStandards.AmOAuth2: { scopes: [ sfcc.cdn-zones.rw ] }
      delete:
        displayName: deleteRateLimitingRule
        description: Deletes a specific rate limiting rule.
        responses:
          '204':
            description: Successfully deleted the rate limiting rule requested by the caller.
        securedBy:
        - CommerceCloudStandards.AmOAuth2: { scopes: [ sfcc.cdn-zones.rw ] }
  /zones/{zoneId}/firewall-managed/rulesets:
    is: [hasUnauthorizedResponse, hasForbiddenAccessResponse, hasInternalServerErrorResponse, hasResourceNotFoundResponse]
    get:
      displayName: getWafManagedRulesets
      description: Retrieves WAFv2 managed rulesets.
      responses:
        '200':
          description: Successfully returned the list of WAF managed rulesets.
          body:
            application/json:
              type: WAFManagedRulesetsEnvelope
              example: !include /examples/wafmanagedrulesets/waf-managed-rulesets-response.raml
      securedBy:
      - CommerceCloudStandards.AmOAuth2: { scopes: [ sfcc.cdn-zones, sfcc.cdn-zones.rw ] }
    /{rulesetId}:
      is: [hasBadRequestResponse, hasUnauthorizedResponse, hasForbiddenAccessResponse, hasInternalServerErrorResponse, hasResourceNotFoundResponse]
      patch:
        displayName: updateWafManagedRuleset
        description: Updates WAFv2 managed ruleset.
        body:
          application/json:
            type: WAFManagedRulesetRequest
            example: !include /examples/wafmanagedrulesets/waf-managed-rulesets-update-request.raml
        responses:
          '200':
            description: Successfully returned the updated WAF managed rulesets.
            body:
              application/json:
                type: WAFManagedRulesetEnvelope
                example: !include /examples/wafmanagedrulesets/waf-managed-rulesets-update-response.raml
        securedBy:
        - CommerceCloudStandards.AmOAuth2: { scopes: [ sfcc.cdn-zones.rw ] }
      /rules:
        get:
          displayName: getWafManagedRulesInRuleset
          description: Retrieves all rules in the specified WAFv2 managed ruleset.
          responses:
            '200':
              description: Successfully returned the rules in the WAFv2 managed ruleset.
              body:
                application/json:
                  type: WAFManagedRulesEnvelope
                  example: !include /examples/wafmanagedrulesets/waf-managed-rules-response.raml
          securedBy:
            - CommerceCloudStandards.AmOAuth2: { scopes: [ sfcc.cdn-zones, sfcc.cdn-zones.rw ] }
        /{ruleId}:
          patch:
            displayName: updateWafManagedRuleInRuleset
            description: Updates a WAF managed rule in the specified WAFv2 managed ruleset.
            body:
              application/json:
                type: WAFManagedRuleRequest
                example: !include /examples/wafmanagedrulesets/waf-managed-rules-update-request.raml
            responses:
              '200':
                description: Successfully returned the updated WAF managed rule.
                body:
                  application/json:
                    type: WAFManagedRuleEnvelope
                    example: !include /examples/wafmanagedrulesets/waf-managed-rules-update-response.raml
            securedBy:
              - CommerceCloudStandards.AmOAuth2: { scopes: [ sfcc.cdn-zones.rw ] }
  /zones/{zoneId}/firewall-managed/migration:
    is: [hasBadRequestResponse, hasUnauthorizedResponse, hasForbiddenAccessResponse, hasInternalServerErrorResponse, hasResourceNotFoundResponse]
    put:
      displayName: migrateZoneToWafV2
      description: Migrates a zone to WAFv2. Only applicable for existing zones using WAFv1.
      responses:
        '200':
          description: Successfully migrated the zone to WAFv2 and returned the updated WAF managed rulesets.
          body:
            application/json:
              type: WAFManagedRulesetsEnvelope
              example: !include /examples/wafmanagedrulesets/waf-managed-rulesets-response.raml
      securedBy:
      - CommerceCloudStandards.AmOAuth2: { scopes: [ sfcc.cdn-zones.rw ] }
  /zones/{zoneId}/origin-header-modification/{type}:
    is: [hasResourceNotFoundResponse, hasInternalServerErrorResponse, hasForbiddenAccessResponse, hasUnauthorizedResponse]
    put:
      is: [hasBadRequestResponse]
      displayName: upsertOriginHeaderModification
      description: Upsert origin header modification.
      body:
        application/json:
          type: OriginHeaderModificationPutRequest
          example: !include /examples/originheadermodification/mrt-put-request.raml
      responses:
        201:
          description: Successfully created the origin header modification.
          body:
            application/json:
              type: OriginHeaderModificationEnvelope
              example: !include /examples/originheadermodification/mrt-put-create-response.raml
        200:
          description: Successfully updated the origin header modification.
          body:
            application/json:
              type: OriginHeaderModificationEnvelope
              example: !include /examples/originheadermodification/mrt-put-update-response.raml
      securedBy:
        - CommerceCloudStandards.AmOAuth2: { scopes: [ sfcc.cdn-zones.rw ] }
    get:
      is: [hasBadRequestResponse]
      displayName: getOriginHeaderModification
      description: Get origin header modification associated with a zone.
      responses:
        200:
          description: Successfully returned the origin header modification associated with a zone.
          body:
            application/json:
              type: OriginHeaderModificationEnvelope
              example: !include /examples/originheadermodification/mrt-get-response.raml
      securedBy:
        - CommerceCloudStandards.AmOAuth2: { scopes: [ sfcc.cdn-zones, sfcc.cdn-zones.rw ] }
    delete:
      displayName: deleteOriginHeaderModification
      description: Delete the origin header modification associated with a zone.
      responses:
        204:
          description: Successfully deleted the origin header modification associated with a zone.
      securedBy:
        - CommerceCloudStandards.AmOAuth2: { scopes: [ sfcc.cdn-zones.rw ] }
