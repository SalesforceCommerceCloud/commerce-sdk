openapi: 3.0.3
info:
  title: CDN Zones
  version: v1
  description: |-
    # API Overview

    The Content Delivery Network (CDN) API is for managing the embedded CDN (eCDN) that is included with Commerce Cloud and configured with Business Manager.

    Use the API to:

    - Ensure that traffic doesnâ€™t circumvent proxies layered in front of your eCDN.
    - Accelerate the delivery of resources to users with caching, compression, and prioritization.
    - Customize how users interact with resources and how requests are processed, including custom pages and routing rules.
    - Provide proactive and complete application protection against new and existing exploits from bad actors.

    ## Authentication & Authorization

    For resource access, you must use a client ID and client secret from Account Manager to request an access token. The access token is used as a bearer token and added to the `Authorization` header of your API request.

    The API client must also have at least one of the following OAuth scopes: `sfcc.cdn-zones` or `sfcc.cdn-zones.rw`.

    For detailed setup instructions, see the [Authorization for Admin APIs](https://developer.salesforce.com/docs/commerce/commerce-api/guide/authorization-for-admin-apis.html) guide.

    You must include the relevant scope(s) in the client ID used to generate the token. For details, see the [Authorization Scopes Catalog.](https://developer.salesforce.com/docs/commerce/commerce-api/guide/auth-z-scope-catalog.html)

    ## Use Cases

    For detailed usage information, refer to the [CDN Zones Guides.](https://developer.salesforce.com/docs/commerce/commerce-api/guide/cdn-zones.html)
servers:
  - url: https://{shortCode}.api.commercecloud.salesforce.com/cdn/zones/v1
    variables:
      shortCode:
        default: shortCode
paths:
  /organizations/{organizationId}/storefront-zones:
    post:
      summary: Create a new storefront zone.
      operationId: createStorefrontZone
      parameters:
        - $ref: '#/components/parameters/organizationId'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/StorefrontZoneCreateRequest'
            examples:
              StorefrontZoneCreateRequestBodyExample:
                $ref: '#/components/examples/StorefrontZoneCreateRequestBodyExample'
        required: true
      responses:
        '201':
          description: Successfully created new storefront zone.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StorefrontZoneCreateEnvelope'
              examples:
                StorefrontZoneCreateResponse:
                  $ref: '#/components/examples/StorefrontZoneCreateResponse'
        '400':
          description: |
            The request sent by the caller is not valid.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ApiStandardsErrorResponse'
              examples:
                BadRequest:
                  $ref: '#/components/examples/BadRequest'
        '401':
          description: |
            The caller is not authorized to access the requested resource.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ApiStandardsErrorResponse'
              examples:
                Unauthorized:
                  $ref: '#/components/examples/Unauthorized'
        '403':
          description: |
            The caller does not have access to the requested resource.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ApiStandardsErrorResponse'
              examples:
                Forbidden:
                  $ref: '#/components/examples/Forbidden'
        '404':
          description: |
            The resource requested by the caller was not found.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ApiStandardsErrorResponse'
              examples:
                NotFound:
                  $ref: '#/components/examples/NotFound'
        '500':
          description: |
            An error occurred on the server side.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ApiStandardsErrorResponse'
              examples:
                InternalServerError:
                  $ref: '#/components/examples/InternalServerError'
      security:
        - AmOAuth2:
            - sfcc.cdn-zones.rw
  /organizations/{organizationId}/mtls/code-upload-certificates:
    get:
      summary: Return all the mTLS certificates for the account.
      operationId: getCodeUploadCertificates
      parameters:
        - $ref: '#/components/parameters/organizationId'
      responses:
        '200':
          description: Successfully retrieved details of the mTLS certificates requested by the caller.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MtlsCertificatesResponseEnvelope'
              examples:
                MtlsCodeUploadGetCertificatesResponse:
                  $ref: '#/components/examples/MtlsCodeUploadGetCertificatesResponse'
        '400':
          description: |
            The request sent by the caller is not valid.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ApiStandardsErrorResponse'
              examples:
                BadRequest:
                  $ref: '#/components/examples/BadRequest'
        '401':
          description: |
            The caller is not authorized to access the requested resource.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ApiStandardsErrorResponse'
              examples:
                Unauthorized:
                  $ref: '#/components/examples/Unauthorized'
        '403':
          description: |
            The caller does not have access to the requested resource.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ApiStandardsErrorResponse'
              examples:
                Forbidden:
                  $ref: '#/components/examples/Forbidden'
        '500':
          description: |
            An error occurred on the server side.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ApiStandardsErrorResponse'
              examples:
                InternalServerError:
                  $ref: '#/components/examples/InternalServerError'
      security:
        - AmOAuth2:
            - sfcc.cdn-zones
            - sfcc.cdn-zones.rw
    post:
      summary: Set up two-factor mTLS certificates for the account and associate the staging zone code upload hostname.
      operationId: createCodeUploadCertificate
      parameters:
        - $ref: '#/components/parameters/organizationId'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MtlsCertificateRequest'
            examples:
              MtlsCodeUploadPostCertificateRequestBodyExample:
                $ref: '#/components/examples/MtlsCodeUploadPostCertificateRequestBodyExample'
        required: true
      responses:
        '201':
          description: Returns information about the uploaded mTLS certificate.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MtlsCertificateResponseEnvelope'
              examples:
                MtlsCodeUploadGetCertificateResponse:
                  $ref: '#/components/examples/MtlsCodeUploadGetCertificateResponse'
        '400':
          description: |
            The request sent by the caller is not valid.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ApiStandardsErrorResponse'
              examples:
                BadRequest:
                  $ref: '#/components/examples/BadRequest'
        '401':
          description: |
            The caller is not authorized to access the requested resource.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ApiStandardsErrorResponse'
              examples:
                Unauthorized:
                  $ref: '#/components/examples/Unauthorized'
        '403':
          description: |
            The caller does not have access to the requested resource.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ApiStandardsErrorResponse'
              examples:
                Forbidden:
                  $ref: '#/components/examples/Forbidden'
        '404':
          description: |
            The resource requested by the caller was not found.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ApiStandardsErrorResponse'
              examples:
                NotFound:
                  $ref: '#/components/examples/NotFound'
        '500':
          description: |
            An error occurred on the server side.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ApiStandardsErrorResponse'
              examples:
                InternalServerError:
                  $ref: '#/components/examples/InternalServerError'
      security:
        - AmOAuth2:
            - sfcc.cdn-zones.rw
  /organizations/{organizationId}/mtls/code-upload-certificates/{mtlsCertificateId}:
    get:
      summary: Return the mTLS certificate for the given account's mTLS certificate ID.
      operationId: getCodeUploadCertificate
      parameters:
        - $ref: '#/components/parameters/mtlsCertificateId'
        - $ref: '#/components/parameters/organizationId'
      responses:
        '200':
          description: Successfully retrieved mTLS certificate information from the mTLS certificate ID requested by the caller.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MtlsCertificateResponseEnvelope'
              examples:
                MtlsCodeUploadGetCertificateResponse:
                  $ref: '#/components/examples/MtlsCodeUploadGetCertificateResponse'
        '400':
          description: |
            The request sent by the caller is not valid.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ApiStandardsErrorResponse'
              examples:
                BadRequest:
                  $ref: '#/components/examples/BadRequest'
        '401':
          description: |
            The caller is not authorized to access the requested resource.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ApiStandardsErrorResponse'
              examples:
                Unauthorized:
                  $ref: '#/components/examples/Unauthorized'
        '403':
          description: |
            The caller does not have access to the requested resource.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ApiStandardsErrorResponse'
              examples:
                Forbidden:
                  $ref: '#/components/examples/Forbidden'
        '500':
          description: |
            An error occurred on the server side.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ApiStandardsErrorResponse'
              examples:
                InternalServerError:
                  $ref: '#/components/examples/InternalServerError'
      security:
        - AmOAuth2:
            - sfcc.cdn-zones
            - sfcc.cdn-zones.rw
    delete:
      summary: Remove an mTLS certificate and associated hostname.
      operationId: deleteCodeUploadCertificate
      parameters:
        - $ref: '#/components/parameters/mtlsCertificateId'
        - $ref: '#/components/parameters/organizationId'
      responses:
        '204':
          description: Successfully deleted the mTLS certificate from the account.
        '404':
          description: |
            The resource requested by the caller was not found.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ApiStandardsErrorResponse'
              examples:
                NotFound:
                  $ref: '#/components/examples/NotFound'
      security:
        - AmOAuth2:
            - sfcc.cdn-zones.rw
  /organizations/{organizationId}/page-shield/notifications:
    get:
      summary: Get page shield notification webhooks. See [eCDN PCI 4.0 Compliance Tools](https://developer.salesforce.com/docs/commerce/commerce-api/guide/cdn-pci-4-compliance.html).
      operationId: getPageShieldNotification
      parameters:
        - $ref: '#/components/parameters/organizationId'
      responses:
        '200':
          description: Successfully retrieved notification webhooks.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PageShieldNotificationWebhookListEnvelope'
        '400':
          description: |
            The request sent by the caller is not valid.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ApiStandardsErrorResponse'
              examples:
                BadRequest:
                  $ref: '#/components/examples/BadRequest'
        '401':
          description: |
            The caller is not authorized to access the requested resource.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ApiStandardsErrorResponse'
              examples:
                Unauthorized:
                  $ref: '#/components/examples/Unauthorized'
        '403':
          description: |
            The caller does not have access to the requested resource.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ApiStandardsErrorResponse'
              examples:
                Forbidden:
                  $ref: '#/components/examples/Forbidden'
        '500':
          description: |
            An error occurred on the server side.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ApiStandardsErrorResponse'
              examples:
                InternalServerError:
                  $ref: '#/components/examples/InternalServerError'
      security:
        - AmOAuth2:
            - sfcc.cdn-zones
            - sfcc.cdn-zones.rw
    post:
      summary: Setup page shield notification webhook. See [eCDN PCI 4.0 Compliance Tools](https://developer.salesforce.com/docs/commerce/commerce-api/guide/cdn-pci-4-compliance.html).
      operationId: postPageShieldNotification
      parameters:
        - $ref: '#/components/parameters/organizationId'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PageShieldNotificationWebhookRequest'
        required: true
      responses:
        '200':
          description: Successfully added notification webhook.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PageShieldNotificationWebhookEnvelope'
        '400':
          description: |
            The request sent by the caller is not valid.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ApiStandardsErrorResponse'
              examples:
                BadRequest:
                  $ref: '#/components/examples/BadRequest'
        '401':
          description: |
            The caller is not authorized to access the requested resource.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ApiStandardsErrorResponse'
              examples:
                Unauthorized:
                  $ref: '#/components/examples/Unauthorized'
        '403':
          description: |
            The caller does not have access to the requested resource.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ApiStandardsErrorResponse'
              examples:
                Forbidden:
                  $ref: '#/components/examples/Forbidden'
        '500':
          description: |
            An error occurred on the server side.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ApiStandardsErrorResponse'
              examples:
                InternalServerError:
                  $ref: '#/components/examples/InternalServerError'
      security:
        - AmOAuth2:
            - sfcc.cdn-zones.rw
  /organizations/{organizationId}/page-shield/notifications/{webhookId}:
    delete:
      summary: Delete page shield notification webhook. See [eCDN PCI 4.0 Compliance Tools](https://developer.salesforce.com/docs/commerce/commerce-api/guide/cdn-pci-4-compliance.html).
      operationId: deletePageShieldNotification
      parameters:
        - $ref: '#/components/parameters/webhookId'
        - $ref: '#/components/parameters/organizationId'
      responses:
        '204':
          description: Successfully deleted notification webhook.
        '400':
          description: |
            The request sent by the caller is not valid.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ApiStandardsErrorResponse'
              examples:
                BadRequest:
                  $ref: '#/components/examples/BadRequest'
        '401':
          description: |
            The caller is not authorized to access the requested resource.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ApiStandardsErrorResponse'
              examples:
                Unauthorized:
                  $ref: '#/components/examples/Unauthorized'
        '403':
          description: |
            The caller does not have access to the requested resource.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ApiStandardsErrorResponse'
              examples:
                Forbidden:
                  $ref: '#/components/examples/Forbidden'
        '500':
          description: |
            An error occurred on the server side.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ApiStandardsErrorResponse'
              examples:
                InternalServerError:
                  $ref: '#/components/examples/InternalServerError'
      security:
        - AmOAuth2:
            - sfcc.cdn-zones.rw
  /organizations/{organizationId}/zones/{zoneId}/page-shield/policies:
    get:
      summary: List page shield policies. See [eCDN PCI 4.0 Compliance Tools](https://developer.salesforce.com/docs/commerce/commerce-api/guide/cdn-pci-4-compliance.html).
      operationId: getPageShieldPolicies
      parameters:
        - $ref: '#/components/parameters/zoneId'
        - $ref: '#/components/parameters/organizationId'
      responses:
        '200':
          description: List current page shield policies.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PageShieldPoliciesListEnvelope'
              examples:
                PageShieldPoliciesGetResponse:
                  $ref: '#/components/examples/PageShieldPoliciesGetResponse'
        '400':
          description: |
            The request sent by the caller is not valid.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ApiStandardsErrorResponse'
              examples:
                BadRequest:
                  $ref: '#/components/examples/BadRequest'
        '401':
          description: |
            The caller is not authorized to access the requested resource.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ApiStandardsErrorResponse'
              examples:
                Unauthorized:
                  $ref: '#/components/examples/Unauthorized'
        '403':
          description: |
            The caller does not have access to the requested resource.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ApiStandardsErrorResponse'
              examples:
                Forbidden:
                  $ref: '#/components/examples/Forbidden'
        '500':
          description: |
            An error occurred on the server side.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ApiStandardsErrorResponse'
              examples:
                InternalServerError:
                  $ref: '#/components/examples/InternalServerError'
      security:
        - AmOAuth2:
            - sfcc.cdn-zones
            - sfcc.cdn-zones.rw
    post:
      summary: Create page shield policy. See [eCDN PCI 4.0 Compliance Tools](https://developer.salesforce.com/docs/commerce/commerce-api/guide/cdn-pci-4-compliance.html).
      operationId: createPageShieldPolicy
      parameters:
        - $ref: '#/components/parameters/zoneId'
        - $ref: '#/components/parameters/organizationId'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PageShieldPolicyRequest'
            examples:
              PageShieldPolicyRequestBodyExample:
                $ref: '#/components/examples/PageShieldPolicyRequestBodyExample'
        required: true
      responses:
        '200':
          description: Successfully created page shield policy.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PageShieldPoliciesEnvelope'
              examples:
                PageShieldPolicyGetResponse:
                  $ref: '#/components/examples/PageShieldPolicyGetResponse'
        '400':
          description: |
            The request sent by the caller is not valid.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ApiStandardsErrorResponse'
              examples:
                BadRequest:
                  $ref: '#/components/examples/BadRequest'
        '401':
          description: |
            The caller is not authorized to access the requested resource.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ApiStandardsErrorResponse'
              examples:
                Unauthorized:
                  $ref: '#/components/examples/Unauthorized'
        '403':
          description: |
            The caller does not have access to the requested resource.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ApiStandardsErrorResponse'
              examples:
                Forbidden:
                  $ref: '#/components/examples/Forbidden'
        '404':
          description: |
            The resource requested by the caller was not found.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ApiStandardsErrorResponse'
              examples:
                NotFound:
                  $ref: '#/components/examples/NotFound'
        '500':
          description: |
            An error occurred on the server side.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ApiStandardsErrorResponse'
              examples:
                InternalServerError:
                  $ref: '#/components/examples/InternalServerError'
      security:
        - AmOAuth2:
            - sfcc.cdn-zones.rw
  /organizations/{organizationId}/zones/{zoneId}/page-shield/policies/{policyId}:
    get:
      summary: Get page shield policy by policy ID. See [eCDN PCI 4.0 Compliance Tools](https://developer.salesforce.com/docs/commerce/commerce-api/guide/cdn-pci-4-compliance.html).
      operationId: getPageShieldPolicy
      parameters:
        - $ref: '#/components/parameters/policyId'
        - $ref: '#/components/parameters/zoneId'
        - $ref: '#/components/parameters/organizationId'
      responses:
        '200':
          description: Successfully retrieved the details of the page shield policy.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PageShieldPoliciesEnvelope'
              examples:
                PageShieldPolicyGetResponse:
                  $ref: '#/components/examples/PageShieldPolicyGetResponse'
        '400':
          description: |
            The request sent by the caller is not valid.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ApiStandardsErrorResponse'
              examples:
                BadRequest:
                  $ref: '#/components/examples/BadRequest'
        '401':
          description: |
            The caller is not authorized to access the requested resource.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ApiStandardsErrorResponse'
              examples:
                Unauthorized:
                  $ref: '#/components/examples/Unauthorized'
        '403':
          description: |
            The caller does not have access to the requested resource.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ApiStandardsErrorResponse'
              examples:
                Forbidden:
                  $ref: '#/components/examples/Forbidden'
        '500':
          description: |
            An error occurred on the server side.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ApiStandardsErrorResponse'
              examples:
                InternalServerError:
                  $ref: '#/components/examples/InternalServerError'
      security:
        - AmOAuth2:
            - sfcc.cdn-zones
            - sfcc.cdn-zones.rw
    put:
      summary: Update page shield policy by policy ID. See [eCDN PCI 4.0 Compliance Tools](https://developer.salesforce.com/docs/commerce/commerce-api/guide/cdn-pci-4-compliance.html).
      operationId: updatePageShieldPolicy
      parameters:
        - $ref: '#/components/parameters/policyId'
        - $ref: '#/components/parameters/zoneId'
        - $ref: '#/components/parameters/organizationId'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PageShieldPolicyRequest'
            examples:
              PageShieldPolicyPutRequestBodyExample:
                $ref: '#/components/examples/PageShieldPolicyPutRequestBodyExample'
        required: true
      responses:
        '200':
          description: Successfully updated the page shield policy.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PageShieldPoliciesEnvelope'
              examples:
                PageShieldPoliciesEnvelope:
                  $ref: '#/components/examples/PageShieldPolicyPutResponse'
        '400':
          description: |
            The request sent by the caller is not valid.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ApiStandardsErrorResponse'
              examples:
                BadRequest:
                  $ref: '#/components/examples/BadRequest'
        '401':
          description: |
            The caller is not authorized to access the requested resource.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ApiStandardsErrorResponse'
              examples:
                Unauthorized:
                  $ref: '#/components/examples/Unauthorized'
        '403':
          description: |
            The caller does not have access to the requested resource.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ApiStandardsErrorResponse'
              examples:
                Forbidden:
                  $ref: '#/components/examples/Forbidden'
        '500':
          description: |
            An error occurred on the server side.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ApiStandardsErrorResponse'
              examples:
                InternalServerError:
                  $ref: '#/components/examples/InternalServerError'
      security:
        - AmOAuth2:
            - sfcc.cdn-zones.rw
    delete:
      summary: Delete page shield policy. See [eCDN PCI 4.0 Compliance Tools](https://developer.salesforce.com/docs/commerce/commerce-api/guide/cdn-pci-4-compliance.html).
      operationId: deletePageShieldPolicy
      parameters:
        - $ref: '#/components/parameters/policyId'
        - $ref: '#/components/parameters/zoneId'
        - $ref: '#/components/parameters/organizationId'
      responses:
        '204':
          description: Successfully deleted the page shield policy.
        '400':
          description: |
            The request sent by the caller is not valid.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ApiStandardsErrorResponse'
              examples:
                BadRequest:
                  $ref: '#/components/examples/BadRequest'
        '401':
          description: |
            The caller is not authorized to access the requested resource.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ApiStandardsErrorResponse'
              examples:
                Unauthorized:
                  $ref: '#/components/examples/Unauthorized'
        '403':
          description: |
            The caller does not have access to the requested resource.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ApiStandardsErrorResponse'
              examples:
                Forbidden:
                  $ref: '#/components/examples/Forbidden'
        '404':
          description: |
            The resource requested by the caller was not found.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ApiStandardsErrorResponse'
              examples:
                NotFound:
                  $ref: '#/components/examples/NotFound'
        '500':
          description: |
            An error occurred on the server side.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ApiStandardsErrorResponse'
              examples:
                InternalServerError:
                  $ref: '#/components/examples/InternalServerError'
      security:
        - AmOAuth2:
            - sfcc.cdn-zones.rw
  /organizations/{organizationId}/zones/{zoneId}/page-shield/scripts:
    get:
      summary: Retrieve a list of scripts detected by Page Shield for a specific zone. See [eCDN PCI 4.0 Compliance Tools](https://developer.salesforce.com/docs/commerce/commerce-api/guide/cdn-pci-4-compliance.html).
      operationId: getPageShieldScripts
      parameters:
        - $ref: '#/components/parameters/zoneId'
        - $ref: '#/components/parameters/organizationId'
        - $ref: '#/components/parameters/direction'
        - $ref: '#/components/parameters/excludeCdnCgi'
        - $ref: '#/components/parameters/excludeDuplicates'
        - $ref: '#/components/parameters/excludeUrls'
        - $ref: '#/components/parameters/hosts'
        - $ref: '#/components/parameters/orderBy'
        - $ref: '#/components/parameters/pageUrl'
        - $ref: '#/components/parameters/prioritizeMalicious'
        - $ref: '#/components/parameters/status'
        - $ref: '#/components/parameters/urls'
        - name: limit
          in: query
          required: false
          schema:
            type: integer
            format: int32
            default: 200
            maximum: 200
          description: Maximum records to retrieve per request, not to exceed 200. Defaults to 200.
        - name: offset
          in: query
          required: false
          schema:
            type: integer
            format: int64
            default: 0
            minimum: 0
          description: Used to retrieve the results based on a particular resource offset.
      responses:
        '200':
          description: List current page shield scripts.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PageShieldScriptListEnvelope'
        '400':
          description: |
            The request sent by the caller is not valid.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ApiStandardsErrorResponse'
              examples:
                BadRequest:
                  $ref: '#/components/examples/BadRequest'
        '401':
          description: |
            The caller is not authorized to access the requested resource.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ApiStandardsErrorResponse'
              examples:
                Unauthorized:
                  $ref: '#/components/examples/Unauthorized'
        '403':
          description: |
            The caller does not have access to the requested resource.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ApiStandardsErrorResponse'
              examples:
                Forbidden:
                  $ref: '#/components/examples/Forbidden'
        '404':
          description: |
            The resource requested by the caller was not found.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ApiStandardsErrorResponse'
              examples:
                NotFound:
                  $ref: '#/components/examples/NotFound'
        '500':
          description: |
            An error occurred on the server side.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ApiStandardsErrorResponse'
              examples:
                InternalServerError:
                  $ref: '#/components/examples/InternalServerError'
      security:
        - AmOAuth2:
            - sfcc.cdn-zones
            - sfcc.cdn-zones.rw
  /organizations/{organizationId}/zones/{zoneId}/page-shield/scripts/{scriptId}:
    get:
      summary: Fetch a script detected by Page Shield by script ID. See [eCDN PCI 4.0 Compliance Tools](https://developer.salesforce.com/docs/commerce/commerce-api/guide/cdn-pci-4-compliance.html).
      operationId: getPageShieldScript
      parameters:
        - $ref: '#/components/parameters/scriptId'
        - $ref: '#/components/parameters/zoneId'
        - $ref: '#/components/parameters/organizationId'
      responses:
        '200':
          description: A script detected by Page Shield by script ID.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PageShieldScriptEnvelope'
        '400':
          description: |
            The request sent by the caller is not valid.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ApiStandardsErrorResponse'
              examples:
                BadRequest:
                  $ref: '#/components/examples/BadRequest'
        '401':
          description: |
            The caller is not authorized to access the requested resource.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ApiStandardsErrorResponse'
              examples:
                Unauthorized:
                  $ref: '#/components/examples/Unauthorized'
        '403':
          description: |
            The caller does not have access to the requested resource.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ApiStandardsErrorResponse'
              examples:
                Forbidden:
                  $ref: '#/components/examples/Forbidden'
        '500':
          description: |
            An error occurred on the server side.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ApiStandardsErrorResponse'
              examples:
                InternalServerError:
                  $ref: '#/components/examples/InternalServerError'
      security:
        - AmOAuth2:
            - sfcc.cdn-zones
            - sfcc.cdn-zones.rw
  /organizations/{organizationId}/zones/info:
    get:
      summary: Retrieve zone information.
      operationId: getZonesInfo
      parameters:
        - $ref: '#/components/parameters/organizationId'
        - name: limit
          in: query
          required: false
          schema:
            type: integer
            format: int32
            default: 25
            maximum: 50
          description: Maximum records to retrieve per request, not to exceed 50. Defaults to 25.
        - name: offset
          in: query
          required: false
          schema:
            type: integer
            format: int64
            default: 0
            minimum: 0
          description: Used to retrieve the results based on a particular resource offset.
      responses:
        '200':
          description: Successfully retrieved zone information requested by the caller.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ZonesEnvelope'
              examples:
                ZonesGetResponse:
                  $ref: '#/components/examples/ZonesGetResponse'
        '401':
          description: |
            The caller is not authorized to access the requested resource.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ApiStandardsErrorResponse'
              examples:
                Unauthorized:
                  $ref: '#/components/examples/Unauthorized'
        '403':
          description: |
            The caller does not have access to the requested resource.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ApiStandardsErrorResponse'
              examples:
                Forbidden:
                  $ref: '#/components/examples/Forbidden'
        '404':
          description: |
            The resource requested by the caller was not found.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ApiStandardsErrorResponse'
              examples:
                NotFound:
                  $ref: '#/components/examples/NotFound'
        '500':
          description: |
            An error occurred on the server side.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ApiStandardsErrorResponse'
              examples:
                InternalServerError:
                  $ref: '#/components/examples/InternalServerError'
      security:
        - AmOAuth2:
            - sfcc.cdn-zones
            - sfcc.cdn-zones.rw
  /organizations/{organizationId}/zones/{zoneId}/waf/groups:
    get:
      summary: Retrieve all WAF groups accessible to the caller. Not applicable for zones using WAFv2. For any zones created after the 24.5 release, use the endpoints for WAF managed rulesets.
      operationId: getWafGroups
      parameters:
        - $ref: '#/components/parameters/zoneId'
        - $ref: '#/components/parameters/organizationId'
      responses:
        '200':
          description: Successfully retrieved details of WAF groups to which the caller has access.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WafGroupsEnvelope'
              examples:
                WafGroupsGetResponse:
                  $ref: '#/components/examples/WafGroupsGetResponse'
        '401':
          description: |
            The caller is not authorized to access the requested resource.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ApiStandardsErrorResponse'
              examples:
                Unauthorized:
                  $ref: '#/components/examples/Unauthorized'
        '403':
          description: |
            The caller does not have access to the requested resource.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ApiStandardsErrorResponse'
              examples:
                Forbidden:
                  $ref: '#/components/examples/Forbidden'
        '404':
          description: |
            The resource requested by the caller was not found.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ApiStandardsErrorResponse'
              examples:
                NotFound:
                  $ref: '#/components/examples/NotFound'
        '500':
          description: |
            An error occurred on the server side.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ApiStandardsErrorResponse'
              examples:
                InternalServerError:
                  $ref: '#/components/examples/InternalServerError'
      security:
        - AmOAuth2:
            - sfcc.cdn-zones
            - sfcc.cdn-zones.rw
  /organizations/{organizationId}/zones/{zoneId}/waf/groups/{groupId}:
    put:
      summary: Update the action or mode of a specific WAF group. Not applicable for zones using WAFv2. For any zones created after the 24.5 release, use the endpoints for WAF managed rulesets.
      operationId: updateWafGroup
      parameters:
        - $ref: '#/components/parameters/groupIdPath'
        - $ref: '#/components/parameters/zoneId'
        - $ref: '#/components/parameters/organizationId'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/WafGroup'
            examples:
              WafGroupPutRequestBodyExample:
                $ref: '#/components/examples/WafGroupPutRequestBodyExample'
        required: true
      responses:
        '200':
          description: Successfully updated the WAF group specified by the caller.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WafGroupEnvelope'
              examples:
                WafGroupPutResponse:
                  $ref: '#/components/examples/WafGroupPutResponse'
        '400':
          description: |
            The request sent by the caller is not valid.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ApiStandardsErrorResponse'
              examples:
                BadRequest:
                  $ref: '#/components/examples/BadRequest'
        '401':
          description: |
            The caller is not authorized to access the requested resource.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ApiStandardsErrorResponse'
              examples:
                Unauthorized:
                  $ref: '#/components/examples/Unauthorized'
        '403':
          description: |
            The caller does not have access to the requested resource.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ApiStandardsErrorResponse'
              examples:
                Forbidden:
                  $ref: '#/components/examples/Forbidden'
        '500':
          description: |
            An error occurred on the server side.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ApiStandardsErrorResponse'
              examples:
                InternalServerError:
                  $ref: '#/components/examples/InternalServerError'
      security:
        - AmOAuth2:
            - sfcc.cdn-zones.rw
  /organizations/{organizationId}/zones/{zoneId}/waf/rules:
    get:
      summary: Retrieve WAF rules for the WAF group specified by the caller. Not applicable for zones using WAFv2. For any zones created after the 24.5 release, use the endpoints for WAF managed rulesets.
      operationId: getWafRules
      parameters:
        - $ref: '#/components/parameters/zoneId'
        - $ref: '#/components/parameters/organizationId'
        - $ref: '#/components/parameters/groupIdQuery'
      responses:
        '200':
          description: Successfully retrieved the WAF rules requested by the caller.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WafRulesEnvelope'
              examples:
                WafGroupPutResponse:
                  $ref: '#/components/examples/WafRulesGetResponse'
        '401':
          description: |
            The caller is not authorized to access the requested resource.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ApiStandardsErrorResponse'
              examples:
                Unauthorized:
                  $ref: '#/components/examples/Unauthorized'
        '403':
          description: |
            The caller does not have access to the requested resource.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ApiStandardsErrorResponse'
              examples:
                Forbidden:
                  $ref: '#/components/examples/Forbidden'
        '404':
          description: |
            The resource requested by the caller was not found.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ApiStandardsErrorResponse'
              examples:
                NotFound:
                  $ref: '#/components/examples/NotFound'
        '500':
          description: |
            An error occurred on the server side.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ApiStandardsErrorResponse'
              examples:
                InternalServerError:
                  $ref: '#/components/examples/InternalServerError'
      security:
        - AmOAuth2:
            - sfcc.cdn-zones
            - sfcc.cdn-zones.rw
  /organizations/{organizationId}/zones/{zoneId}/waf/rules/{ruleId}:
    get:
      summary: Retrieve details of a specific WAF rule. Not applicable for zones using WAFv2. For any zones created after the 24.5 release, use the endpoints for WAF managed rulesets.
      operationId: getWafRule
      parameters:
        - $ref: '#/components/parameters/ruleId'
        - $ref: '#/components/parameters/zoneId'
        - $ref: '#/components/parameters/organizationId'
      responses:
        '200':
          description: Successfully retrieved details of the WAF rule requested by the caller.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WafRuleEnvelope'
              examples:
                WafRuleGetResponse:
                  $ref: '#/components/examples/WafRuleGetResponse'
        '401':
          description: |
            The caller is not authorized to access the requested resource.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ApiStandardsErrorResponse'
              examples:
                Unauthorized:
                  $ref: '#/components/examples/Unauthorized'
        '403':
          description: |
            The caller does not have access to the requested resource.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ApiStandardsErrorResponse'
              examples:
                Forbidden:
                  $ref: '#/components/examples/Forbidden'
        '404':
          description: |
            The resource requested by the caller was not found.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ApiStandardsErrorResponse'
              examples:
                NotFound:
                  $ref: '#/components/examples/NotFound'
        '500':
          description: |
            An error occurred on the server side.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ApiStandardsErrorResponse'
              examples:
                InternalServerError:
                  $ref: '#/components/examples/InternalServerError'
      security:
        - AmOAuth2:
            - sfcc.cdn-zones
            - sfcc.cdn-zones.rw
    put:
      summary: Update the action of a specific WAF rule. Not applicable for zones using WAFv2. For any zones created after the 24.5 release, use the endpoints for WAF managed rulesets.
      operationId: updateWafRule
      parameters:
        - $ref: '#/components/parameters/ruleId'
        - $ref: '#/components/parameters/zoneId'
        - $ref: '#/components/parameters/organizationId'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/WafRule'
            examples:
              WafRulePutRequestBodyExample:
                $ref: '#/components/examples/WafRulePutRequestBodyExample'
        required: true
      responses:
        '200':
          description: Successfully updated the WAF rule specified by the caller.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WafRuleEnvelope'
              examples:
                WafRulePutResponse:
                  $ref: '#/components/examples/WafRulePutResponse'
        '400':
          description: |
            The request sent by the caller is not valid.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ApiStandardsErrorResponse'
              examples:
                BadRequest:
                  $ref: '#/components/examples/BadRequest'
        '401':
          description: |
            The caller is not authorized to access the requested resource.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ApiStandardsErrorResponse'
              examples:
                Unauthorized:
                  $ref: '#/components/examples/Unauthorized'
        '403':
          description: |
            The caller does not have access to the requested resource.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ApiStandardsErrorResponse'
              examples:
                Forbidden:
                  $ref: '#/components/examples/Forbidden'
        '500':
          description: |
            An error occurred on the server side.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ApiStandardsErrorResponse'
              examples:
                InternalServerError:
                  $ref: '#/components/examples/InternalServerError'
      security:
        - AmOAuth2:
            - sfcc.cdn-zones.rw
  /organizations/{organizationId}/zones/{zoneId}/speed-settings:
    get:
      summary: Retrieve the speed settings for a zone.
      operationId: getSpeedSettings
      parameters:
        - $ref: '#/components/parameters/zoneId'
        - $ref: '#/components/parameters/organizationId'
      responses:
        '200':
          description: Successfully returned the speed settings requested by the caller.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SpeedSettingsEnvelope'
              examples:
                SpeedSettingsResponse:
                  $ref: '#/components/examples/SpeedSettingsResponse'
        '401':
          description: |
            The caller is not authorized to access the requested resource.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ApiStandardsErrorResponse'
              examples:
                Unauthorized:
                  $ref: '#/components/examples/Unauthorized'
        '403':
          description: |
            The caller does not have access to the requested resource.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ApiStandardsErrorResponse'
              examples:
                Forbidden:
                  $ref: '#/components/examples/Forbidden'
        '404':
          description: |
            The resource requested by the caller was not found.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ApiStandardsErrorResponse'
              examples:
                NotFound:
                  $ref: '#/components/examples/NotFound'
        '500':
          description: |
            An error occurred on the server side.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ApiStandardsErrorResponse'
              examples:
                InternalServerError:
                  $ref: '#/components/examples/InternalServerError'
      security:
        - AmOAuth2:
            - sfcc.cdn-zones
            - sfcc.cdn-zones.rw
    patch:
      summary: Update the speed settings for a zone.
      operationId: updateSpeedSettings
      parameters:
        - $ref: '#/components/parameters/zoneId'
        - $ref: '#/components/parameters/organizationId'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SpeedSetting'
            examples:
              SpeedSettingsPatchRequestBodyExample:
                $ref: '#/components/examples/SpeedSettingsPatchRequestBodyExample'
        required: true
      responses:
        '200':
          description: Successfully updated the speed settings requested by the caller.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SpeedSettingsEnvelope'
              examples:
                SpeedSettingsResponse:
                  $ref: '#/components/examples/SpeedSettingsResponse'
        '400':
          description: |
            The request sent by the caller is not valid.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ApiStandardsErrorResponse'
              examples:
                BadRequest:
                  $ref: '#/components/examples/BadRequest'
        '401':
          description: |
            The caller is not authorized to access the requested resource.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ApiStandardsErrorResponse'
              examples:
                Unauthorized:
                  $ref: '#/components/examples/Unauthorized'
        '403':
          description: |
            The caller does not have access to the requested resource.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ApiStandardsErrorResponse'
              examples:
                Forbidden:
                  $ref: '#/components/examples/Forbidden'
        '404':
          description: |
            The resource requested by the caller was not found.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ApiStandardsErrorResponse'
              examples:
                NotFound:
                  $ref: '#/components/examples/NotFound'
        '500':
          description: |
            An error occurred on the server side.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ApiStandardsErrorResponse'
              examples:
                InternalServerError:
                  $ref: '#/components/examples/InternalServerError'
      security:
        - AmOAuth2:
            - sfcc.cdn-zones.rw
  /organizations/{organizationId}/zones/{zoneId}/security-settings:
    get:
      summary: Retrieve the security settings for a zone.
      operationId: getSecuritySettings
      parameters:
        - $ref: '#/components/parameters/zoneId'
        - $ref: '#/components/parameters/organizationId'
      responses:
        '200':
          description: Successfully returned security settings for zone.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SecuritySettingsEnvelope'
              examples:
                SecuritySettingsResponse:
                  $ref: '#/components/examples/SecuritySettingsResponse'
        '400':
          description: |
            The request sent by the caller is not valid.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ApiStandardsErrorResponse'
              examples:
                BadRequest:
                  $ref: '#/components/examples/BadRequest'
        '401':
          description: |
            The caller is not authorized to access the requested resource.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ApiStandardsErrorResponse'
              examples:
                Unauthorized:
                  $ref: '#/components/examples/Unauthorized'
        '403':
          description: |
            The caller does not have access to the requested resource.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ApiStandardsErrorResponse'
              examples:
                Forbidden:
                  $ref: '#/components/examples/Forbidden'
        '500':
          description: |
            An error occurred on the server side.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ApiStandardsErrorResponse'
              examples:
                InternalServerError:
                  $ref: '#/components/examples/InternalServerError'
      security:
        - AmOAuth2:
            - sfcc.cdn-zones
            - sfcc.cdn-zones.rw
    patch:
      summary: Update the security settings for a zone.
      operationId: updateSecuritySettings
      parameters:
        - $ref: '#/components/parameters/zoneId'
        - $ref: '#/components/parameters/organizationId'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SecuritySetting'
            examples:
              SecuritySettingsUpdateRequestBodyExample:
                $ref: '#/components/examples/SecuritySettingsUpdateRequestBodyExample'
        required: true
      responses:
        '200':
          description: Successfully updated the security settings.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SecuritySettingsEnvelope'
              examples:
                SecuritySettingsResponse:
                  $ref: '#/components/examples/SecuritySettingsResponse'
        '400':
          description: |
            The request sent by the caller is not valid.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ApiStandardsErrorResponse'
              examples:
                BadRequest:
                  $ref: '#/components/examples/BadRequest'
        '401':
          description: |
            The caller is not authorized to access the requested resource.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ApiStandardsErrorResponse'
              examples:
                Unauthorized:
                  $ref: '#/components/examples/Unauthorized'
        '403':
          description: |
            The caller does not have access to the requested resource.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ApiStandardsErrorResponse'
              examples:
                Forbidden:
                  $ref: '#/components/examples/Forbidden'
        '500':
          description: |
            An error occurred on the server side.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ApiStandardsErrorResponse'
              examples:
                InternalServerError:
                  $ref: '#/components/examples/InternalServerError'
      security:
        - AmOAuth2:
            - sfcc.cdn-zones.rw
  /organizations/{organizationId}/zones/{zoneId}/cachepurge:
    post:
      summary: Purge the cache for the host specified in the request body.
      operationId: cachePurge
      parameters:
        - $ref: '#/components/parameters/zoneId'
        - $ref: '#/components/parameters/organizationId'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CachePurgeRequest'
        required: true
      responses:
        '200':
          description: Successfully returned the complete operationId statuses for the rule list operations that the server processed.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CachePurgeResponseEnvelope'
        '401':
          description: |
            The caller is not authorized to access the requested resource.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ApiStandardsErrorResponse'
              examples:
                Unauthorized:
                  $ref: '#/components/examples/Unauthorized'
        '403':
          description: |
            The caller does not have access to the requested resource.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ApiStandardsErrorResponse'
              examples:
                Forbidden:
                  $ref: '#/components/examples/Forbidden'
        '404':
          description: |
            The resource requested by the caller was not found.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ApiStandardsErrorResponse'
              examples:
                NotFound:
                  $ref: '#/components/examples/NotFound'
        '500':
          description: |
            An error occurred on the server side.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ApiStandardsErrorResponse'
              examples:
                InternalServerError:
                  $ref: '#/components/examples/InternalServerError'
      security:
        - AmOAuth2:
            - sfcc.cdn-zones.rw
  /organizations/{organizationId}/zones/{zoneId}/ocapicachingpagerule:
    patch:
      summary: Enable or disable the OCAPI Caching page rule.
      operationId: toggleOcapiCachingPageRule
      parameters:
        - $ref: '#/components/parameters/zoneId'
        - $ref: '#/components/parameters/organizationId'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/OCAPICachingToggleRequest'
        required: true
      responses:
        '200':
          description: Successfully returned the current state of the OCAPI Caching page rule.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OCAPICachingToggleRequest'
        '400':
          description: |
            The request sent by the caller is not valid.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ApiStandardsErrorResponse'
              examples:
                BadRequest:
                  $ref: '#/components/examples/BadRequest'
        '401':
          description: |
            The caller is not authorized to access the requested resource.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ApiStandardsErrorResponse'
              examples:
                Unauthorized:
                  $ref: '#/components/examples/Unauthorized'
        '403':
          description: |
            The caller does not have access to the requested resource.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ApiStandardsErrorResponse'
              examples:
                Forbidden:
                  $ref: '#/components/examples/Forbidden'
        '404':
          description: |
            The resource requested by the caller was not found.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ApiStandardsErrorResponse'
              examples:
                NotFound:
                  $ref: '#/components/examples/NotFound'
        '500':
          description: |
            An error occurred on the server side.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ApiStandardsErrorResponse'
              examples:
                InternalServerError:
                  $ref: '#/components/examples/InternalServerError'
      security:
        - AmOAuth2:
            - sfcc.cdn-zones.rw
  /organizations/{organizationId}/zones/{zoneId}/certificates:
    get:
      summary: List certificates for a zone. For information on automatic certificates, see [eCDN Automatic Certificates](https://developer.salesforce.com/docs/commerce/commerce-api/guide/cdn-zones-automatic-certs.html).
      operationId: getCertificates
      parameters:
        - $ref: '#/components/parameters/zoneId'
        - $ref: '#/components/parameters/organizationId'
        - name: limit
          in: query
          required: false
          schema:
            type: integer
            format: int32
            default: 25
            maximum: 50
          description: Maximum records to retrieve per request, not to exceed 50. Defaults to 25.
        - name: offset
          in: query
          required: false
          schema:
            type: integer
            format: int64
            default: 0
            minimum: 0
          description: Used to retrieve the results based on a particular resource offset.
      responses:
        '200':
          description: Successfully retrieved the list of certificates for the specified zone.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CertificatesEnvelope'
              examples:
                CertificatesGetResponse1:
                  $ref: '#/components/examples/CertificatesGetResponse1'
                CertificatesGetResponse2:
                  $ref: '#/components/examples/CertificatesGetResponse2'
        '401':
          description: |
            The caller is not authorized to access the requested resource.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ApiStandardsErrorResponse'
              examples:
                Unauthorized:
                  $ref: '#/components/examples/Unauthorized'
        '403':
          description: |
            The caller does not have access to the requested resource.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ApiStandardsErrorResponse'
              examples:
                Forbidden:
                  $ref: '#/components/examples/Forbidden'
        '404':
          description: |
            The resource requested by the caller was not found.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ApiStandardsErrorResponse'
              examples:
                NotFound:
                  $ref: '#/components/examples/NotFound'
        '500':
          description: |
            An error occurred on the server side.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ApiStandardsErrorResponse'
              examples:
                InternalServerError:
                  $ref: '#/components/examples/InternalServerError'
      security:
        - AmOAuth2:
            - sfcc.cdn-zones
            - sfcc.cdn-zones.rw
    post:
      summary: Add certificate for a zone. For information on automatic certificates, see [eCDN Automatic Certificates](https://developer.salesforce.com/docs/commerce/commerce-api/guide/cdn-zones-automatic-certs.html).
      operationId: addCertificateForZone
      parameters:
        - $ref: '#/components/parameters/zoneId'
        - $ref: '#/components/parameters/organizationId'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CertificateRequest'
            examples:
              CertificatePostRequestBodyExample:
                $ref: '#/components/examples/CertificatePostRequestBodyExample'
        required: true
      responses:
        '201':
          description: Returned information about the added certificate.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CertificateEnvelope'
              examples:
                CertificatePostResponse1:
                  $ref: '#/components/examples/CertificatePostResponse1'
                CertificatePostResponse2:
                  $ref: '#/components/examples/CertificatePostResponse2'
        '400':
          description: |
            The request sent by the caller is not valid.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ApiStandardsErrorResponse'
              examples:
                BadRequest:
                  $ref: '#/components/examples/BadRequest'
        '401':
          description: |
            The caller is not authorized to access the requested resource.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ApiStandardsErrorResponse'
              examples:
                Unauthorized:
                  $ref: '#/components/examples/Unauthorized'
        '403':
          description: |
            The caller does not have access to the requested resource.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ApiStandardsErrorResponse'
              examples:
                Forbidden:
                  $ref: '#/components/examples/Forbidden'
        '404':
          description: |
            The resource requested by the caller was not found.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ApiStandardsErrorResponse'
              examples:
                NotFound:
                  $ref: '#/components/examples/NotFound'
        '409':
          description: |
            The request sent by the caller has conflicts.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ApiStandardsErrorResponse'
              examples:
                Conflict:
                  $ref: '#/components/examples/Conflict'
        '500':
          description: |
            An error occurred on the server side.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ApiStandardsErrorResponse'
              examples:
                InternalServerError:
                  $ref: '#/components/examples/InternalServerError'
      security:
        - AmOAuth2:
            - sfcc.cdn-zones.rw
  /organizations/{organizationId}/zones/{zoneId}/certificates/{certificateId}:
    delete:
      summary: Delete a custom hostname and the certificate associated with it. Note that a valid certificate is necessary for a site to remain operational. DELETING A CERTIFICATE THAT IS IN USE CAN RESULT IN DOWNTIME.
      operationId: deleteCertificate
      parameters:
        - $ref: '#/components/parameters/certificateId'
        - $ref: '#/components/parameters/zoneId'
        - $ref: '#/components/parameters/organizationId'
      responses:
        '204':
          description: Successfully deleted the custom hostname and the certificate associated with it.
        '401':
          description: |
            The caller is not authorized to access the requested resource.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ApiStandardsErrorResponse'
              examples:
                Unauthorized:
                  $ref: '#/components/examples/Unauthorized'
        '403':
          description: |
            The caller does not have access to the requested resource.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ApiStandardsErrorResponse'
              examples:
                Forbidden:
                  $ref: '#/components/examples/Forbidden'
        '404':
          description: |
            The resource requested by the caller was not found.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ApiStandardsErrorResponse'
              examples:
                NotFound:
                  $ref: '#/components/examples/NotFound'
        '500':
          description: |
            An error occurred on the server side.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ApiStandardsErrorResponse'
              examples:
                InternalServerError:
                  $ref: '#/components/examples/InternalServerError'
      security:
        - AmOAuth2:
            - sfcc.cdn-zones.rw
    patch:
      summary: Update the certificate for a given certificateId for a particular zone. For information on automatic certificates, see [eCDN Automatic Certificates](https://developer.salesforce.com/docs/commerce/commerce-api/guide/cdn-zones-automatic-certs.html).
      operationId: updateCertificate
      parameters:
        - $ref: '#/components/parameters/certificateId'
        - $ref: '#/components/parameters/zoneId'
        - $ref: '#/components/parameters/organizationId'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CertificateRequest'
            examples:
              CertificateUpdateRequestBodyExample:
                $ref: '#/components/examples/CertificateUpdateRequestBodyExample'
        required: true
      responses:
        '200':
          description: Successfully updated the certificate requested by the caller.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CertificateEnvelope'
              examples:
                CertificateUpdateResponse1:
                  $ref: '#/components/examples/CertificateUpdateResponse1'
                CertificateUpdateResponse2:
                  $ref: '#/components/examples/CertificateUpdateResponse2'
        '400':
          description: |
            The request sent by the caller is not valid.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ApiStandardsErrorResponse'
              examples:
                BadRequest:
                  $ref: '#/components/examples/BadRequest'
        '401':
          description: |
            The caller is not authorized to access the requested resource.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ApiStandardsErrorResponse'
              examples:
                Unauthorized:
                  $ref: '#/components/examples/Unauthorized'
        '403':
          description: |
            The caller does not have access to the requested resource.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ApiStandardsErrorResponse'
              examples:
                Forbidden:
                  $ref: '#/components/examples/Forbidden'
        '500':
          description: |
            An error occurred on the server side.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ApiStandardsErrorResponse'
              examples:
                InternalServerError:
                  $ref: '#/components/examples/InternalServerError'
      security:
        - AmOAuth2:
            - sfcc.cdn-zones.rw
  /organizations/{organizationId}/zones/{zoneId}/certificates/custom-hostnames/{customHostnameId}:
    patch:
      summary: Trigger the validation of a custom hostname.
      operationId: validateCustomHostname
      parameters:
        - $ref: '#/components/parameters/customHostnameId'
        - $ref: '#/components/parameters/zoneId'
        - $ref: '#/components/parameters/organizationId'
      responses:
        '200':
          description: Successfully triggered the custom hostname validation process.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CustomHostnameValidationEnvelope'
              examples:
                CustomHostnamesPatchResponse:
                  $ref: '#/components/examples/CustomHostnamesPatchResponse'
        '400':
          description: |
            The request sent by the caller is not valid.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ApiStandardsErrorResponse'
              examples:
                BadRequest:
                  $ref: '#/components/examples/BadRequest'
        '401':
          description: |
            The caller is not authorized to access the requested resource.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ApiStandardsErrorResponse'
              examples:
                Unauthorized:
                  $ref: '#/components/examples/Unauthorized'
        '403':
          description: |
            The caller does not have access to the requested resource.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ApiStandardsErrorResponse'
              examples:
                Forbidden:
                  $ref: '#/components/examples/Forbidden'
        '500':
          description: |
            An error occurred on the server side.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ApiStandardsErrorResponse'
              examples:
                InternalServerError:
                  $ref: '#/components/examples/InternalServerError'
      security:
        - AmOAuth2:
            - sfcc.cdn-zones.rw
  /organizations/{organizationId}/zones/{zoneId}/mrtrules:
    get:
      summary: Get all MRT rules. See [eCDN Rules for Hybrid Implementations](https://developer.salesforce.com/docs/commerce/pwa-kit-managed-runtime/guide/ecdn-rules-for-phased-headless-rollout.html).
      operationId: getMrtRules
      parameters:
        - $ref: '#/components/parameters/zoneId'
        - $ref: '#/components/parameters/organizationId'
      responses:
        '200':
          description: Successfully retrieved all MRT rules.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MRTRulesResponseEnvelope'
              examples:
                MrtRulesGetResponse:
                  $ref: '#/components/examples/MrtRulesGetResponse'
        '400':
          description: |
            The request sent by the caller is not valid.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ApiStandardsErrorResponse'
              examples:
                BadRequest:
                  $ref: '#/components/examples/BadRequest'
        '401':
          description: |
            The caller is not authorized to access the requested resource.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ApiStandardsErrorResponse'
              examples:
                Unauthorized:
                  $ref: '#/components/examples/Unauthorized'
        '403':
          description: |
            The caller does not have access to the requested resource.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ApiStandardsErrorResponse'
              examples:
                Forbidden:
                  $ref: '#/components/examples/Forbidden'
        '404':
          description: |
            The resource requested by the caller was not found.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ApiStandardsErrorResponse'
              examples:
                NotFound:
                  $ref: '#/components/examples/NotFound'
        '500':
          description: |
            An error occurred on the server side.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ApiStandardsErrorResponse'
              examples:
                InternalServerError:
                  $ref: '#/components/examples/InternalServerError'
      security:
        - AmOAuth2:
            - sfcc.cdn-zones
            - sfcc.cdn-zones.rw
    post:
      summary: Create MRT rules to route to a new MRT environment. See [eCDN Rules for Hybrid Implementations](https://developer.salesforce.com/docs/commerce/pwa-kit-managed-runtime/guide/ecdn-rules-for-phased-headless-rollout.html).
      operationId: createMrtRules
      parameters:
        - $ref: '#/components/parameters/zoneId'
        - $ref: '#/components/parameters/organizationId'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MRTRulesPostRequest'
            examples:
              MrtRulesPostRequestSingleHostnameBodyExample:
                $ref: '#/components/examples/MrtRulesPostRequestSingleHostnameBodyExample'
              MrtRulesPostRequestMultipleHostnamesBodyExample:
                $ref: '#/components/examples/MrtRulesPostRequestMultipleHostnamesBodyExample'
        required: true
      responses:
        '201':
          description: Created MRT rules to route to a new MRT environment.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MRTRulesResponseEnvelope'
              examples:
                MrtRulesPostResponseSingleHostname:
                  $ref: '#/components/examples/MrtRulesPostResponseSingleHostname'
                MrtRulesPostResponseMultipleHostnames:
                  $ref: '#/components/examples/MrtRulesPostResponseMultipleHostnames'
        '400':
          description: |
            The request sent by the caller is not valid.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ApiStandardsErrorResponse'
              examples:
                BadRequest:
                  $ref: '#/components/examples/BadRequest'
        '401':
          description: |
            The caller is not authorized to access the requested resource.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ApiStandardsErrorResponse'
              examples:
                Unauthorized:
                  $ref: '#/components/examples/Unauthorized'
        '403':
          description: |
            The caller does not have access to the requested resource.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ApiStandardsErrorResponse'
              examples:
                Forbidden:
                  $ref: '#/components/examples/Forbidden'
        '404':
          description: |
            The resource requested by the caller was not found.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ApiStandardsErrorResponse'
              examples:
                NotFound:
                  $ref: '#/components/examples/NotFound'
        '500':
          description: |
            An error occurred on the server side.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ApiStandardsErrorResponse'
              examples:
                InternalServerError:
                  $ref: '#/components/examples/InternalServerError'
      security:
        - AmOAuth2:
            - sfcc.cdn-zones.rw
    patch:
      summary: Update the MRT environment hostname or add MRT rules to route to an existing MRT environment.  See [eCDN Rules for Hybrid Implementations](https://developer.salesforce.com/docs/commerce/pwa-kit-managed-runtime/guide/ecdn-rules-for-phased-headless-rollout.html).
      operationId: updateMrtRuleset
      parameters:
        - $ref: '#/components/parameters/zoneId'
        - $ref: '#/components/parameters/organizationId'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MRTRulesetPatchRequest'
            examples:
              MrtRulesetPatchRequestUpdateHostnameBodyExample:
                $ref: '#/components/examples/MrtRulesetPatchRequestUpdateHostnameBodyExample'
              MrtRulesetPatchRequestAddRulesBodyExample:
                $ref: '#/components/examples/MrtRulesetPatchRequestAddRulesBodyExample'
        required: true
      responses:
        '200':
          description: Updated the MRT environment hostname or added MRT rules to route to an existing MRT environment.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MRTRulesResponseEnvelope'
              examples:
                MrtRulesetPatchResponseUpdateHostname:
                  $ref: '#/components/examples/MrtRulesetPatchResponseUpdateHostname'
                MrtRulesetPatchResponseAddRules:
                  $ref: '#/components/examples/MrtRulesetPatchResponseAddRules'
        '400':
          description: |
            The request sent by the caller is not valid.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ApiStandardsErrorResponse'
              examples:
                BadRequest:
                  $ref: '#/components/examples/BadRequest'
        '401':
          description: |
            The caller is not authorized to access the requested resource.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ApiStandardsErrorResponse'
              examples:
                Unauthorized:
                  $ref: '#/components/examples/Unauthorized'
        '403':
          description: |
            The caller does not have access to the requested resource.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ApiStandardsErrorResponse'
              examples:
                Forbidden:
                  $ref: '#/components/examples/Forbidden'
        '404':
          description: |
            The resource requested by the caller was not found.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ApiStandardsErrorResponse'
              examples:
                NotFound:
                  $ref: '#/components/examples/NotFound'
        '500':
          description: |
            An error occurred on the server side.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ApiStandardsErrorResponse'
              examples:
                InternalServerError:
                  $ref: '#/components/examples/InternalServerError'
      security:
        - AmOAuth2:
            - sfcc.cdn-zones.rw
  /organizations/{organizationId}/zones/{zoneId}/mrtrules/{rulesetId}:
    delete:
      summary: Delete the MRT ruleset and all rules within the ruleset. See [eCDN Rules for Hybrid Implementations](https://developer.salesforce.com/docs/commerce/pwa-kit-managed-runtime/guide/ecdn-rules-for-phased-headless-rollout.html).
      operationId: deleteMrtRuleset
      parameters:
        - $ref: '#/components/parameters/rulesetId'
        - $ref: '#/components/parameters/zoneId'
        - $ref: '#/components/parameters/organizationId'
      responses:
        '204':
          description: Deleted the MRT ruleset and all rules within the ruleset.
        '401':
          description: |
            The caller is not authorized to access the requested resource.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ApiStandardsErrorResponse'
              examples:
                Unauthorized:
                  $ref: '#/components/examples/Unauthorized'
        '403':
          description: |
            The caller does not have access to the requested resource.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ApiStandardsErrorResponse'
              examples:
                Forbidden:
                  $ref: '#/components/examples/Forbidden'
        '404':
          description: |
            The resource requested by the caller was not found.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ApiStandardsErrorResponse'
              examples:
                NotFound:
                  $ref: '#/components/examples/NotFound'
        '500':
          description: |
            An error occurred on the server side.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ApiStandardsErrorResponse'
              examples:
                InternalServerError:
                  $ref: '#/components/examples/InternalServerError'
      security:
        - AmOAuth2:
            - sfcc.cdn-zones.rw
  /organizations/{organizationId}/zones/{zoneId}/mrtrules/{rulesetId}/rules/{ruleId}:
    delete:
      summary: Delete an MRT rule. See [eCDN Rules for Hybrid Implementations](https://developer.salesforce.com/docs/commerce/pwa-kit-managed-runtime/guide/ecdn-rules-for-phased-headless-rollout.html).
      operationId: deleteMrtRule
      parameters:
        - $ref: '#/components/parameters/ruleId'
        - $ref: '#/components/parameters/rulesetId'
        - $ref: '#/components/parameters/zoneId'
        - $ref: '#/components/parameters/organizationId'
      responses:
        '204':
          description: Deleted an MRT rule.
        '401':
          description: |
            The caller is not authorized to access the requested resource.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ApiStandardsErrorResponse'
              examples:
                Unauthorized:
                  $ref: '#/components/examples/Unauthorized'
        '403':
          description: |
            The caller does not have access to the requested resource.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ApiStandardsErrorResponse'
              examples:
                Forbidden:
                  $ref: '#/components/examples/Forbidden'
        '404':
          description: |
            The resource requested by the caller was not found.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ApiStandardsErrorResponse'
              examples:
                NotFound:
                  $ref: '#/components/examples/NotFound'
        '500':
          description: |
            An error occurred on the server side.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ApiStandardsErrorResponse'
              examples:
                InternalServerError:
                  $ref: '#/components/examples/InternalServerError'
      security:
        - AmOAuth2:
            - sfcc.cdn-zones.rw
    patch:
      summary: Update an MRT rule. See [eCDN Rules for Hybrid Implementations](https://developer.salesforce.com/docs/commerce/pwa-kit-managed-runtime/guide/ecdn-rules-for-phased-headless-rollout.html).
      operationId: updateMrtRule
      parameters:
        - $ref: '#/components/parameters/ruleId'
        - $ref: '#/components/parameters/rulesetId'
        - $ref: '#/components/parameters/zoneId'
        - $ref: '#/components/parameters/organizationId'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MRTRulePatchRequest'
            examples:
              MrtRulePatchRequestBodyExample:
                $ref: '#/components/examples/MrtRulePatchRequestBodyExample'
        required: true
      responses:
        '200':
          description: Successfully updated the MRT rule.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MRTRulesResponseEnvelope'
              examples:
                MrtRulePatchResponse:
                  $ref: '#/components/examples/MrtRulePatchResponse'
        '400':
          description: |
            The request sent by the caller is not valid.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ApiStandardsErrorResponse'
              examples:
                BadRequest:
                  $ref: '#/components/examples/BadRequest'
        '401':
          description: |
            The caller is not authorized to access the requested resource.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ApiStandardsErrorResponse'
              examples:
                Unauthorized:
                  $ref: '#/components/examples/Unauthorized'
        '403':
          description: |
            The caller does not have access to the requested resource.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ApiStandardsErrorResponse'
              examples:
                Forbidden:
                  $ref: '#/components/examples/Forbidden'
        '404':
          description: |
            The resource requested by the caller was not found.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ApiStandardsErrorResponse'
              examples:
                NotFound:
                  $ref: '#/components/examples/NotFound'
        '500':
          description: |
            An error occurred on the server side.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ApiStandardsErrorResponse'
              examples:
                InternalServerError:
                  $ref: '#/components/examples/InternalServerError'
      security:
        - AmOAuth2:
            - sfcc.cdn-zones.rw
  /organizations/{organizationId}/zones/{zoneId}/logpush/ownership:
    post:
      summary: Create Logpush ownership token file. See [eCDN Logpush](https://developer.salesforce.com/docs/commerce/commerce-api/guide/cdn-zones-logpush.html).
      operationId: createLogpushOwnership
      parameters:
        - $ref: '#/components/parameters/zoneId'
        - $ref: '#/components/parameters/organizationId'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LogpushOwnershipPostRequest'
            examples:
              LogpushOwnershipPostRequestBodyExample:
                $ref: '#/components/examples/LogpushOwnershipPostRequestBodyExample'
        required: true
      responses:
        '201':
          description: Created a new Logpush Ownership token.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LogpushOwnershipPostResponse'
              examples:
                LogpushOwnershipPostResponse:
                  $ref: '#/components/examples/LogpushOwnershipPostResponse'
        '400':
          description: |
            The request sent by the caller is not valid.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ApiStandardsErrorResponse'
              examples:
                BadRequest:
                  $ref: '#/components/examples/BadRequest'
        '401':
          description: |
            The caller is not authorized to access the requested resource.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ApiStandardsErrorResponse'
              examples:
                Unauthorized:
                  $ref: '#/components/examples/Unauthorized'
        '403':
          description: |
            The caller does not have access to the requested resource.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ApiStandardsErrorResponse'
              examples:
                Forbidden:
                  $ref: '#/components/examples/Forbidden'
        '404':
          description: |
            The resource requested by the caller was not found.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ApiStandardsErrorResponse'
              examples:
                NotFound:
                  $ref: '#/components/examples/NotFound'
        '500':
          description: |
            An error occurred on the server side.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ApiStandardsErrorResponse'
              examples:
                InternalServerError:
                  $ref: '#/components/examples/InternalServerError'
      security:
        - AmOAuth2:
            - sfcc.cdn-zones.rw
  /organizations/{organizationId}/zones/{zoneId}/logpush/jobs:
    get:
      summary: List Logpush job. See [eCDN Logpush](https://developer.salesforce.com/docs/commerce/commerce-api/guide/cdn-zones-logpush.html).
      operationId: listLogpushJob
      parameters:
        - $ref: '#/components/parameters/zoneId'
        - $ref: '#/components/parameters/organizationId'
      responses:
        '200':
          description: Returned all jobs with details for the zone.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LogpushJobsEnvelope'
              examples:
                LogpushGetListJob:
                  $ref: '#/components/examples/LogpushGetListJob'
        '400':
          description: |
            The request sent by the caller is not valid.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ApiStandardsErrorResponse'
              examples:
                BadRequest:
                  $ref: '#/components/examples/BadRequest'
        '401':
          description: |
            The caller is not authorized to access the requested resource.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ApiStandardsErrorResponse'
              examples:
                Unauthorized:
                  $ref: '#/components/examples/Unauthorized'
        '403':
          description: |
            The caller does not have access to the requested resource.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ApiStandardsErrorResponse'
              examples:
                Forbidden:
                  $ref: '#/components/examples/Forbidden'
        '404':
          description: |
            The resource requested by the caller was not found.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ApiStandardsErrorResponse'
              examples:
                NotFound:
                  $ref: '#/components/examples/NotFound'
        '500':
          description: |
            An error occurred on the server side.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ApiStandardsErrorResponse'
              examples:
                InternalServerError:
                  $ref: '#/components/examples/InternalServerError'
      security:
        - AmOAuth2:
            - sfcc.cdn-zones
            - sfcc.cdn-zones.rw
    post:
      summary: Create Logpush job. See [eCDN Logpush](https://developer.salesforce.com/docs/commerce/commerce-api/guide/cdn-zones-logpush.html).
      operationId: createLogpushJob
      parameters:
        - $ref: '#/components/parameters/zoneId'
        - $ref: '#/components/parameters/organizationId'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LogpushCreateRequest'
            examples:
              LogpushCreateRequestBodyExample1:
                $ref: '#/components/examples/LogpushCreateRequestBodyExample1'
              LogpushCreateRequestBodyExample2:
                $ref: '#/components/examples/LogpushCreateRequestBodyExample2'
              LogpushCreateRequestBodyExample3:
                $ref: '#/components/examples/LogpushCreateRequestBodyExample3'
        required: true
      responses:
        '201':
          description: Successfully created the Logpush job and returned the job details.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LogpushEnvelope'
              examples:
                LogpushCreateResponse1:
                  $ref: '#/components/examples/LogpushCreateResponse1'
                LogpushCreateResponse2:
                  $ref: '#/components/examples/LogpushCreateResponse2'
                LogpushCreateResponse3:
                  $ref: '#/components/examples/LogpushCreateResponse3'
        '400':
          description: |
            The request sent by the caller is not valid.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ApiStandardsErrorResponse'
              examples:
                BadRequest:
                  $ref: '#/components/examples/BadRequest'
        '401':
          description: |
            The caller is not authorized to access the requested resource.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ApiStandardsErrorResponse'
              examples:
                Unauthorized:
                  $ref: '#/components/examples/Unauthorized'
        '403':
          description: |
            The caller does not have access to therequested resource.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ApiStandardsErrorResponse'
              examples:
                Forbidden:
                  $ref: '#/components/examples/Forbidden'
        '404':
          description: |
            The resource requested by the caller was not found.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ApiStandardsErrorResponse'
              examples:
                NotFound:
                  $ref: '#/components/examples/NotFound'
        '500':
          description: |
            An error occurred on the server side.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ApiStandardsErrorResponse'
              examples:
                InternalServerError:
                  $ref: '#/components/examples/InternalServerError'
      security:
        - AmOAuth2:
            - sfcc.cdn-zones.rw
  /organizations/{organizationId}/zones/{zoneId}/logpush/jobs/{jobId}:
    get:
      summary: Get Logpush job details. See [eCDN Logpush](https://developer.salesforce.com/docs/commerce/commerce-api/guide/cdn-zones-logpush.html).
      operationId: getLogpushJob
      parameters:
        - $ref: '#/components/parameters/jobId'
        - $ref: '#/components/parameters/zoneId'
        - $ref: '#/components/parameters/organizationId'
      responses:
        '200':
          description: Returned job details for the specified Logpush job ID.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LogpushEnvelope'
              examples:
                LogpushGetJobById1:
                  $ref: '#/components/examples/LogpushGetJobById1'
                LogpushGetJobById2:
                  $ref: '#/components/examples/LogpushGetJobById2'
                LogpushGetJobById3:
                  $ref: '#/components/examples/LogpushGetJobById3'
        '400':
          description: |
            The request sent by the caller is not valid.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ApiStandardsErrorResponse'
              examples:
                BadRequest:
                  $ref: '#/components/examples/BadRequest'
        '401':
          description: |
            The caller is not authorized to access the requested resource.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ApiStandardsErrorResponse'
              examples:
                Unauthorized:
                  $ref: '#/components/examples/Unauthorized'
        '403':
          description: |
            The caller does not have access to the requested resource.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ApiStandardsErrorResponse'
              examples:
                Forbidden:
                  $ref: '#/components/examples/Forbidden'
        '404':
          description: |
            The resource requested by the caller was not found.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ApiStandardsErrorResponse'
              examples:
                NotFound:
                  $ref: '#/components/examples/NotFound'
        '500':
          description: |
            An error occurred on the server side.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ApiStandardsErrorResponse'
              examples:
                InternalServerError:
                  $ref: '#/components/examples/InternalServerError'
      security:
        - AmOAuth2:
            - sfcc.cdn-zones
            - sfcc.cdn-zones.rw
    put:
      summary: Update Logpush job. See [eCDN Logpush](https://developer.salesforce.com/docs/commerce/commerce-api/guide/cdn-zones-logpush.html).
      operationId: updateLogpushJob
      parameters:
        - $ref: '#/components/parameters/jobId'
        - $ref: '#/components/parameters/zoneId'
        - $ref: '#/components/parameters/organizationId'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LogpushUpdateRequest'
            examples:
              LogpushUpdateRequestBodyExample:
                $ref: '#/components/examples/LogpushUpdateRequestBodyExample'
        required: true
      responses:
        '200':
          description: Successfully enabled or disabled the Logpush job and returned job details.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LogpushEnvelope'
              examples:
                LogpushUpdateResponse:
                  $ref: '#/components/examples/LogpushUpdateResponse'
        '401':
          description: |
            The caller is not authorized to access the requested resource.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ApiStandardsErrorResponse'
              examples:
                Unauthorized:
                  $ref: '#/components/examples/Unauthorized'
        '403':
          description: |
            The caller does not have access to the requested resource.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ApiStandardsErrorResponse'
              examples:
                Forbidden:
                  $ref: '#/components/examples/Forbidden'
        '404':
          description: |
            The resource requested by the caller was not found.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ApiStandardsErrorResponse'
              examples:
                NotFound:
                  $ref: '#/components/examples/NotFound'
        '500':
          description: |
            An error occurred on the server side.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ApiStandardsErrorResponse'
              examples:
                InternalServerError:
                  $ref: '#/components/examples/InternalServerError'
      security:
        - AmOAuth2:
            - sfcc.cdn-zones.rw
    delete:
      summary: Delete Logpush job by job ID. See [eCDN Logpush](https://developer.salesforce.com/docs/commerce/commerce-api/guide/cdn-zones-logpush.html).
      operationId: deleteLogpushJob
      parameters:
        - $ref: '#/components/parameters/jobId'
        - $ref: '#/components/parameters/zoneId'
        - $ref: '#/components/parameters/organizationId'
      responses:
        '204':
          description: Deleted the Logpush job for the specified job ID.
        '401':
          description: |
            The caller is not authorized to access the requested resource.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ApiStandardsErrorResponse'
              examples:
                Unauthorized:
                  $ref: '#/components/examples/Unauthorized'
        '403':
          description: |
            The caller does not have access to the requested resource.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ApiStandardsErrorResponse'
              examples:
                Forbidden:
                  $ref: '#/components/examples/Forbidden'
        '404':
          description: |
            The resource requested by the caller was not found.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ApiStandardsErrorResponse'
              examples:
                NotFound:
                  $ref: '#/components/examples/NotFound'
        '500':
          description: |
            An error occurred on the server side.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ApiStandardsErrorResponse'
              examples:
                InternalServerError:
                  $ref: '#/components/examples/InternalServerError'
      security:
        - AmOAuth2:
            - sfcc.cdn-zones.rw
  /organizations/{organizationId}/zones/{zoneId}/firewall/waf/packages/owasp:
    get:
      summary: Get a OWASP ModSecurity Core Rule Set.
      operationId: getOwaspWafPackage
      parameters:
        - $ref: '#/components/parameters/zoneId'
        - $ref: '#/components/parameters/organizationId'
      responses:
        '200':
          description: Successfully retrieved the OWASP ModSecurity Core Rule Set.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WAFRulePackageEnvelope'
              examples:
                WafPackagesGetExample:
                  $ref: '#/components/examples/WafPackagesGetExample'
        '400':
          description: |
            The request sent by the caller is not valid.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ApiStandardsErrorResponse'
              examples:
                BadRequest:
                  $ref: '#/components/examples/BadRequest'
        '401':
          description: |
            The caller is not authorized to access the requested resource.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ApiStandardsErrorResponse'
              examples:
                Unauthorized:
                  $ref: '#/components/examples/Unauthorized'
        '403':
          description: |
            The caller does not have access to the requested resource.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ApiStandardsErrorResponse'
              examples:
                Forbidden:
                  $ref: '#/components/examples/Forbidden'
        '404':
          description: |
            The resource requested by the caller was not found.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ApiStandardsErrorResponse'
              examples:
                NotFound:
                  $ref: '#/components/examples/NotFound'
        '500':
          description: |
            An error occurred on the server side.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ApiStandardsErrorResponse'
              examples:
                InternalServerError:
                  $ref: '#/components/examples/InternalServerError'
      security:
        - AmOAuth2:
            - sfcc.cdn-zones
            - sfcc.cdn-zones.rw
    patch:
      summary: Patch a OWASP ModSecurity Core Rule Set.
      operationId: patchOwaspWafPackage
      parameters:
        - $ref: '#/components/parameters/zoneId'
        - $ref: '#/components/parameters/organizationId'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/WafPackagePatchRequest'
            examples:
              WafPackagesPatchRequestBodyExample:
                $ref: '#/components/examples/WafPackagesPatchRequestBodyExample'
        required: true
      responses:
        '200':
          description: Successfully patched the OWASP ModSecurity Core Rule Set.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WAFRulePackageEnvelope'
              examples:
                WafPackagesGetExample:
                  $ref: '#/components/examples/WafPackagesGetExample'
        '400':
          description: |
            The request sent by the caller is not valid.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ApiStandardsErrorResponse'
              examples:
                BadRequest:
                  $ref: '#/components/examples/BadRequest'
        '401':
          description: |
            The caller is not authorized to access the requested resource.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ApiStandardsErrorResponse'
              examples:
                Unauthorized:
                  $ref: '#/components/examples/Unauthorized'
        '403':
          description: |
            The caller does not have access to the requested resource.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ApiStandardsErrorResponse'
              examples:
                Forbidden:
                  $ref: '#/components/examples/Forbidden'
        '404':
          description: |
            The resource requested by the caller was not found.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ApiStandardsErrorResponse'
              examples:
                NotFound:
                  $ref: '#/components/examples/NotFound'
        '500':
          description: |
            An error occurred on the server side.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ApiStandardsErrorResponse'
              examples:
                InternalServerError:
                  $ref: '#/components/examples/InternalServerError'
      security:
        - AmOAuth2:
            - sfcc.cdn-zones.rw
  /organizations/{organizationId}/zones/{zoneId}/firewall-custom/rules:
    get:
      summary: Retrieve existing custom rules. See [eCDN Custom Rules](https://developer.salesforce.com/docs/commerce/commerce-api/guide/cdn-zones-custom-rules.html).
      operationId: getCustomRules
      parameters:
        - $ref: '#/components/parameters/zoneId'
        - $ref: '#/components/parameters/organizationId'
        - name: limit
          in: query
          required: false
          schema:
            type: integer
            format: int32
            default: 25
            maximum: 50
          description: Maximum records to retrieve per request, not to exceed 50. Defaults to 25.
        - name: offset
          in: query
          required: false
          schema:
            type: integer
            format: int64
            default: 0
            minimum: 0
          description: Used to retrieve the results based on a particular resource offset.
      responses:
        '200':
          description: Successfully returned the list of custom rules requested by the caller.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CustomRulesEnvelope'
              examples:
                CustomRulesResponse:
                  $ref: '#/components/examples/CustomRulesResponse'
        '401':
          description: |
            The caller is not authorized to access the requested resource.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ApiStandardsErrorResponse'
              examples:
                Unauthorized:
                  $ref: '#/components/examples/Unauthorized'
        '403':
          description: |
            The caller does not have access to the requested resource.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ApiStandardsErrorResponse'
              examples:
                Forbidden:
                  $ref: '#/components/examples/Forbidden'
        '404':
          description: |
            The resource requested by the caller was not found.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ApiStandardsErrorResponse'
              examples:
                NotFound:
                  $ref: '#/components/examples/NotFound'
        '500':
          description: |
            An error occurred on the server side.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ApiStandardsErrorResponse'
              examples:
                InternalServerError:
                  $ref: '#/components/examples/InternalServerError'
      security:
        - AmOAuth2:
            - sfcc.cdn-zones
            - sfcc.cdn-zones.rw
    post:
      summary: Create a custom rule. See [eCDN Custom Rules](https://developer.salesforce.com/docs/commerce/commerce-api/guide/cdn-zones-custom-rules.html).
      operationId: createCustomRule
      parameters:
        - $ref: '#/components/parameters/zoneId'
        - $ref: '#/components/parameters/organizationId'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CustomRulesPostRequest'
            examples:
              CustomRulesPostRequestBodyExample:
                $ref: '#/components/examples/CustomRulesPostRequestBodyExample'
        required: true
      responses:
        '201':
          description: Successfully created the custom rule requested by the caller.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CustomRuleEnvelope'
              examples:
                CustomRuleResponse:
                  $ref: '#/components/examples/CustomRuleResponse'
        '400':
          description: |
            The request sent by the caller is not valid.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ApiStandardsErrorResponse'
              examples:
                BadRequest:
                  $ref: '#/components/examples/BadRequest'
        '401':
          description: |
            The caller is not authorized to access the requested resource.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ApiStandardsErrorResponse'
              examples:
                Unauthorized:
                  $ref: '#/components/examples/Unauthorized'
        '403':
          description: |
            The caller does not have access to the requested resource.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ApiStandardsErrorResponse'
              examples:
                Forbidden:
                  $ref: '#/components/examples/Forbidden'
        '404':
          description: |
            The resource requested by the caller was not found.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ApiStandardsErrorResponse'
              examples:
                NotFound:
                  $ref: '#/components/examples/NotFound'
        '500':
          description: |
            An error occurred on the server side.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ApiStandardsErrorResponse'
              examples:
                InternalServerError:
                  $ref: '#/components/examples/InternalServerError'
      security:
        - AmOAuth2:
            - sfcc.cdn-zones.rw
    patch:
      summary: Update the order of all existing custom rules. See [eCDN Custom Rules](https://developer.salesforce.com/docs/commerce/commerce-api/guide/cdn-zones-custom-rules.html).
      operationId: updateOrderOfCustomRules
      parameters:
        - $ref: '#/components/parameters/zoneId'
        - $ref: '#/components/parameters/organizationId'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CustomRulesPatchOrderRequest'
        required: true
      responses:
        '200':
          description: Successfully updated the order of existing custom rules as requested by the caller.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CustomRulesEnvelope'
              examples:
                CustomRulesResponse:
                  $ref: '#/components/examples/CustomRulesResponse'
        '400':
          description: |
            The request sent by the caller is not valid.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ApiStandardsErrorResponse'
              examples:
                BadRequest:
                  $ref: '#/components/examples/BadRequest'
        '401':
          description: |
            The caller is not authorized to access the requested resource.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ApiStandardsErrorResponse'
              examples:
                Unauthorized:
                  $ref: '#/components/examples/Unauthorized'
        '403':
          description: |
            The caller does not have access to the requested resource.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ApiStandardsErrorResponse'
              examples:
                Forbidden:
                  $ref: '#/components/examples/Forbidden'
        '404':
          description: |
            The resource requested by the caller was not found.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ApiStandardsErrorResponse'
              examples:
                NotFound:
                  $ref: '#/components/examples/NotFound'
        '500':
          description: |
            An error occurred on the server side.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ApiStandardsErrorResponse'
              examples:
                InternalServerError:
                  $ref: '#/components/examples/InternalServerError'
      security:
        - AmOAuth2:
            - sfcc.cdn-zones.rw
  /organizations/{organizationId}/zones/{zoneId}/firewall-custom/rules/{ruleId}:
    get:
      summary: Retrieve a specific custom rule. See [eCDN Custom Rules](https://developer.salesforce.com/docs/commerce/commerce-api/guide/cdn-zones-custom-rules.html).
      operationId: getCustomRule
      parameters:
        - $ref: '#/components/parameters/ruleId'
        - $ref: '#/components/parameters/zoneId'
        - $ref: '#/components/parameters/organizationId'
      responses:
        '200':
          description: Successfully returned the custom rule requested by the caller.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CustomRuleEnvelope'
              examples:
                CustomRuleResponse:
                  $ref: '#/components/examples/CustomRuleResponse'
        '401':
          description: |
            The caller is not authorized to access the requested resource.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ApiStandardsErrorResponse'
              examples:
                Unauthorized:
                  $ref: '#/components/examples/Unauthorized'
        '403':
          description: |
            The caller does not have access to the requested resource.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ApiStandardsErrorResponse'
              examples:
                Forbidden:
                  $ref: '#/components/examples/Forbidden'
        '404':
          description: |
            The resource requested by the caller was not found.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ApiStandardsErrorResponse'
              examples:
                NotFound:
                  $ref: '#/components/examples/NotFound'
        '500':
          description: |
            An error occurred on the server side.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ApiStandardsErrorResponse'
              examples:
                InternalServerError:
                  $ref: '#/components/examples/InternalServerError'
      security:
        - AmOAuth2:
            - sfcc.cdn-zones
            - sfcc.cdn-zones.rw
    delete:
      summary: Delete a specific custom rule. See [eCDN Custom Rules](https://developer.salesforce.com/docs/commerce/commerce-api/guide/cdn-zones-custom-rules.html).
      operationId: deleteCustomRule
      parameters:
        - $ref: '#/components/parameters/ruleId'
        - $ref: '#/components/parameters/zoneId'
        - $ref: '#/components/parameters/organizationId'
      responses:
        '204':
          description: Successfully deleted the custom rule requested by the caller.
        '401':
          description: |
            The caller is not authorized to access the requested resource.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ApiStandardsErrorResponse'
              examples:
                Unauthorized:
                  $ref: '#/components/examples/Unauthorized'
        '403':
          description: |
            The caller does not have access to the requested resource.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ApiStandardsErrorResponse'
              examples:
                Forbidden:
                  $ref: '#/components/examples/Forbidden'
        '404':
          description: |
            The resource requested by the caller was not found.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ApiStandardsErrorResponse'
              examples:
                NotFound:
                  $ref: '#/components/examples/NotFound'
        '500':
          description: |
            An error occurred on the server side.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ApiStandardsErrorResponse'
              examples:
                InternalServerError:
                  $ref: '#/components/examples/InternalServerError'
      security:
        - AmOAuth2:
            - sfcc.cdn-zones.rw
    patch:
      summary: Update a specific custom rule. See [eCDN Custom Rules](https://developer.salesforce.com/docs/commerce/commerce-api/guide/cdn-zones-custom-rules.html).
      operationId: updateCustomRule
      parameters:
        - $ref: '#/components/parameters/ruleId'
        - $ref: '#/components/parameters/zoneId'
        - $ref: '#/components/parameters/organizationId'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CustomRulesPatchRequest'
        required: true
      responses:
        '200':
          description: Successfully updated the custom rule requested by the caller.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CustomRuleEnvelope'
              examples:
                CustomRuleResponse:
                  $ref: '#/components/examples/CustomRuleResponse'
        '400':
          description: |
            The request sent by the caller is not valid.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ApiStandardsErrorResponse'
              examples:
                BadRequest:
                  $ref: '#/components/examples/BadRequest'
        '401':
          description: |
            The caller is not authorized to access the requested resource.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ApiStandardsErrorResponse'
              examples:
                Unauthorized:
                  $ref: '#/components/examples/Unauthorized'
        '403':
          description: |
            The caller does not have access to the requested resource.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ApiStandardsErrorResponse'
              examples:
                Forbidden:
                  $ref: '#/components/examples/Forbidden'
        '404':
          description: |
            The resource requested by the caller was not found.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ApiStandardsErrorResponse'
              examples:
                NotFound:
                  $ref: '#/components/examples/NotFound'
        '500':
          description: |
            An error occurred on the server side.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ApiStandardsErrorResponse'
              examples:
                InternalServerError:
                  $ref: '#/components/examples/InternalServerError'
      security:
        - AmOAuth2:
            - sfcc.cdn-zones.rw
  /organizations/{organizationId}/zones/{zoneId}/rate-limiting/rules:
    get:
      summary: Retrieve existing rate limiting rules. See [eCDN Rate Limiting Rules](https://developer.salesforce.com/docs/commerce/commerce-api/guide/cdn-rate-limiting-rules.html).
      operationId: getRateLimitingRules
      parameters:
        - $ref: '#/components/parameters/zoneId'
        - $ref: '#/components/parameters/organizationId'
      responses:
        '200':
          description: Successfully returned the list of rate limiting rules requested by the caller.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RateLimitingRulesEnvelope'
              examples:
                RateLimitingRulesResponse:
                  $ref: '#/components/examples/RateLimitingRulesResponse'
        '401':
          description: |
            The caller is not authorized to access the requested resource.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ApiStandardsErrorResponse'
              examples:
                Unauthorized:
                  $ref: '#/components/examples/Unauthorized'
        '403':
          description: |
            The caller does not have access to the requested resource.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ApiStandardsErrorResponse'
              examples:
                Forbidden:
                  $ref: '#/components/examples/Forbidden'
        '404':
          description: |
            The resource requested by the caller was not found.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ApiStandardsErrorResponse'
              examples:
                NotFound:
                  $ref: '#/components/examples/NotFound'
        '500':
          description: |
            An error occurred on the server side.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ApiStandardsErrorResponse'
              examples:
                InternalServerError:
                  $ref: '#/components/examples/InternalServerError'
      security:
        - AmOAuth2:
            - sfcc.cdn-zones
            - sfcc.cdn-zones.rw
    post:
      summary: Create a rate limiting rule. See [eCDN Rate Limiting Rules](https://developer.salesforce.com/docs/commerce/commerce-api/guide/cdn-rate-limiting-rules.html).
      operationId: createRateLimitingRule
      parameters:
        - $ref: '#/components/parameters/zoneId'
        - $ref: '#/components/parameters/organizationId'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RateLimitingRulesPostRequest'
            examples:
              RateLimitingRulesPostRequestBodyExample:
                $ref: '#/components/examples/RateLimitingRulesPostRequestBodyExample'
        required: true
      responses:
        '201':
          description: Successfully created the rate limiting rule requested by the caller.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RateLimitingRuleEnvelope'
              examples:
                RateLimitingRuleResponse:
                  $ref: '#/components/examples/RateLimitingRuleResponse'
        '400':
          description: |
            The request sent by the caller is not valid.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ApiStandardsErrorResponse'
              examples:
                BadRequest:
                  $ref: '#/components/examples/BadRequest'
        '401':
          description: |
            The caller is not authorized to access the requested resource.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ApiStandardsErrorResponse'
              examples:
                Unauthorized:
                  $ref: '#/components/examples/Unauthorized'
        '403':
          description: |
            The caller does not have access to the requested resource.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ApiStandardsErrorResponse'
              examples:
                Forbidden:
                  $ref: '#/components/examples/Forbidden'
        '404':
          description: |
            The resource requested by the caller was not found.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ApiStandardsErrorResponse'
              examples:
                NotFound:
                  $ref: '#/components/examples/NotFound'
        '500':
          description: |
            An error occurred on the server side.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ApiStandardsErrorResponse'
              examples:
                InternalServerError:
                  $ref: '#/components/examples/InternalServerError'
      security:
        - AmOAuth2:
            - sfcc.cdn-zones.rw
  /organizations/{organizationId}/zones/{zoneId}/rate-limiting/rules/{ruleId}:
    get:
      summary: Retrieve a specific rate limiting rule. See [eCDN Rate Limiting Rules](https://developer.salesforce.com/docs/commerce/commerce-api/guide/cdn-rate-limiting-rules.html).
      operationId: getRateLimitingRule
      parameters:
        - $ref: '#/components/parameters/ruleId'
        - $ref: '#/components/parameters/zoneId'
        - $ref: '#/components/parameters/organizationId'
      responses:
        '200':
          description: Successfully returned the rate limiting rule requested by the caller.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RateLimitingRuleEnvelope'
              examples:
                RateLimitingRuleResponse:
                  $ref: '#/components/examples/RateLimitingRuleResponse'
        '401':
          description: |
            The caller is not authorized to access the requested resource.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ApiStandardsErrorResponse'
              examples:
                Unauthorized:
                  $ref: '#/components/examples/Unauthorized'
        '403':
          description: |
            The caller does not have access to the requested resource.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ApiStandardsErrorResponse'
              examples:
                Forbidden:
                  $ref: '#/components/examples/Forbidden'
        '404':
          description: |
            The resource requested by the caller was not found.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ApiStandardsErrorResponse'
              examples:
                NotFound:
                  $ref: '#/components/examples/NotFound'
        '500':
          description: |
            An error occurred on the server side.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ApiStandardsErrorResponse'
              examples:
                InternalServerError:
                  $ref: '#/components/examples/InternalServerError'
      security:
        - AmOAuth2:
            - sfcc.cdn-zones
            - sfcc.cdn-zones.rw
    delete:
      summary: Delete a specific rate limiting rule. See [eCDN Rate Limiting Rules](https://developer.salesforce.com/docs/commerce/commerce-api/guide/cdn-rate-limiting-rules.html).
      operationId: deleteRateLimitingRule
      parameters:
        - $ref: '#/components/parameters/ruleId'
        - $ref: '#/components/parameters/zoneId'
        - $ref: '#/components/parameters/organizationId'
      responses:
        '204':
          description: Successfully deleted the rate limiting rule requested by the caller.
        '401':
          description: |
            The caller is not authorized to access the requested resource.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ApiStandardsErrorResponse'
              examples:
                Unauthorized:
                  $ref: '#/components/examples/Unauthorized'
        '403':
          description: |
            The caller does not have access to the requested resource.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ApiStandardsErrorResponse'
              examples:
                Forbidden:
                  $ref: '#/components/examples/Forbidden'
        '404':
          description: |
            The resource requested by the caller was not found.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ApiStandardsErrorResponse'
              examples:
                NotFound:
                  $ref: '#/components/examples/NotFound'
        '500':
          description: |
            An error occurred on the server side.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ApiStandardsErrorResponse'
              examples:
                InternalServerError:
                  $ref: '#/components/examples/InternalServerError'
      security:
        - AmOAuth2:
            - sfcc.cdn-zones.rw
    patch:
      summary: Update a specific rate limiting rule. See [eCDN Rate Limiting Rules](https://developer.salesforce.com/docs/commerce/commerce-api/guide/cdn-rate-limiting-rules.html).
      operationId: updateRateLimitingRule
      parameters:
        - $ref: '#/components/parameters/ruleId'
        - $ref: '#/components/parameters/zoneId'
        - $ref: '#/components/parameters/organizationId'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RateLimitingRulesPatchRequest'
        required: true
      responses:
        '200':
          description: Successfully updated the rate limiting rule requested by the caller.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RateLimitingRuleEnvelope'
              examples:
                RateLimitingRuleResponse:
                  $ref: '#/components/examples/RateLimitingRuleResponse'
        '400':
          description: |
            The request sent by the caller is not valid.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ApiStandardsErrorResponse'
              examples:
                BadRequest:
                  $ref: '#/components/examples/BadRequest'
        '401':
          description: |
            The caller is not authorized to access the requested resource.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ApiStandardsErrorResponse'
              examples:
                Unauthorized:
                  $ref: '#/components/examples/Unauthorized'
        '403':
          description: |
            The caller does not have access to the requested resource.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ApiStandardsErrorResponse'
              examples:
                Forbidden:
                  $ref: '#/components/examples/Forbidden'
        '404':
          description: |
            The resource requested by the caller was not found.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ApiStandardsErrorResponse'
              examples:
                NotFound:
                  $ref: '#/components/examples/NotFound'
        '500':
          description: |
            An error occurred on the server side.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ApiStandardsErrorResponse'
              examples:
                InternalServerError:
                  $ref: '#/components/examples/InternalServerError'
      security:
        - AmOAuth2:
            - sfcc.cdn-zones.rw
  /organizations/{organizationId}/zones/{zoneId}/firewall-managed/rulesets:
    get:
      summary: Retrieve WAFv2 managed rulesets. See [eCDN WAFv2](https://developer.salesforce.com/docs/commerce/commerce-api/guide/cdn-zones-wafv2.html).
      operationId: getWafManagedRulesets
      parameters:
        - $ref: '#/components/parameters/zoneId'
        - $ref: '#/components/parameters/organizationId'
      responses:
        '200':
          description: Successfully returned the list of WAFv2 managed rulesets.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WAFManagedRulesetsEnvelope'
              examples:
                WAFManagedRulesetsResponse:
                  $ref: '#/components/examples/WAFManagedRulesetsResponse'
        '401':
          description: |
            The caller is not authorized to access the requested resource.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ApiStandardsErrorResponse'
              examples:
                Unauthorized:
                  $ref: '#/components/examples/Unauthorized'
        '403':
          description: |
            The caller does not have access to the requested resource.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ApiStandardsErrorResponse'
              examples:
                Forbidden:
                  $ref: '#/components/examples/Forbidden'
        '404':
          description: |
            The resource requested by the caller was not found.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ApiStandardsErrorResponse'
              examples:
                NotFound:
                  $ref: '#/components/examples/NotFound'
        '500':
          description: |
            An error occurred on the server side.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ApiStandardsErrorResponse'
              examples:
                InternalServerError:
                  $ref: '#/components/examples/InternalServerError'
      security:
        - AmOAuth2:
            - sfcc.cdn-zones
            - sfcc.cdn-zones.rw
  /organizations/{organizationId}/zones/{zoneId}/firewall-managed/rulesets/{rulesetId}:
    patch:
      summary: Update WAFv2 managed ruleset. See [eCDN WAFv2](https://developer.salesforce.com/docs/commerce/commerce-api/guide/cdn-zones-wafv2.html).
      operationId: updateWafManagedRuleset
      parameters:
        - $ref: '#/components/parameters/rulesetId'
        - $ref: '#/components/parameters/zoneId'
        - $ref: '#/components/parameters/organizationId'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/WAFManagedRulesetRequest'
            examples:
              WAFManagedRulesetsUpdateRequestBodyExample:
                $ref: '#/components/examples/WAFManagedRulesetsUpdateRequestBodyExample'
        required: true
      responses:
        '200':
          description: Successfully updated the WAFv2 managed rulesets.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WAFManagedRulesetEnvelope'
              examples:
                WAFManagedRulesetsUpdateResponse:
                  $ref: '#/components/examples/WAFManagedRulesetsUpdateResponse'
        '400':
          description: |
            The request sent by the caller is not valid.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ApiStandardsErrorResponse'
              examples:
                BadRequest:
                  $ref: '#/components/examples/BadRequest'
        '401':
          description: |
            The caller is not authorized to access the requested resource.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ApiStandardsErrorResponse'
              examples:
                Unauthorized:
                  $ref: '#/components/examples/Unauthorized'
        '403':
          description: |
            The caller does not have access to the requested resource.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ApiStandardsErrorResponse'
              examples:
                Forbidden:
                  $ref: '#/components/examples/Forbidden'
        '404':
          description: |
            The resource requested by the caller was not found.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ApiStandardsErrorResponse'
              examples:
                NotFound:
                  $ref: '#/components/examples/NotFound'
        '500':
          description: |
            An error occurred on the server side.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ApiStandardsErrorResponse'
              examples:
                InternalServerError:
                  $ref: '#/components/examples/InternalServerError'
      security:
        - AmOAuth2:
            - sfcc.cdn-zones.rw
  /organizations/{organizationId}/zones/{zoneId}/firewall-managed/rulesets/{rulesetId}/rules:
    get:
      summary: Retrieve all rules in the specified WAFv2 managed ruleset. See [eCDN WAFv2](https://developer.salesforce.com/docs/commerce/commerce-api/guide/cdn-zones-wafv2.html).
      operationId: getWafManagedRulesInRuleset
      parameters:
        - $ref: '#/components/parameters/rulesetId'
        - $ref: '#/components/parameters/zoneId'
        - $ref: '#/components/parameters/organizationId'
      responses:
        '200':
          description: Successfully returned the rules in the WAFv2 managed ruleset.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WAFManagedRulesEnvelope'
              examples:
                WAFManagedRulesResponse:
                  $ref: '#/components/examples/WAFManagedRulesResponse'
        '400':
          description: |
            The request sent by the caller is not valid.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ApiStandardsErrorResponse'
              examples:
                BadRequest:
                  $ref: '#/components/examples/BadRequest'
        '401':
          description: |
            The caller is not authorized to access the requested resource.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ApiStandardsErrorResponse'
              examples:
                Unauthorized:
                  $ref: '#/components/examples/Unauthorized'
        '403':
          description: |
            The caller does not have access to the requested resource.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ApiStandardsErrorResponse'
              examples:
                Forbidden:
                  $ref: '#/components/examples/Forbidden'
        '404':
          description: |
            The resource requested by the caller was not found.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ApiStandardsErrorResponse'
              examples:
                NotFound:
                  $ref: '#/components/examples/NotFound'
        '500':
          description: |
            An error occurred on the server side.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ApiStandardsErrorResponse'
              examples:
                InternalServerError:
                  $ref: '#/components/examples/InternalServerError'
      security:
        - AmOAuth2:
            - sfcc.cdn-zones
            - sfcc.cdn-zones.rw
  /organizations/{organizationId}/zones/{zoneId}/firewall-managed/rulesets/{rulesetId}/rules/{ruleId}:
    patch:
      summary: Update a WAF managed rule in the specified WAFv2 managed ruleset. See [eCDN WAFv2](https://developer.salesforce.com/docs/commerce/commerce-api/guide/cdn-zones-wafv2.html).
      operationId: updateWafManagedRuleInRuleset
      parameters:
        - $ref: '#/components/parameters/zoneId'
        - $ref: '#/components/parameters/rulesetId'
        - $ref: '#/components/parameters/ruleId'
        - $ref: '#/components/parameters/organizationId'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/WAFManagedRuleRequest'
            examples:
              WAFManagedRulesUpdateRequestBodyExample:
                $ref: '#/components/examples/WAFManagedRulesUpdateRequestBodyExample'
        required: true
      responses:
        '200':
          description: Successfully updated the WAF managed rule in the specified WAFv2 managed ruleset.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WAFManagedRuleEnvelope'
              examples:
                WAFManagedRulesUpdateResponse:
                  $ref: '#/components/examples/WAFManagedRulesUpdateResponse'
        '400':
          description: |
            The request sent by the caller is not valid.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ApiStandardsErrorResponse'
              examples:
                BadRequest:
                  $ref: '#/components/examples/BadRequest'
        '401':
          description: |
            The caller is not authorized to access the requested resource.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ApiStandardsErrorResponse'
              examples:
                Unauthorized:
                  $ref: '#/components/examples/Unauthorized'
        '403':
          description: |
            The caller does not have access to the requested resource.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ApiStandardsErrorResponse'
              examples:
                Forbidden:
                  $ref: '#/components/examples/Forbidden'
        '404':
          description: |
            The resource requested by the caller was not found.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ApiStandardsErrorResponse'
              examples:
                NotFound:
                  $ref: '#/components/examples/NotFound'
        '500':
          description: |
            An error occurred on the server side.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ApiStandardsErrorResponse'
              examples:
                InternalServerError:
                  $ref: '#/components/examples/InternalServerError'
      security:
        - AmOAuth2:
            - sfcc.cdn-zones.rw
  /organizations/{organizationId}/zones/{zoneId}/firewall-managed/migration:
    put:
      summary: Migrate a zone to WAFv2. Only applicable for existing zones using WAFv1. See [eCDN WAFv2](https://developer.salesforce.com/docs/commerce/commerce-api/guide/cdn-zones-wafv2.html).
      operationId: migrateZoneToWafV2
      parameters:
        - $ref: '#/components/parameters/zoneId'
        - $ref: '#/components/parameters/organizationId'
      responses:
        '200':
          description: Successfully migrated the zone to WAFv2 and returned the WAF managed rulesets.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WAFManagedRulesetsEnvelope'
              examples:
                WAFManagedRulesetsResponse:
                  $ref: '#/components/examples/WAFManagedRulesetsResponse'
        '400':
          description: |
            The request sent by the caller is not valid.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ApiStandardsErrorResponse'
              examples:
                BadRequest:
                  $ref: '#/components/examples/BadRequest'
        '401':
          description: |
            The caller is not authorized to access the requested resource.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ApiStandardsErrorResponse'
              examples:
                Unauthorized:
                  $ref: '#/components/examples/Unauthorized'
        '403':
          description: |
            The caller does not have access to the requested resource.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ApiStandardsErrorResponse'
              examples:
                Forbidden:
                  $ref: '#/components/examples/Forbidden'
        '404':
          description: |
            The resource requested by the caller was not found.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ApiStandardsErrorResponse'
              examples:
                NotFound:
                  $ref: '#/components/examples/NotFound'
        '500':
          description: |
            An error occurred on the server side.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ApiStandardsErrorResponse'
              examples:
                InternalServerError:
                  $ref: '#/components/examples/InternalServerError'
      security:
        - AmOAuth2:
            - sfcc.cdn-zones.rw
  /organizations/{organizationId}/zones/{zoneId}/origin-header-modification/{type}:
    get:
      summary: Get the origin header modification associated with a zone. Only the `mrt` type is supported.
      operationId: getOriginHeaderModification
      parameters:
        - $ref: '#/components/parameters/zoneId'
        - $ref: '#/components/parameters/type'
        - $ref: '#/components/parameters/organizationId'
      responses:
        '200':
          description: Successfully returned the origin header modification associated with a zone.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OriginHeaderModificationEnvelope'
              examples:
                MrtPutRequest:
                  $ref: '#/components/examples/MrtGetResponse'
        '400':
          description: |
            The request sent by the caller is not valid.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ApiStandardsErrorResponse'
              examples:
                BadRequest:
                  $ref: '#/components/examples/BadRequest'
        '401':
          description: |
            The caller is not authorized to access the requested resource.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ApiStandardsErrorResponse'
              examples:
                Unauthorized:
                  $ref: '#/components/examples/Unauthorized'
        '403':
          description: |
            The caller does not have access to the requested resource.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ApiStandardsErrorResponse'
              examples:
                Forbidden:
                  $ref: '#/components/examples/Forbidden'
        '404':
          description: |
            The resource requested by the caller was not found.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ApiStandardsErrorResponse'
              examples:
                NotFound:
                  $ref: '#/components/examples/NotFound'
        '500':
          description: |
            An error occurred on the server side.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ApiStandardsErrorResponse'
              examples:
                InternalServerError:
                  $ref: '#/components/examples/InternalServerError'
      security:
        - AmOAuth2:
            - sfcc.cdn-zones
            - sfcc.cdn-zones.rw
    put:
      summary: Upsert an origin header modification. Only the `mrt` type is supported.
      operationId: upsertOriginHeaderModification
      parameters:
        - $ref: '#/components/parameters/zoneId'
        - $ref: '#/components/parameters/type'
        - $ref: '#/components/parameters/organizationId'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/OriginHeaderModificationPutRequest'
            examples:
              MrtPutRequestBodyExample:
                $ref: '#/components/examples/MrtPutRequestBodyExample'
        required: true
      responses:
        '200':
          description: Successfully upserted the origin header modification.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OriginHeaderModificationEnvelope'
              examples:
                MrtPutUpdateResponse:
                  $ref: '#/components/examples/MrtPutUpdateResponse'
        '201':
          description: Successfully created the origin header modification.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/OriginHeaderModificationEnvelope'
              examples:
                MrtPutCreateResponse:
                  $ref: '#/components/examples/MrtPutCreateResponse'
        '400':
          description: |
            The request sent by the caller is not valid.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ApiStandardsErrorResponse'
              examples:
                BadRequest:
                  $ref: '#/components/examples/BadRequest'
        '401':
          description: |
            The caller is not authorized to access the requested resource.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ApiStandardsErrorResponse'
              examples:
                Unauthorized:
                  $ref: '#/components/examples/Unauthorized'
        '403':
          description: |
            The caller does not have access to the requested resource.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ApiStandardsErrorResponse'
              examples:
                Forbidden:
                  $ref: '#/components/examples/Forbidden'
        '404':
          description: |
            The resource requested by the caller was not found.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ApiStandardsErrorResponse'
              examples:
                NotFound:
                  $ref: '#/components/examples/NotFound'
        '500':
          description: |
            An error occurred on the server side.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ApiStandardsErrorResponse'
              examples:
                InternalServerError:
                  $ref: '#/components/examples/InternalServerError'
      security:
        - AmOAuth2:
            - sfcc.cdn-zones.rw
    delete:
      summary: Delete the origin header modification associated with a zone. Only the `mrt` type is supported.
      operationId: deleteOriginHeaderModification
      parameters:
        - $ref: '#/components/parameters/zoneId'
        - $ref: '#/components/parameters/type'
        - $ref: '#/components/parameters/organizationId'
      responses:
        '204':
          description: Successfully deleted the origin header modification associated with a zone.
        '401':
          description: |
            The caller is not authorized to access the requested resource.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ApiStandardsErrorResponse'
              examples:
                Unauthorized:
                  $ref: '#/components/examples/Unauthorized'
        '403':
          description: |
            The caller does not have access to the requested resource.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ApiStandardsErrorResponse'
              examples:
                Forbidden:
                  $ref: '#/components/examples/Forbidden'
        '404':
          description: |
            The resource requested by the caller was not found.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ApiStandardsErrorResponse'
              examples:
                NotFound:
                  $ref: '#/components/examples/NotFound'
        '500':
          description: |
            An error occurred on the server side.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ApiStandardsErrorResponse'
              examples:
                InternalServerError:
                  $ref: '#/components/examples/InternalServerError'
      security:
        - AmOAuth2:
            - sfcc.cdn-zones.rw
  /organizations/{organizationId}/zones/{zoneId}/settings/ciphers:
    get:
      summary: Get cipher suites settings by zoneId. See [eCDN Supported Cipher Suites](https://developer.salesforce.com/docs/commerce/commerce-api/guide/cdn-zones-cipher-suite-types.html).
      operationId: getCipherSuites
      parameters:
        - $ref: '#/components/parameters/zoneId'
        - $ref: '#/components/parameters/organizationId'
      responses:
        '200':
          description: Retrieves current zone level cipher settings.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CipherSuitesEnvelope'
              examples:
                CipherSettingsGetResponse:
                  $ref: '#/components/examples/CipherSettingsGetResponse'
        '401':
          description: |
            The caller is not authorized to access the requested resource.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ApiStandardsErrorResponse'
              examples:
                Unauthorized:
                  $ref: '#/components/examples/Unauthorized'
        '403':
          description: |
            The caller does not have access to the requested resource.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ApiStandardsErrorResponse'
              examples:
                Forbidden:
                  $ref: '#/components/examples/Forbidden'
        '404':
          description: |
            The resource requested by the caller was not found.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ApiStandardsErrorResponse'
              examples:
                NotFound:
                  $ref: '#/components/examples/NotFound'
        '500':
          description: |
            An error occurred on the server side.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ApiStandardsErrorResponse'
              examples:
                InternalServerError:
                  $ref: '#/components/examples/InternalServerError'
      security:
        - AmOAuth2:
            - sfcc.cdn-zones
            - sfcc.cdn-zones.rw
    patch:
      summary: Update cipher suite settings for the zone. See [eCDN Supported Cipher Suites](https://developer.salesforce.com/docs/commerce/commerce-api/guide/cdn-zones-cipher-suite-types.html).
      operationId: updateCipherSuites
      parameters:
        - $ref: '#/components/parameters/zoneId'
        - $ref: '#/components/parameters/organizationId'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CipherSuitesRequest'
            examples:
              CipherSettingsPatchRequestBodyExample:
                $ref: '#/components/examples/CipherSettingsPatchRequestBodyExample'
        required: true
      responses:
        '200':
          description: Updates current zone level cipher settings.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CipherSuitesEnvelope'
              examples:
                CipherSettingsPatchResponse:
                  $ref: '#/components/examples/CipherSettingsPatchResponse'
        '401':
          description: |
            The caller is not authorized to access the requested resource.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ApiStandardsErrorResponse'
              examples:
                Unauthorized:
                  $ref: '#/components/examples/Unauthorized'
        '403':
          description: |
            The caller does not have access to the requested resource.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ApiStandardsErrorResponse'
              examples:
                Forbidden:
                  $ref: '#/components/examples/Forbidden'
        '404':
          description: |
            The resource requested by the caller was not found.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ApiStandardsErrorResponse'
              examples:
                NotFound:
                  $ref: '#/components/examples/NotFound'
        '500':
          description: |
            An error occurred on the server side.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ApiStandardsErrorResponse'
              examples:
                InternalServerError:
                  $ref: '#/components/examples/InternalServerError'
      security:
        - AmOAuth2:
            - sfcc.cdn-zones.rw
components:
  schemas:
    ApiStandardsErrorResponse:
      type: object
      properties:
        title:
          description: "A short, human-readable summary of the problem\ntype.  It will not change from occurrence to occurrence of the \nproblem, except for purposes of localization\n"
          type: string
          maxLength: 256
          example: You do not have enough credit
        type:
          description: |
            A URI reference [RFC3986] that identifies the
            problem type.  This specification encourages that, when
            dereferenced, it provide human-readable documentation for the
            problem type (e.g., using HTML [W3C.REC-html5-20141028]).  When
            this member is not present, its value is assumed to be
            "about:blank". It accepts relative URIs; this means
            that they must be resolved relative to the document's base URI, as
            per [RFC3986], Section 5.
          type: string
          maxLength: 2048
          example: NotEnoughMoney
        detail:
          description: A human-readable explanation specific to this occurrence of the problem.
          type: string
          example: Your current balance is 30, but that costs 50
        instance:
          description: |
            A URI reference that identifies the specific
            occurrence of the problem.  It may or may not yield further
            information if dereferenced.  It accepts relative URIs; this means
            that they must be resolved relative to the document's base URI, as
            per [RFC3986], Section 5.
          type: string
          maxLength: 2048
          example: /account/12345/msgs/abc
      required:
        - title
        - type
        - detail
    OrganizationId:
      description: An identifier for the organization the request is being made by
      example: f_ecom_zzxy_prd
      type: string
      minLength: 1
      maxLength: 32
    StorefrontZoneCreateRequest:
      required:
        - domainName
      type: object
      properties:
        domainName:
          type: string
          description: Domain name for the site.
          example: cc-merchant.com
      description: The storefront zone information to be created.
    StorefrontZoneCreateResponse:
      required:
        - createdOn
        - status
        - zoneId
        - zoneName
      type: object
      properties:
        zoneId:
          type: string
          description: The zone id tag.
          example: 023e105f4ecef8ad9ca31a8372d0c353
        zoneName:
          type: string
          description: The domain name for the zone.
          example: stg-zzzz-cc-merchant-com.cc-ecdn.net
        status:
          type: string
          description: current status of the zone
          example: active
          enum:
            - active
            - pending
            - initializing
            - moved
            - deleted
            - deactivated
        createdOn:
          type: string
          description: Date and time of zone creation.
          format: date-time
          example: '2014-01-01T05:20:00.12345Z'
      description: The response of create zone, includes zone and zone properties.
    StorefrontZoneCreateEnvelope:
      type: object
      properties:
        data:
          $ref: '#/components/schemas/StorefrontZoneCreateResponse'
      required:
        - data
    MtlsCertificateResponse:
      type: object
      properties:
        mtlsCertificateId:
          type: string
          description: ID generated by the CDN provider for the certificate.
        expiresOn:
          type: string
          description: Expiration date for the mTLS certificate.
          format: date-time
        issuer:
          type: string
          description: The certificate authority that issued the mTLS certificate.
        signature:
          type: string
          description: The type of hash used for the mTLS certificate.
        uploadedOn:
          type: string
          description: Date the mTLS certificate was uploaded.
          format: date-time
        ca:
          type: boolean
          description: Indicates whether the mTLS certificate is a CA or leaf certificate.
        serialNumber:
          type: string
          description: The mTLS certificate serial number.
        mtlsCertificateName:
          type: string
          description: Optional name for the mTLS certificate used for ease of understanding.
        mtlsAssociatedCodeUploadHostname:
          type: string
          description: Hostname associated with this mTLS certificate.
      description: mTLS certificate information.
    MtlsCertificatesResponseEnvelope:
      type: object
      required:
        - data
      properties:
        data:
          items:
            $ref: '#/components/schemas/MtlsCertificateResponse'
          type: array
    MtlsCertificateRequest:
      required:
        - certificate
        - name
        - privateKey
      type: object
      properties:
        certificate:
          type: string
          description: Public key for the CA certificate in mTLS.
        privateKey:
          type: string
          description: Private key of the CA certificate in mTLS.
        name:
          type: string
          description: Certificate name used for ease of understanding.
      description: mTLS certificate request information.
    MtlsCertificateResponseEnvelope:
      type: object
      required:
        - data
      properties:
        data:
          $ref: '#/components/schemas/MtlsCertificateResponse'
    PageShieldNotificationWebhookResponse:
      required:
        - createdAt
        - id
        - name
        - type
        - webhookUrl
      type: object
      properties:
        id:
          type: string
          description: Webhook ID.
        name:
          type: string
          description: Webhook name.
        webhookUrl:
          type: string
          description: Webhook URL.
        type:
          type: string
          description: Webhook type.
        createdAt:
          type: string
          description: Timestamp of webhook creation.
          format: date-time
        lastSuccess:
          type: string
          description: Timestamp of the last successful notification.
          format: date-time
        lastFailure:
          type: string
          description: Timestamp of the last failed notification.
          format: date-time
        zones:
          items:
            type: string
          type: array
          description: Zone IDs on which to filter notifications alerts.
      description: Page shield notification for the webhook response.
    PageShieldNotificationWebhookListEnvelope:
      type: object
      required:
        - data
      properties:
        data:
          items:
            $ref: '#/components/schemas/PageShieldNotificationWebhookResponse'
          type: array
    PageShieldNotificationWebhookRequest:
      required:
        - webhookUrl
      type: object
      properties:
        webhookUrl:
          type: string
          description: Webhook URL.
        secret:
          type: string
          description: Webhook optional secret.
        zones:
          items:
            type: string
          type: array
          description: Zone names on which to filter notifications alerts.
      description: Page shield notification for the webhook request.
    PageShieldNotificationWebhookEnvelope:
      type: object
      required:
        - data
      properties:
        data:
          $ref: '#/components/schemas/PageShieldNotificationWebhookResponse'
    PageShieldPolicyResponse:
      type: object
      properties:
        action:
          type: string
          description: Action taken when expression matches allow or log.
          example: allow
          enum:
            - allow
            - log
        description:
          type: string
          description: Description for the policy.
        enabled:
          type: boolean
          description: Enable/disable the policy.
        expression:
          type: string
          description: Expression of the policy.
        value:
          type: string
          description: Policy to be applied.
          example: script-src
        id:
          type: string
          description: Policy ID
      description: Page shield policy response.
    PageShieldPoliciesListEnvelope:
      type: object
      required:
        - data
      properties:
        data:
          items:
            $ref: '#/components/schemas/PageShieldPolicyResponse'
          type: array
    PageShieldPolicyRequest:
      type: object
      properties:
        action:
          type: string
          description: Action taken when expression matches allow or log.
          example: allow
          enum:
            - allow
            - log
        description:
          type: string
          description: Description for the policy.
        enabled:
          type: boolean
          description: Enable/disable the policy.
        expression:
          type: string
          description: Expression of the policy.
        value:
          type: string
          description: Policy to be applied.
          example: script-src
      description: Page shield policy request object.
    PageShieldPoliciesEnvelope:
      type: object
      required:
        - data
      properties:
        data:
          $ref: '#/components/schemas/PageShieldPolicyResponse'
    PageShieldScriptVersion:
      required:
        - isMaliciousCode
      type: object
      properties:
        hash:
          type: string
          description: The computed hash of the analyzed script.
          example: 1243453456abc
        jsIntegrityScore:
          type: integer
          description: The integrity score of the JavaScript content.
          example: 1
        obfuscationScore:
          type: integer
          description: The obfuscation score of the JavaScript content.
          example: 2
        dataflowScore:
          type: integer
          description: The dataflow score of the JavaScript content.
          example: 1
        malwareScore:
          type: integer
          description: The malware score of the JavaScript content.
          example: 1
        cryptoMiningScore:
          type: integer
          description: The crypto mining score of the JavaScript content.
          example: 1
        mageCartScore:
          type: integer
          description: The Magecart score of the JavaScript content.
          example: 2
        fetchedAt:
          type: string
          description: The timestamp of when the script was last fetched.
          format: date-time
        isMaliciousCode:
          type: boolean
          description: Indicates whether the script has been reported as malicious.
      description: Version details for the JavaScript script.
    PageShieldScriptResponse:
      type: object
      properties:
        id:
          type: string
          description: Page Shield script ID.
          example: 12345678901234asdfasfasdf
        url:
          type: string
          description: Page Shield script URL.
          example: https://sfdc-test.net/on/demandware.static/Sites-SiteNemesis-Site/-/en_US//lib/jquery/ui/jquery-ui.min.js
        host:
          type: string
          description: Hostname where the script was detected by Page Shield.
          example: sfdc-test.net
        addedAt:
          type: string
          description: Date the script was added to Page Shield.
          format: date-time
          example: '2022-01-01T05:20:00Z'
        firstSeenAt:
          type: string
          description: Date the script was detected by Page Shield.
          format: date-time
          example: '2022-01-01T05:20:00Z'
        lastSeenAt:
          type: string
          description: Date the script was recently detected by Page Shield.
          format: date-time
          example: '2022-01-01T05:20:00Z'
        fetchedAt:
          type: string
          description: The timestamp when the script was last fetched.
          format: date-time
        domainReportedMalicious:
          type: boolean
          description: Reported domain is malicious.
          example: false
        hash:
          type: string
          description: The computed hash of the analyzed script.
          example: 1243453456abc
        cryptoMiningScore:
          type: integer
          description: The crypto mining score of the JavaScript content.
          example: 1
        dataflowScore:
          type: integer
          description: The dataflow score of the JavaScript content.
          example: 1
        jsIntegrityScore:
          type: integer
          description: The integrity score of the JavaScript content.
          example: 1
        mageCartScore:
          type: integer
          description: The Magecart score of the JavaScript content.
          example: 2
        malwareScore:
          type: integer
          description: The malware score of the JavaScript content.
          example: 1
        obfuscationScore:
          type: integer
          description: The obfuscation score of the JavaScript content.
          example: 2
        maliciousDomainCategories:
          items:
            type: string
          type: array
          description: Malicious domain category.
          example:
            - Malware
        maliciousUrlCategories:
          items:
            type: string
          type: array
          description: Malicious URL category.
          example:
            - Malware
        urlContainsCdnCgiPath:
          type: boolean
          description: URL contains CDN CGI path.
          example: false
        urlReportedMalicious:
          type: boolean
          description: Reported URL is malicious.
          example: false
        pageUrls:
          items:
            type: string
          type: array
          description: Page URLs
          example:
            - blog.test.salesforce.com/page1
            - blog.test.salesforce.com/page2
        firstPageUrl:
          type: string
          description: First page URL for the JavaScript.
          example: blog.test.salesforce.com
        status:
          type: string
          description: The current status of the script. Possible values are active, inactive, or infrequent.
          example: active
        versions:
          items:
            $ref: '#/components/schemas/PageShieldScriptVersion'
          type: array
          description: List of script versions.
      description: Response of Page Shield script object.
    PageShieldScriptListEnvelope:
      type: object
      required:
        - data
      properties:
        data:
          items:
            $ref: '#/components/schemas/PageShieldScriptResponse'
          type: array
    PageShieldScriptEnvelope:
      type: object
      required:
        - data
      properties:
        data:
          $ref: '#/components/schemas/PageShieldScriptResponse'
    Zone:
      title: Zone
      required:
        - name
        - status
        - zoneId
      type: object
      properties:
        zoneId:
          maxLength: 100
          type: string
          description: Identity of the zone.
        name:
          maxLength: 100
          type: string
          description: Name given to the zone. This needs to be a DNS domain name for eg example.com
        status:
          type: string
          description: Status of the zone for eg "Pending" , "Active"
          enum:
            - active
            - pending
            - initializing
            - moved
            - deleted
            - deactivated
      description: Zone is the container for hostnames and various CDN settings/properties. Each zone is tied to a single origin.
      example:
        zoneId: example1-zone-Id
        name: example1.com
        status: pending
      additionalProperties: false
    ZonesEnvelope:
      required:
        - data
      properties:
        data:
          items:
            $ref: '#/components/schemas/Zone'
          type: array
    WafGroup:
      required:
        - mode
      type: object
      properties:
        groupId:
          maxLength: 100
          type: string
          example: 372e67954025e0ba6aaa6d586b9e0b60
        action:
          type: string
          description: The action to apply to WAF group
          example: block
          enum:
            - block
            - challenge
            - monitor
            - default
        mode:
          type: string
          description: Mode of the waf rule - on vs off
          example: 'on'
          enum:
            - 'on'
            - 'off'
        description:
          type: string
          description: Description of the WAF Group.
          example: Test WAF Group to protect against SQL injection
      example:
        groupId: 372abe67954025e0ba6aaa6d586b9e0b
        zoneId: example1-zone-Id
        action: monitor
        mode: true
        description: SQL injection protection
      additionalProperties: false
    WafGroupsEnvelope:
      type: object
      required:
        - data
      properties:
        data:
          items:
            $ref: '#/components/schemas/WafGroup'
          type: array
    WafGroupEnvelope:
      type: object
      properties:
        data:
          $ref: '#/components/schemas/WafGroup'
    WafRule:
      required:
        - action
      type: object
      properties:
        ruleId:
          type: string
          example: 892e67954025e0ba6atefd586b9e58b3
        groupId:
          maxLength: 100
          type: string
          example: 372e67954025e0ba6aaa6d586b9e0b60
        action:
          type: string
          description: The action to apply to WAF rule
          example: block
          enum:
            - block
            - challenge
            - monitor
            - disable
            - default
        defaultAction:
          type: string
          description: The action to apply to WAF rule
          example: block
          enum:
            - block
            - challenge
            - monitor
            - disable
        description:
          type: string
          description: Description of the WAF Group.
          example: Test WAF Rule to protect against SQL injection
      example:
        ruleId: 892e67954025e0ba6atefd586b9e58b3
        groupId: 372abe67954025e0ba6aaa6d586b9e0b
        action: monitor
        defaultAction: challenge
        description: SQL injection protection
      additionalProperties: false
    WafRulesEnvelope:
      type: object
      required:
        - data
      properties:
        data:
          items:
            $ref: '#/components/schemas/WafRule'
          type: array
    WafRuleEnvelope:
      type: object
      required:
        - data
      properties:
        data:
          $ref: '#/components/schemas/WafRule'
    SpeedSetting:
      type: object
      properties:
        brotliCompression:
          type: string
          description: Brotli compression setting of a zone.
          default: 'off'
          example: 'off'
          enum:
            - 'on'
            - 'off'
        http2Prioritization:
          type: string
          description: Http2 prioritization setting for a zone.
          default: 'off'
          example: 'off'
          enum:
            - 'on'
            - 'off'
        webp:
          type: string
          description: Support for the WebP image format when using image modification for a zone. The WebP image format can be used with supported clients for added performance benefits. Setting this property to `on` will return an error when the `polish` property is set to `off`.
          default: 'off'
          example: 'off'
          enum:
            - 'on'
            - 'off'
        polish:
          type: string
          description: The level of polish (image quality) used for image modification. The value `lossless` corresponds to **Polish Level Basic** in the UI, and the value `lossy` corresponds to **Polish Level Basic+JPEG.** To disable image modification, set this property to `off`. Setting this property to `off` will prevent you from setting the `webp` property to `on`.
          default: 'off'
          example: 'off'
          enum:
            - 'off'
            - lossless
            - lossy
        earlyHints:
          type: string
          description: Early Hints for a zone.
          default: 'off'
          example: 'off'
          enum:
            - 'on'
            - 'off'
        http3:
          type: string
          description: Http3 for a zone.
          default: 'off'
          example: 'off'
          enum:
            - 'on'
            - 'off'
        http2ToOrigin:
          type: string
          description: Http2 to Origin for a zone.
          default: 'off'
          example: 'off'
          enum:
            - 'on'
            - 'off'
      example:
        brotliCompression: 'off'
      additionalProperties: false
    SpeedSettingsEnvelope:
      type: object
      required:
        - data
      properties:
        data:
          $ref: '#/components/schemas/SpeedSetting'
    SecuritySetting:
      required:
        - alwaysUseHttps
      type: object
      properties:
        hsts:
          type: object
          properties:
            enabled:
              type: boolean
              description: Enable strict transport security.
            includeSubdomains:
              type: boolean
              description: Include all subdomains for strict transport security.
            maxAge:
              type: number
              description: Max age in seconds of the strict transport security.
            preload:
              type: boolean
              description: Preload any URLs that are included in the response headers.
          description: The security header for a zone.
        securityLevel:
          type: string
          description: Security profile for your zone, which will automatically adjust each of the security settings.
          enum:
            - 'off'
            - essentially_off
            - low
            - medium
            - high
            - under_attack
        tls13Enabled:
          type: boolean
          description: Enable Crypto TLS 1.3 feature for this zone.
        wafEnabled:
          type: boolean
          description: Enable WAF (OWASP) protection for this zone. Not applicable for zones using WAFv2.
        alwaysUseHttps:
          type: boolean
          description: Redirect all http requests to https.
          example: true
    SecuritySettingsEnvelope:
      type: object
      required:
        - data
      properties:
        data:
          $ref: '#/components/schemas/SecuritySetting'
    CachePurgeRequest:
      type: object
      properties:
        path:
          type: string
          description: Path for clearing the cache. Allowed paths follow the format "<hostname>/dw/shop/*/products", "<hostname>/worker.js", "<hostname>/mobify*" or "<hostname>/callback*". Regular expressions and wildcards are not supported in the path.
          example: www.sfcc-ecdn-test5.net/dw/shop/v21_9/products
        tags:
          type: array
          description: List of cache tags to purge. When specified, all cached content associated with these tags will be purged.
          items:
            type: string
          example:
            - product-123
            - category-456
      description: Request for doing a cache purge
    CachePurgeResponse:
      required:
        - cachePurged
        - details
      type: object
      properties:
        cachePurged:
          type: boolean
          description: The name of the list.
          example: false
        details:
          type: string
          description: Details of errors if any.
          example: '1084 : Unable to purge ''<url>''.'
      description: Response from a cache purge request
    CachePurgeResponseEnvelope:
      type: object
      required:
        - data
      properties:
        data:
          $ref: '#/components/schemas/CachePurgeResponse'
    OCAPICachingToggleRequest:
      required:
        - enableOCAPICachingPageRule
      type: object
      properties:
        enableOCAPICachingPageRule:
          type: boolean
          description: true to enable OCAPI Caching Page rule, false to disable.
          example: true
      description: Request to enable or disable OCAPI Caching Page rule
    DCVDelegationRecord:
      description: eCDN automatic renewal certificate DCV delegation records.
      type: object
      properties:
        dcvCname:
          description: DNS CNAME for Domain Control Validation.
          type: string
        dcvCnameValue:
          description: DNS CNAME value for Domain Control Validation.
          type: string
    Certificate:
      required:
        - certificateId
        - certificateType
        - status
      type: object
      properties:
        certificateId:
          type: string
          description: Id generated by CDN provider for the certificate.
        hosts:
          items:
            type: string
          type: array
          description: List of hosts the certificate applies to.
        expiresOn:
          type: string
          description: Date of expiration for the certificate.
          format: date-time
        uploadedOn:
          type: string
          description: Date the certificate was uploaded.
          format: date-time
        issuer:
          type: string
          description: The certificate authority that issued the certificate.
        signature:
          type: string
          description: The type of hash used for the certificate.
        status:
          type: string
          description: Current status of the certificate.
          enum:
            - ACTIVE
            - EXPIRED
            - DELETED
            - PENDING
            - INITIALIZING
            - PENDING_VALIDATION
            - PENDING_ISSUANCE
            - PENDING_DEPLOYMENT
            - PENDING_DELETION
        minTlsVersion:
          type: string
          description: Minimum TLS Version only allows HTTPS connections from visitors that support the selected TLS protocol version or newer.
        certificateType:
          type: string
          description: Indicates certificate is custom cert uploaded by customer or automatic renewal certificate by eCDN.
          enum:
            - custom
            - automatic
            - custom_legacy
        certificateAuthority:
          type: string
          description: Indicates certificate issuer for automatic renewal certificate by eCDN.
          enum:
            - google
            - lets_encrypt
            - digicert
        certificateValidation:
          type: string
          description: Indicates certificate validation type for automatic renewal certificate by eCDN.
          enum:
            - http
            - txt
        certificateVerificationTXTName:
          type: string
          description: eCDN automatic renewal certificate verification txt name.
        certificateVerificationTXTValue:
          type: string
          description: eCDN automatic renewal certificate verification txt value.
        certificateVerificationStatus:
          type: string
          description: Current status of certificate verification.
          enum:
            - ACTIVE
            - EXPIRED
            - PENDING
            - INITIALIZING
            - PENDING_VALIDATION
            - PENDING_ISSUANCE
            - PENDING_DEPLOYMENT
        wildcardCertificateVerificationTXTName:
          type: string
          description: eCDN automatic renewal certificate verification txt name.
        wildcardCertificateVerificationTXTValue:
          type: string
          description: eCDN automatic renewal certificate verification txt value.
        wildcardCertificateVerificationStatus:
          type: string
          description: Current status of certificate verification.
          enum:
            - ACTIVE
            - EXPIRED
            - PENDING
            - INITIALIZING
            - PENDING_VALIDATION
            - PENDING_ISSUANCE
            - PENDING_DEPLOYMENT
        customHostnameVerificationTXTName:
          type: string
          description: Custom Hostname verification txt name.
        customHostnameVerificationTXTValue:
          type: string
          description: Custom Hostname verification txt value.
        customHostnameId:
          type: string
          description: Custom hostname associated with the zone
        customHostname:
          type: string
          description: Custom hostname associated with the zone
        customHostnameStatus:
          type: string
          description: Current status of custom hostname validation.
          enum:
            - ACTIVE
            - EXPIRED
            - DELETED
            - PENDING
            - INITIALIZING
            - PENDING_VALIDATION
            - PENDING_ISSUANCE
            - PENDING_DEPLOYMENT
            - PENDING_DELETION
            - MOVED
        dcvDelegationRecords:
          description: eCDN automatic renewal certificate DCV delegation records
          items:
            $ref: '#/components/schemas/DCVDelegationRecord'
          type: array
      description: The certificate information
    CertificatesEnvelope:
      type: object
      required:
        - data
      properties:
        data:
          items:
            $ref: '#/components/schemas/Certificate'
          type: array
    CertificateRequest:
      required:
        - hostname
      type: object
      properties:
        hostname:
          type: string
          description: Hostname that certificate needs to be applied to.
        bundleMethod:
          type: string
          description: Bundle method of the custom certificate chain for verification.
        certificateType:
          type: string
          description: Indicates certificate is custom or automatic certificate renewal by eCDN. Optional field, if nothing specified the default value is custom. Valid values are custom or automatic.
        certificate:
          type: string
          description: Public key of the custom certificate. Required if the certificateType value is custom.
        privateKey:
          type: string
          description: Private key associated with the custom certificate. Required if the `certificateType` value is custom.
        certificateAuthority:
          type: string
          description: Certificate authority only for automatic certificate renewal by eCDN. Required if the `certificateType` value is automatic. Valid values are `google` or `lets_encrypt`.
        certificateValidation:
          type: string
          description: Certificate validation type is optional only for `certificateType` automatic, default value is `http`. Valid values are `http` or `txt`.
        wildcardHostname:
          type: boolean
          description: Set to true for a wildcard custom hostname.
      description: Certificate request information
    CertificateEnvelope:
      required:
        - data
      type: object
      properties:
        data:
          $ref: '#/components/schemas/Certificate'
    CustomHostnameValidationResponse:
      required:
        - customHostname
        - customHostnameId
        - customHostnameStatus
        - customHostnameVerificationTXTName
        - customHostnameVerificationTXTValue
      type: object
      properties:
        customHostnameId:
          type: string
          description: Identifier generated by the CDN provider for the custom hostname.
          example: a439eb1f-5e71-4544-bb29-54d18ax62277
        customHostname:
          type: string
          description: Name of the custom hostname
          example: hello.world.example.net
        customHostnameVerificationTXTName:
          type: string
          description: Custom hostname verification txt name.
        customHostnameVerificationTXTValue:
          type: string
          description: Custom hostname verification txt value.
        customHostnameStatus:
          type: string
          description: Current status of the custom hostname.
          example: ACTIVE
          enum:
            - PENDING
            - ACTIVE
            - MOVED
            - DELETED
      description: Custom hostname validation information.
    CustomHostnameValidationEnvelope:
      type: object
      properties:
        data:
          $ref: '#/components/schemas/CustomHostnameValidationResponse'
      required:
        - data
    MRTRules:
      required:
        - enabled
        - expression
        - id
        - lastUpdated
        - mrtHostname
        - ref
      type: object
      properties:
        id:
          type: string
          description: The ID of the rule.
          example: 12345678901234asdfasfasdf
        expression:
          type: string
          description: The expression that determines the rule's routing behavior.
          example: (http.host eq \"dev-customer.salesforce.com\" and not ( http.request.uri.path matches \"^/path1/.*\" or http.request.uri.path matches \"^.*/path2/.*/products/.*\"))
        description:
          type: string
          description: The description of the rule.
          example: Phased rollout rule for dev-customer.salesforce.com
        lastUpdated:
          type: string
          description: Date when the rule was last updated.
          format: date-time
          example: '2022-01-01T05:20:00Z'
        ref:
          type: string
          description: The ref of the rule.
          example: 12345678901234asdfasfasdf1234567
        enabled:
          type: boolean
          description: Whether or not the rule is enabled.
          example: true
        mrtHostname:
          type: string
          description: Managed runtime hostname this rule targets.
          example: customer-pwa-hybrid.mobify-storefront.com
      description: A rule in an MRT ruleset.
    MRTRuleset:
      required:
        - id
        - lastUpdated
        - name
        - rules
      type: object
      properties:
        id:
          type: string
          description: The ID of the ruleset.
          example: 12345678901234asdfasfasdf
        name:
          type: string
          description: The name of the ruleset.
          example: MRT Rules
        lastUpdated:
          type: string
          description: Date when the ruleset was last updated.
          format: date-time
          example: '2022-01-01T05:20:00Z'
        rules:
          items:
            $ref: '#/components/schemas/MRTRules'
          type: array
          description: The rules defined by the ruleset.
      description: An MRT ruleset. Defines a list of MRT rules that will route certain storefront requests to the managed runtime instance.
    MRTRulesResponse:
      required:
        - ruleset
      type: object
      properties:
        ruleset:
          $ref: '#/components/schemas/MRTRuleset'
      description: Response for MRT rules. MRT rules are a way to route certain storefront requests to the managed runtime instance.
    MRTRulesResponseEnvelope:
      type: object
      required:
        - data
      properties:
        data:
          $ref: '#/components/schemas/MRTRulesResponse'
    MRTRulesPostRequest:
      required:
        - expressions
        - mrtHostname
      type: object
      properties:
        mrtHostname:
          type: string
          description: The customer's MRT instance hostname.
          example: customer-react-project-production.mobify-storefront.com
        expressions:
          items:
            type: string
          type: array
          description: An array containing the expressions for each MRT rule.
          example:
            - (http.host eq "dev-customer.salesforce.com" and not ( http.request.uri.path matches "^/path1/.*" or http.request.uri.path matches "^.*/path2/.*/products/.*"))
        descriptions:
          items:
            type: string
          type: array
          description: An array containing the descriptions for each MRT rule. The number of descriptions provided must match the number of expressions provided. Optional.
          example:
            - Phased rollout rule for dev-customer.salesforce.com
      description: POST request for creating MRT rules. MRT rules are a way to route certain storefront requests to the managed runtime instance.
    MRTRulesetPatchRequest:
      required:
        - mrtHostname
      type: object
      properties:
        oldMrtHostname:
          type: string
          description: The customer's current MRT instance hostname.
          example: customer-react-projec-production.mobify-storefront.com
        mrtHostname:
          type: string
          description: The customer's MRT instance hostname.
          example: customer-react-projec-production.mobify-storefront.com
        expressions:
          items:
            type: string
          type: array
          description: An array containing the expressions for each MRT rule.
          example:
            - (http.host eq "dev-customer.salesforce.com" and not ( http.request.uri.path matches "^/path1/.*" or http.request.uri.path matches "^.*/path2/.*/products/.*"))
        descriptions:
          items:
            type: string
          type: array
          description: An array containing the descriptions for each MRT rule. The number of descriptions provided must match the number of expressions provided. Optional.
          example:
            - Phased rollout rule for dev-customer.salesforce.com
      description: PATCH request for updating the MRT environment hostname or adding MRT rules to route to an existing MRT environment.
    MRTRulePatchRequest:
      type: object
      properties:
        enabled:
          type: boolean
          description: Whether or not the rule is enabled.
          example: true
        expression:
          type: string
          description: The expression that determines the MRT rule's routing behavior.
          example: (http.host eq \"dev-customer.salesforce.com\" and not ( http.request.uri.path matches \"^/path1/.*\" or http.request.uri.path matches \"^.*/path2/.*/products/.*\"))
        description:
          type: string
          description: The description of the rule. Optional.
          example: Phased rollout rule for dev-customer.salesforce.com
      description: PATCH request for updating an MRT rule. You may use the PATCH request to update the rule's expression and description as well as disable/enable the rule.
    LogpushOwnershipPostRequest:
      required:
        - destinationPath
      type: object
      properties:
        destinationPath:
          type: string
          description: Uniquely identifies a resource (such as an s3 bucket) where data will be pushed. Additional configuration parameters supported by the destination may be included. You can use the special string {DATE} in the URL path to separate logs into daily subdirectories; for example s3://customer-bucket/logs/{DATE}?region=us-east-1&sse=AES256. The name of the directory will be replaced with the date in YYYYMMDD format (e.g. 20220215) when the logs are stored.
          example: s3://customer-bucket/site-name/{DATE}?region=us-east-1&sse=AES256
      description: POST request for creating new Logpush Ownership.
    LogpushOwnershipPostResponse:
      required:
        - data
      type: object
      properties:
        data:
          required:
            - destinationPath
            - fileName
          type: object
          properties:
            destinationPath:
              type: string
              description: Destination where logs will be sent (S3 bucket only).
              example: s3://customer-bucket/site-name/{DATE}?region=us-east-1&sse=AES256
            fileName:
              type: string
              description: File path where the ownership challenge file is written.
              example: site-name/20230101/ownership-challenge-d12345678.txt
          description: The customer's new Logpush Ownership.
      description: POST response for created new Logpush Ownership.
    LogpushResponse:
      type: object
      properties:
        jobId:
          type: integer
          description: Unique ID of the job.
          example: 123456
        name:
          type: string
          description: Logpush job name; the name cannot be changed after the job is created.
          example: my-logpush-job
        logType:
          type: string
          description: Type of logs; available log types are `http_requests`, `firewall_events`, and `page_shield_events`.
          example: http_requests
          enum:
            - http_requests
            - firewall_events
            - page_shield_events
        filter:
          type: string
          description: Filter provides a way to customize which logs you want to receive. Filters are added as escaped JSON strings formatted. If the filter is not displayed, it indicates that all logs should be included.
        logFields:
          items:
            type: string
          type: array
          description: List of log fields. Depending on the type of log, the list of fields that you would like to see in the logs may vary.
          example:
            - ClientRequestBytes
            - ClientRequestHost
            - ClientRequestMethod
        destinationPath:
          type: string
          description: Uniquely identifies s3 bucket for logs.
          example: s3://customer-bucket/site-name/{DATE}?region=us-east-1&sse=AES256
        enabled:
          type: boolean
          description: Flag that indicates if the job is enabled or disabled.
          example: false
        lastComplete:
          type: string
          description: The last time that the log has been successfully transmitted to the destination.
          format: date-time
          example: '2023-01-02T00:00:00Z'
        lastError:
          type: string
          description: The last time the job failed. If empty, the job has either never failed or has run successfully at least once since the last failure.
          format: date-time
          example: '2023-01-01T10:00:00Z'
        errorMessage:
          type: string
          description: Provide details for the last failure message. If this field is empty, it indicates that the job successfully transmitted logs to the destination.
          example: no permissions to write to destination bucket
        createdOn:
          type: string
          description: Job creation time.
          format: date-time
          example: '2023-01-01T00:00:27Z'
      description: Logpush job response
    LogpushJobsEnvelope:
      type: object
      required:
        - data
      properties:
        data:
          items:
            $ref: '#/components/schemas/LogpushResponse'
          type: array
    LogpushCreateRequest:
      required:
        - destinationPath
        - logFields
        - logType
        - name
        - ownershipChallengeToken
      type: object
      properties:
        destinationPath:
          type: string
          description: Uniquely identifies s3 bucket for logs. Additional configuration parameters like region can be included. The string {DATE} in the URL path to separate logs into daily subdirectories; for example `s3://customer-bucket/logs/{DATE}?region=us-east-1&sse=AES256` The name of the directory will be replaced with the date in YYYYMMDD format (e.g. 20220215) when the logs are stored.
          example: s3://customer-bucket/site-name/{DATE}?region=us-east-1&sse=AES256
        name:
          type: string
          description: Logpush job name; the name cannot be changed after the job is created.
          example: my-logpush-job
        filter:
          type: string
          description: Filter provides a way to customize which logs you want to receive. Filters are added as escaped JSON strings formatted. Default will include all logs.
        logFields:
          items:
            type: string
          type: array
          description: List of log fields. Depending on the type of log, the list of fields that you would like to see in the logs may vary.
          example:
            - ClientRequestBytes
            - ClientRequestHost
            - ClientRequestMethod
        ownershipChallengeToken:
          type: string
          description: Ownership token to proves the ownership of the destinationPath.
          example: abc00000000000000000000
        logType:
          type: string
          description: Type of logs. Available log types are `http_requests`, `firewall_events`, and `page_shield_events`.
          example: http_requests
          enum:
            - http_requests
            - firewall_events
            - page_shield_events
      description: Request for create Logpush job.
    LogpushEnvelope:
      type: object
      required:
        - data
      properties:
        data:
          $ref: '#/components/schemas/LogpushResponse'
    LogpushUpdateRequest:
      type: object
      properties:
        enabled:
          type: boolean
          description: Flag that indicates if the job is enabled or disabled.
          example: true
        filter:
          type: string
          description: Provides customized selection for logs you want to receive. Filters are added as escaped, formatted JSON strings. By default, all logs are included.
          example: '{"where":{"key":"ClientRequestPath","operator":"contains","value":"/example-path"}}'
        logFields:
          items:
            type: string
          type: array
          description: List of log fields. Depending on the log type, the list of fields that you can specify to be displayed in the log might vary.
          example:
            - ClientRequestBytes
            - ClientRequestHost
            - ClientRequestMethod
      description: Request for update Logpush job
    WAFRulePackage:
      required:
        - action_mode
        - description
        - detection_mode
        - id
        - name
        - sensitivity
        - zone_id
      type: object
      properties:
        id:
          maxLength: 32
          type: string
          example: a25a9a7e9c00afc1fb2e0245519d725b
        name:
          type: string
          description: Name of the firewall package
        description:
          type: string
          description: Summary of purpose/function of firewall package
        detection_mode:
          type: string
          description: How the rules within the package are evaluated during the course of a request. When a package uses anomaly detection, each rule is given a score when triggered. If the total score of all triggered rules exceeds the sensitivity defined on the package, the action defined on the package is taken. Traditional detection decides which action to take when it is triggered by the request. If multiple rules are triggered, the action with highest protection is used. For example, a block action beats a challenge.
        zone_id:
          type: string
          description: Zone identifier with which this rule package is associated.
        sensitivity:
          type: string
          description: Sensitivity for traditional (owasp) rule package.
          enum:
            - low
            - medium
            - high
            - 'off'
        action_mode:
          type: string
          description: The default action that is taken for rules under traditional(owasp) firewall package.
          enum:
            - simulate
            - challenge
            - block
    WAFRulePackageEnvelope:
      type: object
      required:
        - data
      properties:
        data:
          $ref: '#/components/schemas/WAFRulePackage'
    WafPackagePatchRequest:
      required:
        - action_mode
        - sensitivity
      type: object
      properties:
        sensitivity:
          type: string
          description: Sensitivity for traditional (owasp) rule package.
          enum:
            - low
            - medium
            - high
            - 'off'
        action_mode:
          type: string
          description: The default action that is taken for rules under traditional(owasp) firewall package.
          enum:
            - simulate
            - challenge
            - block
    CustomRule:
      required:
        - actions
        - description
        - enabled
        - expression
        - lastUpdated
        - ruleId
      type: object
      properties:
        ruleId:
          type: string
          description: The ID of the custom rule.
          example: 2c0fc9fa937b11eaa1b71c4d701ab86e
        description:
          type: string
          description: The description of the custom rule.
          example: Block traffic for malformed URL requests.
        expression:
          type: string
          description: The expression that determines the custom rule's behavior.
          example: (http.request.uri.path matches \"^/path1/.*\")
        actions:
          items:
            type: string
          type: array
          description: The action(s) applied by the custom rule.
          example:
            - block
        lastUpdated:
          type: string
          description: Date when the custom rule was last updated.
          format: date-time
          example: '2022-01-01T05:20:00Z'
        enabled:
          type: boolean
          description: Whether or not the custom rule is enabled.
          example: true
      description: A custom rule.
    CustomRulesEnvelope:
      type: object
      required:
        - data
      properties:
        data:
          items:
            $ref: '#/components/schemas/CustomRule'
          type: array
    RulePosition:
      type: object
      properties:
        before:
          type: string
          description: Insert the current rule before this ruleId.
          example: 2c0fc9fa937b11eaa1b71c4d701ab86e
        after:
          type: string
          description: Insert the current rule after this ruleId.
          example: 2c0fc9fa937b11eaa1b71c4d701ab86e
      description: Used to specify the position of a rule.
    CustomRulesPostRequest:
      required:
        - actions
        - description
        - expression
      type: object
      properties:
        description:
          type: string
          description: A description of the custom rule.
          example: Block traffic for malformed URL requests
        expression:
          type: string
          description: The expression that determines the custom rule's behavior.
          example: (http.request.uri.path matches \"^/path1/.*\")
        actions:
          items:
            type: string
          type: array
          description: The action(s) applied by the custom rule.
          example:
            - block
        enabled:
          type: boolean
          description: Whether or not the custom rule is enabled.
          example: true
        position:
          $ref: '#/components/schemas/RulePosition'
      description: Create a custom rule.
    CustomRuleEnvelope:
      type: object
      required:
        - data
      properties:
        data:
          $ref: '#/components/schemas/CustomRule'
    CustomRulesPatchOrderRequest:
      required:
        - ruleIds
      type: object
      properties:
        ruleIds:
          items:
            type: string
          type: array
          description: An array of ruleIds representing the new order of custom rules.
          example:
            - ffffe61cf25e4ec49c34b029ff3060f7
            - 2c0fc9fa937b11eaa1b71c4d701ab86e
      description: Update the order of all existing custom rules.
    CustomRulesPatchRequest:
      type: object
      properties:
        description:
          type: string
          description: A description of the custom rule.
          example: Block traffic for malformed URL requests
        expression:
          type: string
          description: The expression that determines the custom rule's behavior.
          example: (http.request.uri.path matches \"^/path1/.*\")
        actions:
          items:
            type: string
          type: array
          description: The action(s) applied by the custom rule.
          example:
            - block
        enabled:
          type: boolean
          description: Whether or not the custom rule is enabled.
          example: true
        position:
          $ref: '#/components/schemas/RulePosition'
      description: Update a custom rule.
    RateLimitingRule:
      required:
        - action
        - characteristics
        - description
        - enabled
        - expression
        - lastUpdated
        - period
        - requestsPerPeriod
        - ruleId
        - mitigationTimeout
      type: object
      properties:
        ruleId:
          type: string
          description: The ID of the rate limiting rule.
          example: 2c0fc9fa937b11eaa1b71c4d701ab86e
        description:
          type: string
          description: The description of the rate limiting rule.
          example: Rate limit /path1.
        expression:
          type: string
          description: The expression that defines when to evaluate the rate limiting rule.
          example: (http.request.uri.path matches \"^/path1/.*\")
        characteristics:
          items:
            type: string
          type: array
          description: Set of parameters defining how to group requests when tracking the request rate.
          example:
            - cf.unique_visitor_id
        action:
          type: string
          description: The action applied by the rate limiting rule. Valid actions are "block", "managed_challenge", "js_challenge", "legacy_captcha", and "log".
          example: block
        period:
          type: integer
          description: The period of time to consider when evaluating the request rate (in seconds). Valid values are 10, 60, 120, 300, and 600.
          example: 60
        requestsPerPeriod:
          type: integer
          description: The limit for the number of requests in the specified period of time.
          example: 50
        mitigationTimeout:
          type: integer
          description: After the rate is reached, the rate limiting rule applies the rule action to further requests for the period of time defined in this field (in seconds). When set to 0, the rule throttles requests over the maximum configured rate. When greater than 0, the action is presented for the selected duration after the configured rate is exceeded. Valid values are 0, 60, 120, 300, 600, 3600, and 86400.
          example: 600
        countingExpression:
          type: string
          description: The expression that defines what kind of requests we want to rate limit.
          example: (http.request.uri.path matches \"^/path1/.*\" and http.response.code eq 400)
        lastUpdated:
          type: string
          description: Date when the rate limiting rule was last updated.
          format: date-time
          example: '2022-01-01T05:20:00Z'
        enabled:
          type: boolean
          description: Whether or not the rate limiting rule is enabled.
          example: true
      description: A rate limiting rule.
    RateLimitingRulesEnvelope:
      type: object
      required:
        - data
      properties:
        data:
          items:
            $ref: '#/components/schemas/RateLimitingRule'
          type: array
    RateLimitingRulesPostRequest:
      required:
        - action
        - characteristics
        - description
        - expression
        - period
        - requestsPerPeriod
        - mitigationTimeout
      type: object
      properties:
        description:
          type: string
          description: The description of the rate limiting rule.
          example: Rate limit /path1.
        expression:
          type: string
          description: The expression that defines when to evaluate the rate limiting rule.
          example: (http.request.uri.path matches \"^/path1/.*\")
        characteristics:
          items:
            type: string
          type: array
          description: Set of parameters defining how to group requests when tracking the request rate.
          example:
            - cf.unique_visitor_id
        action:
          type: string
          description: The action applied by the rate limiting rule. Valid actions are "block", "managed_challenge", "js_challenge", "legacy_captcha", and "log".
          example: block
        period:
          type: integer
          description: The period of time to consider when evaluating the request rate (in seconds). Valid values are 10, 60, 120, 300, and 600.
          example: 60
        requestsPerPeriod:
          type: integer
          description: The limit for the number of requests in the specified period of time.
          example: 50
        mitigationTimeout:
          type: integer
          description: After the rate is reached, the rate limiting rule applies the rule action to further requests for the period of time defined in this field (in seconds). When set to 0, the rule throttles requests over the maximum configured rate. When greater than 0, the action is presented for the selected duration after the configured rate is exceeded. Valid values are 0, 60, 120, 300, 600, 3600, and 86400.
          example: 600
        countingExpression:
          type: string
          description: The expression that defines what kind of requests we want to rate limit.
          example: (http.request.uri.path matches \"^/path1/.*\" and http.response.code eq 400)
        enabled:
          type: boolean
          description: Whether or not the rate limiting rule is enabled.
          example: true
        position:
          $ref: '#/components/schemas/RulePosition'
      description: Create a rate limiting rule.
    RateLimitingRuleEnvelope:
      type: object
      required:
        - data
      properties:
        data:
          $ref: '#/components/schemas/RateLimitingRule'
    RateLimitingRulesPatchRequest:
      type: object
      properties:
        description:
          type: string
          description: The description of the rate limiting rule.
          example: Rate limit /path1.
        expression:
          type: string
          description: The expression that defines when to evaluate the rate limiting rule.
          example: (http.request.uri.path matches \"^/path1/.*\")
        characteristics:
          items:
            type: string
          type: array
          description: Set of parameters defining how to group requests when tracking the request rate.
          example:
            - cf.unique_visitor_id
        action:
          type: string
          description: The action applied by the rate limiting rule. Valid actions are "block", "managed_challenge", "js_challenge", "legacy_captcha", and "log".
          example: block
        period:
          type: integer
          description: The period of time to consider when evaluating the request rate (in seconds). Valid values are 10, 60, 120, 300, and 600.
          example: 60
        requestsPerPeriod:
          type: integer
          description: The limit for the number of requests in the specified period of time.
          example: 50
        mitigationTimeout:
          type: integer
          description: After the rate is reached, the rate limiting rule applies the rule action to further requests for the period of time defined in this field (in seconds). When set to 0, the rule throttles requests over the maximum configured rate. When greater than 0, the action is presented for the selected duration after the configured rate is exceeded. Valid values are 0, 60, 120, 300, 600, 3600, and 86400.
          example: 600
        countingExpression:
          type: string
          description: The expression that defines what kind of requests we want to rate limit.
          example: (http.request.uri.path matches \"^/path1/.*\" and http.response.code eq 400)
        enabled:
          type: boolean
          description: Whether or not the rate limiting rule is enabled.
          example: true
        position:
          $ref: '#/components/schemas/RulePosition'
      description: Update a rate limiting rule.
    WAFManagedRuleset:
      required:
        - action
        - enabled
        - name
        - rulesetId
      type: object
      properties:
        name:
          type: string
          description: The name of the WAF managed ruleset.
          example: OWASP Core Ruleset
        rulesetId:
          type: string
          description: The ID of the WAF managed ruleset.
          example: 4814384a9e5d4991b9815dcfc25d2f1f
        action:
          type: string
          description: The action applied by the WAF managed ruleset.
          example: default
        anomalyScore:
          type: string
          description: The anomaly score threshold of the WAF managed ruleset. Only applicable for the OWASP Core Ruleset.
          example: low
        anomalyScoreThreshold:
          type: integer
          description: The numerical value of the anomaly score threshold of the WAF managed ruleset. Only applicable for the OWASP Core Ruleset.
          example: 60
        paranoiaLevel:
          type: integer
          description: The paranoia level of the WAF managed ruleset. Higher paranoia levels activate more aggressive rules. Only applicable for the OWASP Core Ruleset.
          example: 1
        enabled:
          type: boolean
          description: Whether or not the WAF managed ruleset is enabled.
          example: true
      description: A WAF managed ruleset.
    WAFManagedRulesetsEnvelope:
      type: object
      required:
        - data
      properties:
        data:
          type: array
          items:
            $ref: '#/components/schemas/WAFManagedRuleset'
    WAFManagedRulesetRequest:
      type: object
      properties:
        action:
          type: string
          description: The action applied by the WAF managed ruleset.
          example: default
        anomalyScore:
          type: string
          description: The anomaly score threshold of the WAF managed ruleset. Only applicable for the OWASP Core Ruleset.
          example: low
        paranoiaLevel:
          type: integer
          description: The paranoia level of the WAF managed ruleset. Higher paranoia levels activate more aggressive rules. Only applicable for the OWASP Core Ruleset.
          example: 1
        enabled:
          type: boolean
          description: Whether or not the WAF managed ruleset is enabled.
          example: true
      description: A WAF managed ruleset request body.
    WAFManagedRulesetEnvelope:
      type: object
      required:
        - data
      properties:
        data:
          $ref: '#/components/schemas/WAFManagedRuleset'
    WAFManagedRule:
      required:
        - action
        - categories
        - description
        - enabled
        - lastUpdated
        - ruleId
      type: object
      properties:
        ruleId:
          type: string
          description: The ID of the WAF managed rule.
          example: 5de7edfa648c4d6891dc3e7f84534ffa
        action:
          type: string
          description: The action applied by the WAF managed rule.
          example: block
        score:
          type: integer
          description: The score of the WAF managed rule. Only applicable for the OWASP Managed Ruleset.
          example: 5
        categories:
          items:
            type: string
          type: array
          description: A list of categories describing the function of the WAF managed rule.
          example:
            - broken-access-control
            - wordpress
        description:
          type: string
          description: The description of the WAF managed rule.
          example: Wordpress - Broken Access Control
        lastUpdated:
          type: string
          description: Date when the WAF managed rule was last updated.
          format: date-time
          example: '2024-01-01T05:20:00Z'
        enabled:
          type: boolean
          description: Whether or not the WAF managed rule is enabled.
          example: true
      description: A WAF managed rule.
    WAFManagedRulesEnvelope:
      type: object
      required:
        - data
      properties:
        data:
          items:
            $ref: '#/components/schemas/WAFManagedRule'
          type: array
    WAFManagedRuleRequest:
      type: object
      properties:
        action:
          type: string
          description: The action applied by the WAF managed rule.
          example: block
        enabled:
          type: boolean
          description: Whether or not the WAF managed rule is enabled.
          example: true
      description: A PATCH request for updating a WAF managed rule.
    WAFManagedRuleEnvelope:
      type: object
      required:
        - data
      properties:
        data:
          $ref: '#/components/schemas/WAFManagedRule'
    OriginHeaderModification:
      required:
        - headerName
        - headerValue
        - lastUpdated
      type: object
      properties:
        headerName:
          type: string
          description: The name of the header forwarded to the origin.
          example: x-sfdc-access-control
        headerValue:
          type: string
          description: The masked value of the header forwarded to the origin.
          example: '****************789'
        lastUpdated:
          type: string
          description: Date when the rule was last updated.
          format: date-time
          example: '2022-01-01T05:20:00Z'
      description: An origin header modification rule.
    OriginHeaderModificationEnvelope:
      type: object
      required:
        - data
      properties:
        data:
          $ref: '#/components/schemas/OriginHeaderModification'
    OriginHeaderModificationPutRequest:
      required:
        - headerValue
      type: object
      properties:
        headerValue:
          type: string
          description: The value of the header forwarded to the origin.
          example: 123456789
        headerName:
          type: string
          description: The name of the header forwarded to the origin. Cannot be modified for the MRT origin.
      description: Put request for creating/updating the origin header modification.
    CipherSuitesResponse:
      required:
        - cipherSuiteType
        - ciphers
      type: object
      properties:
        ciphers:
          items:
            type: string
          type: array
          description: List of zone level ciphers in the suite.
          example:
            - ECDHE-ECDSA-AES128-GCM-SHA256
            - ECDHE-RSA-AES128-GCM-SHA256
        cipherSuiteType:
          type: string
          description: Classification of the ciphers in the suite.
          example: Modern
          enum:
            - Compatible
            - Modern
            - Custom
            - Legacy
      description: Cipher suites information.
    CipherSuitesEnvelope:
      type: object
      required:
        - data
      properties:
        data:
          $ref: '#/components/schemas/CipherSuitesResponse'
    CipherSuitesRequest:
      required:
        - cipherSuiteType
      type: object
      properties:
        ciphers:
          items:
            type: string
          type: array
          description: List of zone level ciphers in the suite.
          example:
            - ECDHE-ECDSA-AES128-GCM-SHA256
            - ECDHE-RSA-AES128-GCM-SHA256
        cipherSuiteType:
          type: string
          description: Classification of all ciphers in the suite.
          example: Modern
          enum:
            - Compatible
            - Modern
            - Custom
            - Legacy
      description: Cipher suites information.
  securitySchemes:
    AmOAuth2:
      type: oauth2
      description: AccountManager OAuth 2.0 bearer token Authentication.
      flows:
        clientCredentials:
          tokenUrl: https://account.demandware.com/dwsso/oauth2/access_token
          scopes:
            sfcc.cdn-zones: CDN API Scope READONLY
            sfcc.cdn-zones.rw: CDN API Scope
        authorizationCode:
          authorizationUrl: https://account.demandware.com/dwsso/oauth2/authorize
          tokenUrl: https://account.demandware.com/dwsso/oauth2/access_token
          scopes:
            sfcc.cdn-zones: CDN API Scope READONLY
            sfcc.cdn-zones.rw: CDN API Scope
  parameters:
    organizationId:
      description: An identifier for the organization the request is being made by
      name: organizationId
      in: path
      required: true
      example: f_ecom_zzxy_prd
      schema:
        $ref: '#/components/schemas/OrganizationId'
    mtlsCertificateId:
      name: mtlsCertificateId
      in: path
      required: true
      schema:
        type: string
    webhookId:
      name: webhookId
      in: path
      required: true
      schema:
        type: string
    zoneId:
      name: zoneId
      in: path
      required: true
      schema:
        type: string
    policyId:
      name: policyId
      in: path
      required: true
      schema:
        type: string
    direction:
      name: direction
      in: query
      description: The direction used to sort returned scripts.
      required: false
      schema:
        type: string
        enum:
          - asc
          - desc
    excludeCdnCgi:
      name: excludeCdnCgi
      in: query
      description: When true, excludes scripts existing in a /cdn-cgi path from the returned scripts. Default is true.
      required: false
      schema:
        type: boolean
    excludeDuplicates:
      name: excludeDuplicates
      in: query
      description: When true, excludes duplicate scripts. Default is false.
      required: false
      schema:
        type: boolean
    excludeUrls:
      name: excludeUrls
      in: query
      description: Excludes scripts with a URL that contains one of the URL-encoded URLs separated by commas.
      required: false
      schema:
        type: string
    hosts:
      name: hosts
      in: query
      description: Includes scripts that match one or more URL-encoded hostnames separated by commas. Wildcards are supported at the beginning and end of each hostname.
      required: false
      schema:
        type: string
    orderBy:
      name: orderBy
      in: query
      description: The field used to sort returned scripts.
      required: false
      schema:
        type: string
        enum:
          - first_seen_at
          - last_seen_at
    pageUrl:
      name: pageUrl
      in: query
      description: Includes scripts that match one or more page URLs (separated by commas) where they were last detected. Wildcards are supported at the beginning and end of each page URL.
      required: false
      schema:
        type: string
    prioritizeMalicious:
      name: prioritizeMalicious
      in: query
      description: When true, lists malicious scripts first in the returned scripts.
      required: false
      schema:
        type: boolean
    status:
      name: status
      in: query
      description: Filters the returned scripts using a comma-separated list of script statuses. Accepted values are 'active', 'infrequent', and 'inactive'. Default is 'active'.
      required: false
      schema:
        type: string
    urls:
      name: urls
      in: query
      description: Includes scripts with a URL that contains one or more URL-encoded URLs separated by commas.
      required: false
      schema:
        type: string
    scriptId:
      name: scriptId
      in: path
      required: true
      schema:
        type: string
    groupIdPath:
      name: groupId
      in: path
      description: WAF Group that contains the WAF rules.
      example: f90712123fb02287348dd34c0a282bb9
      required: true
      schema:
        type: string
    groupIdQuery:
      name: groupId
      in: query
      description: WAF Group that contains the WAF rules.
      example: f90712123fb02287348dd34c0a282bb9
      required: false
      schema:
        type: string
    ruleId:
      name: ruleId
      in: path
      required: true
      schema:
        type: string
    certificateId:
      name: certificateId
      in: path
      required: true
      schema:
        type: string
    customHostnameId:
      name: customHostnameId
      in: path
      required: true
      schema:
        type: string
    rulesetId:
      name: rulesetId
      in: path
      required: true
      schema:
        type: string
    jobId:
      name: jobId
      in: path
      required: true
      schema:
        type: string
    type:
      name: type
      in: path
      description: The type of origin header modification. Only the `mrt` type is supported.
      required: true
      schema:
        type: string
  examples:
    StorefrontZoneCreateRequestBodyExample:
      value:
        domainName: cc-merchant.com
    StorefrontZoneCreateResponse:
      value:
        data:
          zoneId: 023e105f4ecef8ad9ca31a8372d0c353
          zoneName: stg-zzzz-cc-merchant-com.cc-ecdn.net
          createdOn: '2022-01-01T05:20:00.12345Z'
          status: active
    BadRequest:
      value:
        type: https://api.commercecloud.salesforce.com/documentation/error/v1/errors/bad-request
        title: Bad Request
        detail: Request body contains 1 or more attributes that contains errors.
    Unauthorized:
      value:
        type: https://api.commercecloud.salesforce.com/documentation/error/v1/errors/unauthorized
        title: UnAuthorized Access
        detail: The authorization token passed is no longer valid
    Forbidden:
      value:
        type: https://api.commercecloud.salesforce.com/documentation/error/v1/errors/forbidden-access
        title: Forbidden
        detail: Access to requested resource is forbidden.
    NotFound:
      value:
        type: https://api.commercecloud.salesforce.com/documentation/error/v1/errors/resource-not-found
        title: Not Found
        detail: Requested resource was not found
    InternalServerError:
      value:
        type: https://api.commercecloud.salesforce.com/documentation/error/v1/errors/internal-server
        title: Internal Server Error
        detail: An internal server error occured. Please contact support.
    MtlsCodeUploadGetCertificatesResponse:
      value:
        data:
          - mtlsCertificateId: 465a48f6-3d98-4c15-9312-211984ee8629
            expiresOn: '2022-01-12T04:15:57Z'
            issuer: DigiCert
            signature: SHA256WithRSA
            uploadedOn: '2020-01-12T04:15:57Z'
            ca: true
            serialNumber: '432217133297895665180570788458463042229861757760'
            mtlsCertificateName: mtls_cert_name
            mtlsAssociatedCodeUploadHostname: mtls.cert.salesforce.com
          - mtlsCertificateId: 465a48f6-3d98-4c15-9312-211984ee8630
            expiresOn: '2022-01-12T04:15:57Z'
            issuer: DigiCert
            signature: SHA256WithRSA
            uploadedOn: '2020-01-12T04:15:57Z'
            ca: true
            serialNumber: '432217133297895665180570788458463042229861757761'
            mtlsCertificateName: mtls_cert_name
            mtlsAssociatedCodeUploadHostname: mtls.cert.salesforce.com
    MtlsCodeUploadPostCertificateRequestBodyExample:
      value:
        name: mtls_cert_name
        certificate: |-
          -----BEGIN CERTIFICATE-----
          MIIDtTCCAp2gAwIBAgIJAMHAwfXZ5PWMA0GCSqGSIb3DQEBCwUAMEUxCzAJBgNV
          BAYTAkFVMRMwEQYDVQQIEwpTb21lLVN0YXRlMSEwHwYDVQQKExhJbnRlcm5ldCBX
          aWRnaXRzIFB0eSBMdGQwHhcNMTYwODI0MTY0MzAxWhcNMTYxMTIyMTY0MzAxWjBF
          MQswCQYDVQQGEwJBVTETMBEGA1UECBMKU29tZS1TdGF0ZTEhMB8GA1UEChMYSW50
          ZXJuZXQgV2lkZ2l0cyBQdHkgTHRkMIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIB
          CgKCAQEAwQHoetcl9+5ikGzV6cMzWtWPJHqXT3wpbEkRU9Yz7lgvddmGdtcGbg/1
          CGZu0jJGkMoppoUo4c3dts3iwqRYmBikUP77wwY2QGmDZw2FvkJCJlKnabIRuGvB
          KwzESIXgKk2016aTP6/dAjEHyo6SeoK8lkIySUvK0fyOVlsiEsCmOpidtnKX/a+5
          0GjB79CJH4ER2lLVZnhePFR/zUOyPxZQQ4naHf7yu/b5jhO0f8fwt+pyFxIXjbEI
          dZliWRkRMtzrHOJIhrmJ2A1J7iOrirbbwillwjjNVUWPf3IJ3M12S9pEewooaeO2
          izNTERcG9HzAacbVRn2Y2SWIyT/18QIDAQABo4GnMIGkMB0GA1UdDgQWBBT/LbE4
          9rWf288N6sJA5BRb6FJIGDB1BgNVHSMEbjBsgBT/LbE49rWf288N6sJA5BRb6FJI
          GKFJpEcwRTELMAkGA1UEBhMCQVUxEzARBgNVBAgTClNvbWUtU3RhdGUxITAfBgNV
          BAoTGEludGVybmV0IFdpZGdpdHMgUHR5IEx0ZIIJAMHAwfXZ5/PWMAwGA1UdEwQF
          MAMBAf8wDQYJKoZIhvcNAQELBQADggEBAHHFwl0tH0quUYZYO0dZYt4R7SJ0pCm2
          2satiyzHl4OnXcHDpekAo7/a09c6Lz6AU83cKy/+x3/djYHXWba7HpEu0dR3ugQP
          Mlr4zrhd9xKZ0KZKiYmtJH+ak4OM4L3FbT0owUZPyjLSlhMtJVcoRp5CJsjAMBUG
          SvD8RX+T01wzox/Qb+lnnNnOlaWpqu8eoOenybxKp1a9ULzIVvN/LAcc+14vioFq
          2swRWtmocBAs8QR9n4uvbpiYvS8eYueDCWMM4fvFfBhaDZ3N9IbtySh3SpFdQDhw
          YbjM2rxXiyLGxB4Bol7QTv4zHif7Zt89FReT/NBy4rzaskDJY5L6xmY=
          -----END CERTIFICATE-----
        privateKey: |-
          -----BEGIN RSA PRIVATE KEY-----
          MIIEowIBAAKCAQEAwQHoetcl9+5ikGzV6cMzWtWPJHqXT3wpbEkRU9Yz7lgvddmG
          dtcGbg/1CGZu0jJGkMoppoUo4c3dts3iwqRYmBikUP77wwY2QGmDZw2FvkJCJlKn
          abIRuGvBKwzESIXgKk2016aTP6/dAjEHyo6SeoK8lkIySUvK0fyOVlsiEsCmOpid
          tnKX/a+50GjB79CJH4ER2lLVZnhePFR/zUOyPxZQQ4naHf7yu/b5jhO0f8fwt+py
          FxIXjbEIdZliWRkRMtzrHOJIhrmJ2A1J7iOrirbbwillwjjNVUWPf3IJ3M12S9pE
          ewooaeO2izNTERcG9HzAacbVRn2Y2SWIyT/18QIDAQABAoIBACbhTYXBZYKmYPCb
          HBR1IBlCQA2nLGf0qRuJNJZg5iEzXows/6tc8YymZkQE7nolapWsQ+upk2y5Xdp/
          axiuprIs9JzkYK8Ox0r+dlwCG1kSW+UAbX0bQ/qUqlsTvU6muVuMP8vZYHxJ3wmb
          +ufRBKztPTQ/rYWaYQcgC0RWI20HTFBMxlTAyNxYNWzX7RKFkGVVyB9RsAtmcc8g
          +j4OdosbfNoJPS0HeIfNpAznDfHKdxDk2Yc1tV6RHBrC1ynyLE9+TaflIAdo2MVv
          KLMLq51GqYKtgJFIlBRPQqKoyXdz3fGvXrTkf/WY9QNq0J1Vk5ERePZ54mN8iZB7
          9lwy/AkCgYEA6FXzosxswaJ2wQLeoYc7ceaweX/SwTvxHgXzRyJIIT0eJWgx13Wo
          /WA3Iziimsjf6qE+SI/8laxPp2A86VMaIt3Z3mJN/CqSVGw8LK2AQst+OwdPyDMu
          iacE8lj/IFGC8mwNUAb9CzGU3JpU4PxxGFjS/eMtGeRXCWkK4NE+G08CgYEA1Kp9
          N2JrVlqUz+gAX+LPmE9OEMAS9WQSQsfCHGogIFDGGcNf7+uwBM7GAaSJIP01zcoe
          VAgWdzXCv3FLhsaZoJ6RyLOLay5phbu1iaTr4UNYm5WtYTzMzqh8l1+MFFDl9xDB
          vULuCIIrglM5MeS/qnSg1uMoH2oVPj9TVst/ir8CgYEAxrI7Ws9Zc4Bt70N1As+U
          lySjaEVZCMkqvHJ6TCuVZFfQoE0r0whdLdRLU2PsLFP+q7qaeZQqgBaNSKeVcDYR
          9B+nY/jOmQoPewPVsp/vQTCnE/R81spu0mp0YI6cIheT1Z9zAy322svcc43JaWB7
          mEbeqyLOP4Z4qSOcmghZBSECgYACvR9Xs0DGn+wCsW4vze/2ei77MD4OQvepPIFX
          dFZtlBy5ADcgE9z0cuVB6CiL8DbdK5kwY9pGNr8HUCI03iHkW6Zs+0L0YmihfEVe
          PG19PSzK9CaDdhD9KFZSbLyVFmWfxOt50H7YRTTiPMgjyFpfi5j2q348yVT0tEQS
          fhRqaQKBgAcWPokmJ7EbYQGeMbS7HC8eWO/RyamlnSffdCdSc7ue3zdVJxpAkQ8W
          qu80pEIF6raIQfAf8MXiiZ7auFOSnHQTXUbhCpvDLKi0Mwq3G8Pl07l+2s6dQG6T
          lv6XTQaMyf6n1yjzL+fzDrH3qXMxHMO/b13EePXpDMpY7HQpoLDi
          -----END RSA PRIVATE KEY-----
    MtlsCodeUploadGetCertificateResponse:
      value:
        data:
          mtlsCertificateId: 465a48f6-3d98-4c15-9312-211984ee8629
          expiresOn: '2022-01-12T04:15:57Z'
          issuer: DigiCert
          signature: SHA256WithRSA
          uploadedOn: '2020-01-12T04:15:57Z'
          ca: true
          serialNumber: '432217133297895665180570788458463042229861757760'
          mtlsCertificateName: mtls_cert_name
          mtlsAssociatedCodeUploadHostname: mtls.cert.salesforce.com
    PageShieldPoliciesGetResponse:
      value:
        data:
          - action: log
            description: example page shield policy 1
            enabled: true
            expression: (http.request.full_uri contains "/Checkout-Begin" and http.host eq "www.example.com")
            value: script-src salesforce.com *.salesforce.com https://www.example.com/on/demandware.static/Sites-RefArch-Site/-/en_US/v1738096133818/js/checkout.js 'unsafe-inline'
            id: 4805ab87bb867579757a4564ba46ebca
          - action: log
            description: example page shield policy 2
            enabled: true
            expression: ends_with(http.request.uri.path, "/test1")
            value: script-src 'none'
            id: 7650c87c9c2846c296ea4564ba46ebca
    PageShieldPolicyRequestBodyExample:
      value:
        action: log
        description: example page shield policy
        enabled: true
        expression: ends_with(http.request.uri.path, "/test1")
        value: script-src 'none'
    PageShieldPolicyGetResponse:
      value:
        data:
          action: log
          description: example page shield policy
          enabled: true
          expression: ends_with(http.request.uri.path, "/test1")
          value: script-src 'none'
          id: 7650c87c9c2846c296ea4564ba46ebca
    PageShieldPolicyPutRequestBodyExample:
      value:
        action: allow
        enabled: true
    PageShieldPolicyPutResponse:
      value:
        data:
          action: allow
          description: example page shield policy
          enabled: true
          expression: ends_with(http.request.uri.path, "/test1")
          value: script-src 'none'
          id: 7650c87c9c2846c296ea4564ba46ebca
    ZonesGetResponse:
      value:
        data:
          - zoneId: e4288c0a1f80fa5490b598d74c69bde4
            name: sfcc-cdn.net
            status: pending
    WafGroupsGetResponse:
      value:
        data:
          - groupId: f90712123fb02287348dd34c0a282bb9
            mode: 'on'
            description: 'This WAF Group contains a number of rules that have been created to deal with specific attack types. '
          - groupId: da9d75b083345c63f48e6fde5f617a8b
            mode: 'on'
            description: This WAF Group contains rules to deal with known malicious traffic or patch flaws in specific web applications.
    WafGroupPutRequestBodyExample:
      value:
        action: monitor
        mode: 'on'
    WafGroupPutResponse:
      value:
        data:
          groupId: f90712123fb02287348dd34c0a282bb9
          mode: 'on'
          description: 'This WAF Group contains a number of rules that have been created to deal with specific attack types. '
    WafRulesGetResponse:
      value:
        data:
          - ruleId: '100001'
            groupId: f90712123fb02287348dd34c0a282bb9
            action: monitor
            defaultAction: challenge
            description: Anomaly:Header:User-Agent - Missing
          - ruleId: '100002'
            groupId: f90712123fb02287348dd34c0a282bb9
            action: monitor
            defaultAction: challenge
            description: DoS - IE6 Binary POST
          - ruleId: 100002A
            groupId: f90712123fb02287348dd34c0a282bb9
            action: monitor
            defaultAction: challenge
            description: DoS - CtrlFunc Botnet
    WafRuleGetResponse:
      value:
        data:
          ruleId: '100001'
          groupId: f90712123fb02287348dd34c0a282bb9
          action: monitor
          defaultAction: challenge
          description: Anomaly:Header:User-Agent - Missing
    WafRulePutRequestBodyExample:
      value:
        action: monitor
    WafRulePutResponse:
      value:
        data:
          ruleId: '100001'
          groupId: f90712123fb02287348dd34c0a282bb9
          action: monitor
          defaultAction: challenge
          description: 'Anomaly:Header:User-Agent - Missing '
    SpeedSettingsResponse:
      value:
        data:
          brotliCompression: 'off'
          http2Prioritization: 'off'
          webp: 'off'
          polish: 'off'
          earlyHints: 'off'
          http3: 'off'
          http2ToOrigin: 'off'
    SpeedSettingsPatchRequestBodyExample:
      value:
        brotliCompression: 'off'
        http2Prioritization: 'off'
    SecuritySettingsResponse:
      value:
        data:
          hsts:
            enabled: false
            includeSubdomains: false
            maxAge: 200
            preload: false
          securityLevel: medium
          tls13Enabled: false
          alwaysUseHttps: true
    SecuritySettingsUpdateRequestBodyExample:
      value:
        hsts:
          enabled: false
          preload: true
        securityLevel: high
        tls13Enabled: true
        alwaysUseHttps: true
    CertificatesGetResponse1:
      value:
        data:
          - certificateId: 14b72e2c-db8e-40ec-9f89-d80ca431a36e
            status: PENDING_VALIDATION
            minTlsVersion: '1.2'
            certificateType: automatic
            certificateAuthority: google
            certificateValidation: txt
            certificateVerificationTXTName: _acme-challenge.test.example.com
            certificateVerificationTXTValue: DBCtxdyQSyo9eXxys-uGVCwPFHLsc8_lu11QetQz4IA
            certificateVerificationStatus: PENDING
            customHostnameId: 6c8beb36-a679-4eca-a09a-e3d6aca12787
            customHostname: test.example.com
            customHostnameStatus: ACTIVE
          - certificateId: 16b3f671-de15-4ba8-8c02-84ba011b7751
            hosts:
              - shop.example.com
            expiresOn: '2024-05-27T22:58:10Z'
            uploadedOn: '2024-02-27T22:58:11Z'
            issuer: LetsEncrypt
            signature: SHA256WithRSA
            status: ACTIVE
            minTlsVersion: '1.2'
            certificateType: automatic
            certificateAuthority: lets_encrypt
            certificateValidation: http
            customHostnameId: dd625c6d-8553-4d14-abc2-6d747866c8d9
            customHostname: shop.example.com
            customHostnameStatus: ACTIVE
          - certificateId: f135013c-2bf7-4225-b043-84cf35a93e12
            hosts:
              - '*.example.com'
            expiresOn: '2024-04-09T20:36:39Z'
            uploadedOn: '2024-03-19T22:32:41Z'
            issuer: LetsEncrypt
            signature: SHA256WithRSA
            status: ACTIVE
            minTlsVersion: '1.2'
            certificateType: custom
            customHostnameId: 6567aee6-bdbe-4cb1-9f4b-73209c5e867a
            customHostname: www.example.com
            customHostnameStatus: ACTIVE
    CertificatesGetResponse2:
      value:
        data:
          - certificateId: dc95610a-9a20-4e24-b6d6-232df5fc32d1
            hosts:
              - shop.example.com
            expiresOn: '2024-05-14T23:00:45Z'
            uploadedOn: '2024-03-19T21:28:36Z'
            issuer: LetsEncrypt
            signature: SHA256WithRSA
            status: ACTIVE
            certificateType: custom_legacy
          - certificateId: 3a2a71c6-c00f-41c4-86dd-d6dc434851d5
            hosts:
              - www.example.com
            expiresOn: '2024-04-15T17:07:59Z'
            uploadedOn: '2024-03-19T21:28:36Z'
            issuer: LetsEncrypt
            signature: SHA256WithRSA
            status: ACTIVE
            certificateType: custom_legacy
    CertificatePostRequestBodyExample:
      value:
        hostname: www.salesforce.com
        certificate: |-
          -----BEGIN CERTIFICATE-----
          MIIDtTCCAp2gAwIBAgIJAMHAwfXZ5PWMA0GCSqGSIb3DQEBCwUAMEUxCzAJBgNV
          BAYTAkFVMRMwEQYDVQQIEwpTb21lLVN0YXRlMSEwHwYDVQQKExhJbnRlcm5ldCBX
          aWRnaXRzIFB0eSBMdGQwHhcNMTYwODI0MTY0MzAxWhcNMTYxMTIyMTY0MzAxWjBF
          MQswCQYDVQQGEwJBVTETMBEGA1UECBMKU29tZS1TdGF0ZTEhMB8GA1UEChMYSW50
          ZXJuZXQgV2lkZ2l0cyBQdHkgTHRkMIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIB
          CgKCAQEAwQHoetcl9+5ikGzV6cMzWtWPJHqXT3wpbEkRU9Yz7lgvddmGdtcGbg/1
          CGZu0jJGkMoppoUo4c3dts3iwqRYmBikUP77wwY2QGmDZw2FvkJCJlKnabIRuGvB
          KwzESIXgKk2016aTP6/dAjEHyo6SeoK8lkIySUvK0fyOVlsiEsCmOpidtnKX/a+5
          0GjB79CJH4ER2lLVZnhePFR/zUOyPxZQQ4naHf7yu/b5jhO0f8fwt+pyFxIXjbEI
          dZliWRkRMtzrHOJIhrmJ2A1J7iOrirbbwillwjjNVUWPf3IJ3M12S9pEewooaeO2
          izNTERcG9HzAacbVRn2Y2SWIyT/18QIDAQABo4GnMIGkMB0GA1UdDgQWBBT/LbE4
          9rWf288N6sJA5BRb6FJIGDB1BgNVHSMEbjBsgBT/LbE49rWf288N6sJA5BRb6FJI
          GKFJpEcwRTELMAkGA1UEBhMCQVUxEzARBgNVBAgTClNvbWUtU3RhdGUxITAfBgNV
          BAoTGEludGVybmV0IFdpZGdpdHMgUHR5IEx0ZIIJAMHAwfXZ5/PWMAwGA1UdEwQF
          MAMBAf8wDQYJKoZIhvcNAQELBQADggEBAHHFwl0tH0quUYZYO0dZYt4R7SJ0pCm2
          2satiyzHl4OnXcHDpekAo7/a09c6Lz6AU83cKy/+x3/djYHXWba7HpEu0dR3ugQP
          Mlr4zrhd9xKZ0KZKiYmtJH+ak4OM4L3FbT0owUZPyjLSlhMtJVcoRp5CJsjAMBUG
          SvD8RX+T01wzox/Qb+lnnNnOlaWpqu8eoOenybxKp1a9ULzIVvN/LAcc+14vioFq
          2swRWtmocBAs8QR9n4uvbpiYvS8eYueDCWMM4fvFfBhaDZ3N9IbtySh3SpFdQDhw
          YbjM2rxXiyLGxB4Bol7QTv4zHif7Zt89FReT/NBy4rzaskDJY5L6xmY=
          -----END CERTIFICATE-----
        privateKey: |-
          -----BEGIN RSA PRIVATE KEY-----
          MIIEowIBAAKCAQEAwQHoetcl9+5ikGzV6cMzWtWPJHqXT3wpbEkRU9Yz7lgvddmG
          dtcGbg/1CGZu0jJGkMoppoUo4c3dts3iwqRYmBikUP77wwY2QGmDZw2FvkJCJlKn
          abIRuGvBKwzESIXgKk2016aTP6/dAjEHyo6SeoK8lkIySUvK0fyOVlsiEsCmOpid
          tnKX/a+50GjB79CJH4ER2lLVZnhePFR/zUOyPxZQQ4naHf7yu/b5jhO0f8fwt+py
          FxIXjbEIdZliWRkRMtzrHOJIhrmJ2A1J7iOrirbbwillwjjNVUWPf3IJ3M12S9pE
          ewooaeO2izNTERcG9HzAacbVRn2Y2SWIyT/18QIDAQABAoIBACbhTYXBZYKmYPCb
          HBR1IBlCQA2nLGf0qRuJNJZg5iEzXows/6tc8YymZkQE7nolapWsQ+upk2y5Xdp/
          axiuprIs9JzkYK8Ox0r+dlwCG1kSW+UAbX0bQ/qUqlsTvU6muVuMP8vZYHxJ3wmb
          +ufRBKztPTQ/rYWaYQcgC0RWI20HTFBMxlTAyNxYNWzX7RKFkGVVyB9RsAtmcc8g
          +j4OdosbfNoJPS0HeIfNpAznDfHKdxDk2Yc1tV6RHBrC1ynyLE9+TaflIAdo2MVv
          KLMLq51GqYKtgJFIlBRPQqKoyXdz3fGvXrTkf/WY9QNq0J1Vk5ERePZ54mN8iZB7
          9lwy/AkCgYEA6FXzosxswaJ2wQLeoYc7ceaweX/SwTvxHgXzRyJIIT0eJWgx13Wo
          /WA3Iziimsjf6qE+SI/8laxPp2A86VMaIt3Z3mJN/CqSVGw8LK2AQst+OwdPyDMu
          iacE8lj/IFGC8mwNUAb9CzGU3JpU4PxxGFjS/eMtGeRXCWkK4NE+G08CgYEA1Kp9
          N2JrVlqUz+gAX+LPmE9OEMAS9WQSQsfCHGogIFDGGcNf7+uwBM7GAaSJIP01zcoe
          VAgWdzXCv3FLhsaZoJ6RyLOLay5phbu1iaTr4UNYm5WtYTzMzqh8l1+MFFDl9xDB
          vULuCIIrglM5MeS/qnSg1uMoH2oVPj9TVst/ir8CgYEAxrI7Ws9Zc4Bt70N1As+U
          lySjaEVZCMkqvHJ6TCuVZFfQoE0r0whdLdRLU2PsLFP+q7qaeZQqgBaNSKeVcDYR
          9B+nY/jOmQoPewPVsp/vQTCnE/R81spu0mp0YI6cIheT1Z9zAy322svcc43JaWB7
          mEbeqyLOP4Z4qSOcmghZBSECgYACvR9Xs0DGn+wCsW4vze/2ei77MD4OQvepPIFX
          dFZtlBy5ADcgE9z0cuVB6CiL8DbdK5kwY9pGNr8HUCI03iHkW6Zs+0L0YmihfEVe
          PG19PSzK9CaDdhD9KFZSbLyVFmWfxOt50H7YRTTiPMgjyFpfi5j2q348yVT0tEQS
          fhRqaQKBgAcWPokmJ7EbYQGeMbS7HC8eWO/RyamlnSffdCdSc7ue3zdVJxpAkQ8W
          qu80pEIF6raIQfAf8MXiiZ7auFOSnHQTXUbhCpvDLKi0Mwq3G8Pl07l+2s6dQG6T
          lv6XTQaMyf6n1yjzL+fzDrH3qXMxHMO/b13EePXpDMpY7HQpoLDi
          -----END RSA PRIVATE KEY-----
    CertificatePostResponse1:
      value:
        data:
          certificateId: 730a1be4-22d7-11eb-aff1-0242ac120002
          status: ACTIVE
          hosts:
            - salesforce.com
          expiresOn: '2022-01-12T04:15:57Z'
          uploadedOn: '2020-01-12T04:15:57Z'
          issuer: DigiCert
          signature: SHA256WithRSA
          certificateType: custom
          customHostnameVerificationTXTName: _salesforce.com
          customHostnameVerificationTXTValue: 4c9c3f4f-2e91-4c5d-a902-f12f9c285b9e
          customHostnameId: 465a48f6-3d98-4c15-9312-211984ee8629
          customHostname: test.salesforce.com
          customHostnameStatus: ACTIVE
    CertificatePostResponse2:
      value:
        data:
          certificateId: 730a1be4-22d7-11eb-aff1-0242ac120002
          hosts:
            - salesforce.com
          expiresOn: '2022-01-12T04:15:57Z'
          uploadedOn: '2020-01-12T04:15:57Z'
          status: PENDING
          certificateType: automatic
          certificateAuthority: google
          certificateValidation: txt
          certificateVerificationTXTName: _acme-challenge.test.example.com
          certificateVerificationTXTValue: SH5Yet8S5dBwPXcRcCjXdf9FXMBVnQjihQ8oN8LoMv0
          certificateVerificationStatus: PENDING
          customHostnameVerificationTXTName: _salesforce.com
          customHostnameVerificationTXTValue: 4c9c3f4f-2e91-4c5d-a902-f12f9c285b9e
          customHostnameId: 465a48f6-3d98-4c15-9312-211984ee8629
          customHostname: test.salesforce.com
          customHostnameStatus: ACTIVE
    Conflict:
      value:
        type: https://api.commercecloud.salesforce.com/documentation/error/v1/errors/conflicted
        title: Resource Conflict
        detail: The request made for the resource is not valid.
    CertificateUpdateRequestBodyExample:
      value:
        hostname: www.salesforce.com
        certificate: |-
          -----BEGIN CERTIFICATE-----
          MIIDtTCCAp2gAwIBAgIJAMHAwfXZ5PWMA0GCSqGSIb3DQEBCwUAMEUxCzAJBgNV
          BAYTAkFVMRMwEQYDVQQIEwpTb21lLVN0YXRlMSEwHwYDVQQKExhJbnRlcm5ldCBX
          aWRnaXRzIFB0eSBMdGQwHhcNMTYwODI0MTY0MzAxWhcNMTYxMTIyMTY0MzAxWjBF
          MQswCQYDVQQGEwJBVTETMBEGA1UECBMKU29tZS1TdGF0ZTEhMB8GA1UEChMYSW50
          ZXJuZXQgV2lkZ2l0cyBQdHkgTHRkMIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIB
          CgKCAQEAwQHoetcl9+5ikGzV6cMzWtWPJHqXT3wpbEkRU9Yz7lgvddmGdtcGbg/1
          CGZu0jJGkMoppoUo4c3dts3iwqRYmBikUP77wwY2QGmDZw2FvkJCJlKnabIRuGvB
          KwzESIXgKk2016aTP6/dAjEHyo6SeoK8lkIySUvK0fyOVlsiEsCmOpidtnKX/a+5
          0GjB79CJH4ER2lLVZnhePFR/zUOyPxZQQ4naHf7yu/b5jhO0f8fwt+pyFxIXjbEI
          dZliWRkRMtzrHOJIhrmJ2A1J7iOrirbbwillwjjNVUWPf3IJ3M12S9pEewooaeO2
          izNTERcG9HzAacbVRn2Y2SWIyT/18QIDAQABo4GnMIGkMB0GA1UdDgQWBBT/LbE4
          9rWf288N6sJA5BRb6FJIGDB1BgNVHSMEbjBsgBTLbE49rWf288N6sJA5BRb6FJI
          GKFJpEcwRTELMAkGA1UEBhMCQVUxEzARBgNVBAgTClNvbWUtU3RhdGUxITAfBgNV
          BAoTGEludGVybmV0IFdpZGdpdHMgUHR5IEx0ZIIJAMHAwfXZ5/PWMAwGA1UdEwQF
          MAMBAf8wDQYJKoZIhvcNAQELBQADggEBAHHFwl0tH0quUYZYO0dZYt4R7SJ0pCm2
          2satiyzHl4OnXcHDpekAo7/a09c6Lz6AU83cKy/+x3/djYHXWba7HpEu0dR3ugQP
          Mlr4zrhd9xKZ0KZKiYmtJH+ak4OM4L3FbT0owUZPyjLSlhMtJVcoRp5CJsjAMBUG
          SvD8RX+T01wzox/Qb+lnnNnOlaWpqu8eoOenybxKp1a9ULzIVvN/LAcc+14vioFq
          2swRWtmocBAs8QR9n4uvbpiYvS8eYueDCWMM4fvFfBhaDZ3N9IbtySh3SpFdQDhw
          YbjM2rxXiyLGxB4Bol7QTv4zHif7Zt89FReT/NBy4rzaskDJY5L6xmY=
          -----END CERTIFICATE-----
        privateKey: |-
          -----BEGIN RSA PRIVATE KEY-----
          MIIEowIBAAKCAQEAwQHoetcl9+5ikGzV6cMzWtWPJHqXT3wpbEkRU9Yz7lgvddmG
          dtcGbg/1CGZu0jJGkMoppoUo4c3dts3iwqRYmBikUP77wwY2QGmDZw2FvkJCJlKn
          abIRuGvBKwzESIXgKk2016aTP6/dAjEHyo6SeoK8lkIySUvK0fyOVlsiEsCmOpid
          tnKX/a+50GjB79CJH4ER2lLVZnhePFR/zUOyPxZQQ4naHf7yu/b5jhO0f8fwt+py
          FxIXjbEIdZliWRkRMtzrHOJIhrmJ2A1J7iOrirbbwillwjjNVUWPf3IJ3M12S9pE
          ewooaeO2izNTERcG9HzAacbVRn2Y2SWIyT/18QIDAQABAoIBACbhTYXBZYKmYPCb
          HBR1IBlCQA2nLGf0qRuJNJZg5iEzXows/6tc8YymZkQE7nolapWsQ+upk2y5Xdp/
          axiuprIs9JzkYK8Ox0r+dlwCG1kSW+UAbX0bQ/qUqlsTvU6muVuMP8vZYHxJ3wmb
          +ufRBKztPTQ/rYWaYQcgC0RWI20HTFBMxlTAyNxYNWzX7RKFkGVVyB9RsAtmcc8g
          +j4OdosbfNoJPS0HeIfNpAznDfHKdxDk2Yc1tV6RHBrC1ynyLE9+TaflIAdo2MVv
          KLMLq51GqYKtgJFIlBRPQqKoyXdz3fGvXrTkf/WY9QNq0J1Vk5ERePZ54mN8iZB7
          9lwy/AkCgYEA6FXzosxswaJ2wQLeoYc7ceaweX/SwTvxHgXzRyJIIT0eJWgx13Wo
          /WA3Iziimsjf6qE+SI/8laxPp2A86VMaIt3Z3mJN/CqSVGw8LK2AQst+OwdPyDMu
          iacE8lj/IFGC8mwNUAb9CzGU3JpU4PxxGFjS/eMtGeRXCWkK4NE+G08CgYEA1Kp9
          N2JrVlqUz+gAX+LPmE9OEMAS9WQSQsfCHGogIFDGGcNf7+uwBM7GAaSJIP01zcoe
          VAgWdzXCv3FLhsaZoJ6RyLOLay5phbu1iaTr4UNYm5WtYTzMzqh8l1+MFFDl9xDB
          vULuCIIrglM5MeS/qnSg1uMoH2oVPj9TVst/ir8CgYEAxrI7Ws9Zc4Bt70N1As+U
          lySjaEVZCMkqvHJ6TCuVZFfQoE0r0whdLdRLU2PsLFP+q7qaeZQqgBaNSKeVcDYR
          9B+nY/jOmQoPewPVsp/vQTCnE/R81spu0mp0YI6cIheT1Z9zAy322svcc43JaWB7
          mEbeqyLOP4Z4qSOcmghZBSECgYACvR9Xs0DGn+wCsW4vze/2ei77MD4OQvepPIFX
          dFZtlBy5ADcgE9z0cuVB6CiL8DbdK5kwY9pGNr8HUCI03iHkW6Zs+0L0YmihfEVe
          PG19PSzK9CaDdhD9KFZSbLyVFmWfxOt50H7YRTTiPMgjyFpfi5j2q348yVT0tEQS
          fhRqaQKBgAcWPokmJ7EbYQGeMbS7HC8eWO/RyamlnSffdCdSc7ue3zdVJxpAkQ8W
          qu80pEIF6raIQfAf8MXiiZ7auFOSnHQTXUbhCpvDLKi0Mwq3G8Pl07l+2s6dQG6T
          lv6XTQaMyf6n1yjzL+fzDrH3qXMxHMO/b13EePXpDMpY7HQpoLDi
          -----END RSA PRIVATE KEY-----
    CertificateUpdateResponse1:
      value:
        data:
          certificateId: 730a1be4-22d7-11eb-aff1-0242ac120002
          status: ACTIVE
          hosts:
            - salesforce.com
          expiresOn: '2022-01-12T04:15:57Z'
          uploadedOn: '2020-01-12T04:15:57Z'
          customHostnameVerificationTXTName: _salesforce.com
          customHostnameVerificationTXTValue: 4c9c3f4f-2e91-4c5d-a902-f12f9c285b9e
          customHostnameId: 465a48f6-3d98-4c15-9312-211984ee8629
          customHostname: test.salesforce.com
          customHostnameStatus: ACTIVE
          certificateType: custom
    CertificateUpdateResponse2:
      value:
        data:
          certificateId: 730a1be4-22d7-11eb-aff1-0242ac120002
          hosts:
            - salesforce.com
          expiresOn: '2022-01-12T04:15:57Z'
          uploadedOn: '2020-01-12T04:15:57Z'
          status: PENDING
          certificateType: automatic
          certificateAuthority: google
          certificateValidation: txt
          certificateVerificationTXTName: _acme-challenge.test.example.com
          certificateVerificationTXTValue: SH5Yet8S5dBwPXcRcCjXdf9FXMBVnQjihQ8oN8LoMv0
          certificateVerificationStatus: PENDING
          customHostnameVerificationTXTName: _salesforce.com
          customHostnameVerificationTXTValue: 4c9c3f4f-2e91-4c5d-a902-f12f9c285b9e
          customHostnameId: 465a48f6-3d98-4c15-9312-211984ee8629
          customHostname: test.salesforce.com
          customHostnameStatus: ACTIVE
    CustomHostnamesPatchResponse:
      value:
        data:
          customHostnameId: 465a48f6-3d98-4c15-9312-211984ee8629
          customHostname: test.salesforce.com
          customHostnameVerificationTXTName: _salesforce.com
          customHostnameVerificationTXTValue: 4c9c3f4f-2e91-4c5d-a902-f12f9c285b9e
          customHostnameStatus: ACTIVE
    MrtRulesGetResponse:
      value:
        data:
          ruleset:
            id: 12345678901234asdfasfasdf1234567
            name: MRT Rules
            lastUpdated: '2022-09-27T18:32:34.675182Z'
            rules:
              - id: 12345678901234asdfasfasdf1234567
                expression: (http.host eq "dev-customer.salesforce.com" and not ( http.request.uri.path matches "/on/path1/.*" or http.request.uri.path matches "/on/path2/.*" or http.request.uri.path matches ".*routeDetails=true" or http.request.uri.path eq "/path3.txt" ))
                description: Phased rollout rule for dev-customer.salesforce.com
                lastUpdated: '2022-09-15T21:14:42.372459Z'
                ref: 12345678901234asdfasfasdf1234567
                enabled: true
                mrtHostname: customer.mobify-storefront.com
              - id: 12345678901234asdfasfasdf1234567
                expression: (http.host in {"test-customer.salesforce.com" "test2-customer.salesforce.com"} and not ( http.request.uri.path matches "^/path4/.*" or http.request.uri.path matches "^.*/path5/.*/products/.*"))
                description: Phased rollout rule for test-customer.salesforce.com
                lastUpdated: '2022-09-15T21:14:42.372459Z'
                ref: 12345678901234asdfasfasdf1233333
                enabled: true
                mrtHostname: customer.mobify-storefront.com
              - id: 12345678901234asdfasfasdf1234567
                expression: (http.host eq "prd-customer.salesforce.com" and not ( http.request.uri.path matches "^/path4/.*" or http.request.uri.path matches "^.*/path5/.*/products/.*"))
                description: Phased rollout rule for prd-customer.salesforce.com
                lastUpdated: '2022-09-15T21:14:42.372459Z'
                ref: 98745678901234asdfasfasdf1234567
                enabled: true
                mrtHostname: customer.mobify-storefront.com
    MrtRulesPostRequestSingleHostnameBodyExample:
      value:
        mrtHostname: customer.mobify-storefront.com
        expressions:
          - (http.host eq "dev-customer.salesforce.com" and not ( http.request.uri.path matches "/on/path1/.*" or http.request.uri.path matches "/on/path2/.*" or http.request.uri.path matches ".*routeDetails=true" or http.request.uri.path eq "/path3.txt" ))
        descriptions:
          - Phased rollout rule for dev-customer.salesforce.com
    MrtRulesPostRequestMultipleHostnamesBodyExample:
      value:
        mrtHostname: customer.mobify-storefront.com
        expressions:
          - (http.host in {"test-customer.salesforce.com" "test2-customer.salesforce.com"} and not ( http.request.uri.path matches "^/path4/.*" or http.request.uri.path matches "^.*/path5/.*/products/.*"))
        descriptions:
          - Phased rollout rule for test-customer.salesforce.com and test2-customer.salesforce.com
    MrtRulesPostResponseSingleHostname:
      value:
        data:
          ruleset:
            id: 12345678901234asdfasfasdf1234567
            name: MRT Rules
            lastUpdated: '2022-09-27T18:32:34.675182Z'
            rules:
              - id: 12345678901234asdfasfasdf1234567
                expression: (http.host eq "dev-customer.salesforce.com" and not ( http.request.uri.path matches "/on/path1/.*" or http.request.uri.path matches "/on/path2/.*" or http.request.uri.path matches ".*routeDetails=true" or http.request.uri.path eq "/path3.txt" ))
                description: Phased rollout rule for dev-customer.salesforce.com
                lastUpdated: '2022-09-15T21:14:42.372459Z'
                ref: 12345678901234asdfasfasdf1234567
                enabled: true
                mrtHostname: customer.mobify-storefront.com
    MrtRulesPostResponseMultipleHostnames:
      value:
        data:
          ruleset:
            id: 12345678901234asdfasfasdf1234567
            name: MRT Rules
            lastUpdated: '2022-09-27T18:32:34.675182Z'
            rules:
              - id: 12345678901234asdfasfasdf1234567
                expression: (http.host in {"test-customer.salesforce.com" "test2-customer.salesforce.com"} and not ( http.request.uri.path matches "^/path4/.*" or http.request.uri.path matches "^.*/path5/.*/products/.*"))
                description: Phased rollout rule for test-customer.salesforce.com and test2-customer.salesforce.com
                lastUpdated: '2022-09-15T21:14:42.372459Z'
                ref: 12345678901234asdfasfasdf1234567
                enabled: true
                mrtHostname: customer.mobify-storefront.com
    MrtRulesetPatchRequestUpdateHostnameBodyExample:
      value:
        oldMrtHostname: old-hostname.mobify-storefront.com
        mrtHostname: new-hostname.mobify-storefront.com
    MrtRulesetPatchRequestAddRulesBodyExample:
      value:
        mrtHostname: customer.mobify-storefront.com
        expressions:
          - (http.host eq "dev-customer.salesforce.com" and not ( http.request.uri.path matches "/on/path1/.*" or http.request.uri.path matches "/on/path2/.*" or http.request.uri.path matches ".*routeDetails=true" or http.request.uri.path eq "/path3.txt" ))
          - (http.host in {"test-customer.salesforce.com" "test2-customer.salesforce.com"} and not ( http.request.uri.path matches "^/path4/.*" or http.request.uri.path matches "^.*/path5/.*/products/.*"))
        descriptions:
          - Phased rollout rule for dev-customer.salesforce.com
    MrtRulesetPatchResponseUpdateHostname:
      value:
        data:
          ruleset:
            id: 12345678901234asdfasfasdf1234567
            name: MRT Rules
            lastUpdated: '2022-09-27T18:32:34.675182Z'
            rules:
              - id: 12345678901234asdfasfasdf1234567
                expression: (http.host eq "dev-customer.salesforce.com" and not ( http.request.uri.path matches "/on/path1/.*" or http.request.uri.path matches "/on/path2/.*" or http.request.uri.path matches ".*routeDetails=true" or http.request.uri.path eq "/path3.txt" ))
                description: Phased rollout rule for dev-customer.salesforce.com
                lastUpdated: '2022-09-15T21:14:42.372459Z'
                ref: 12345678901234asdfasfasdf1234567
                enabled: true
                mrtHostname: new-hostname.mobify-storefront.com
              - id: 12345678901234asdfasfasdf1234568
                expression: (http.host in {"test-customer.salesforce.com" "test2-customer.salesforce.com"} and not ( http.request.uri.path matches "^/path4/.*" or http.request.uri.path matches "^.*/path5/.*/products/.*"))
                description: Phased rollout rule for test-customer.salesforce.com and test2-customer.salesforce.com
                lastUpdated: '2022-09-15T21:14:42.372459Z'
                ref: 12345678901234asdfasfasdf1234568
                enabled: true
                mrtHostname: new-hostname.mobify-storefront.com
    MrtRulesetPatchResponseAddRules:
      value:
        data:
          ruleset:
            id: 12345678901234asdfasfasdf1234567
            name: MRT Rules
            lastUpdated: '2022-09-27T18:32:34.675182Z'
            rules:
              - id: 12345678901234asdfasfasdf1234567
                expression: (http.host eq "dev-customer.salesforce.com" and not ( http.request.uri.path matches "/on/path1/.*" or http.request.uri.path matches "/on/path2/.*" or http.request.uri.path matches ".*routeDetails=true" or http.request.uri.path eq "/path3.txt" ))
                description: Phased rollout rule for dev-customer.salesforce.com
                lastUpdated: '2022-09-15T21:14:42.372459Z'
                ref: 12345678901234asdfasfasdf1234567
                enabled: true
                mrtHostname: customer.mobify-storefront.com
              - id: 12345678901234asdfasfasdf1234568
                expression: (http.host in {"test-customer.salesforce.com" "test2-customer.salesforce.com"} and not ( http.request.uri.path matches "^/path4/.*" or http.request.uri.path matches "^.*/path5/.*/products/.*"))
                description: Phased rollout rule for test-customer.salesforce.com and test2-customer.salesforce.com
                lastUpdated: '2022-09-15T21:14:42.372459Z'
                ref: 12345678901234asdfasfasdf1234568
                enabled: true
                mrtHostname: customer.mobify-storefront.com
    MrtRulePatchRequestBodyExample:
      value:
        enabled: true
        expression: (http.host eq "dev-customer.salesforce.com" and not ( http.request.uri.path matches "^/path4/.*" or http.request.uri.path matches "^.*/path5/.*/products/.*"))
        description: Phased rollout rule for dev-customer.salesforce.com
    MrtRulePatchResponse:
      value:
        data:
          ruleset:
            id: 12345678901234asdfasfasdf1234567
            name: MRT Rules
            lastUpdated: '2022-09-15T21:14:42.372459Z'
            rules:
              - id: 12345678901234asdfasfasdf1234567
                expression: (http.host eq "dev-customer.salesforce.com" and not ( http.request.uri.path matches "^/path4/.*" or http.request.uri.path matches "^.*/path5/.*/products/.*"))
                description: Phased rollout rule for dev-customer.salesforce.com
                lastUpdated: '2022-09-27T18:32:34.675182Z'
                ref: 12345678901234asdfasfasdf1234567
                enabled: true
                mrtHostname: customer.mobify-storefront.com
    LogpushOwnershipPostRequestBodyExample:
      value:
        destinationPath: s3://customer-bucket/site-name/{DATE}?region=us-east-1&sse=AES256
    LogpushOwnershipPostResponse:
      value:
        data:
          destinationPath: s3://customer-bucket/site-name/{DATE}?region=us-east-1&sse=AES256
          fileName: site-name/20230101/ownership-challenge-f1234567.txt
    LogpushGetListJob:
      value:
        data:
          - jobId: 123456
            name: example1-job-name
            logType: http_requests
            logFields:
              - ClientRequestBytes
              - ClientRequestHost
              - ClientRequestMethod
            destinationPath: s3://customer-bucket/site-name/{DATE}?region=us-east-1&sse=AES256
            lastComplete: '2023-03-14T02:09:32Z'
            createdOn: '2023-01-01T00:00:27Z'
          - jobId: 123457
            name: example2-job-name
            logType: firewall_events
            logFields:
              - RuleID
              - ClientRequestUserAgent
              - ClientRequestPath
            filter: '{"where":{"and":[{"key":"ClientRequestPath","operator":"contains","value":"/example-path"}, {"key":"EdgeResponseStatus","operator":"in","value":[502, 503, 504, 520, 521, 522, 522, 523, 524, 525, 526, 530]}]}}'
            destinationPath: s3://customer-bucket/site-name/{DATE}?region=us-east-1&sse=AES256
            lastComplete: '2023-03-22T02:09:32Z'
            createdOn: '2023-01-03T00:00:27Z'
          - jobId: 123458
            name: example3-job-name
            logType: page_shield_events
            logFields:
              - Action
              - CSPDirective
              - Host
              - PageURL
              - PolicyID
              - ResourceType
              - Timestamp
              - URL
              - URLHost
            destinationPath: s3://customer-bucket/site-name/page-shield-events/{DATE}?region=us-east-1&sse=AES256
            lastComplete: '2025-01-02T02:09:32Z'
            createdOn: '2025-01-01T00:00:27Z'
    LogpushCreateRequestBodyExample1:
      value:
        name: example-job-name
        destinationPath: s3://customer-bucket/site-name/{DATE}?region=us-east-1&sse=AES256
        ownershipChallengeToken: abc00000000000000000000
        logFields:
          - ClientRequestBytes
          - ClientRequestHost
          - ClientRequestMethod
        logType: http_requests
    LogpushCreateRequestBodyExample2:
      value:
        name: example-job-name-with-filter
        destinationPath: s3://customer-bucket/site-name/{DATE}?region=us-east-1&sse=AES256
        ownershipChallengeToken: abc00000000000000000000
        logFields:
          - ClientRequestBytes
          - ClientRequestPath
          - ClientRequestHost
          - ClientRequestMethod
          - EdgeResponseStatus
        filter: '{"where":{"and":[{"key":"ClientRequestPath","operator":"contains","value":"/example-path"}, {"key":"EdgeResponseStatus","operator":"in","value":[502, 503, 504, 520, 521, 522, 522, 523, 524, 525, 526, 530]}]}}'
        logType: http_requests
    LogpushCreateRequestBodyExample3:
      value:
        name: example-job-name
        destinationPath: s3://customer-bucket/site-name/page-shield-events/{DATE}?region=us-east-1&sse=AES256
        ownershipChallengeToken: abc00000000000000000000
        logFields:
          - Action
          - CSPDirective
          - Host
          - PageURL
          - PolicyID
          - ResourceType
          - Timestamp
          - URL
          - URLHost
        logType: page_shield_events
    LogpushCreateResponse1:
      value:
        data:
          jobId: 123456
          name: example-job-name
          logType: http_requests
          logFields:
            - ClientRequestBytes
            - ClientRequestHost
            - ClientRequestMethod
          destinationPath: s3://customer-bucket/site-name/{DATE}?region=us-east-1&sse=AES256
          enabled: false
          createdOn: '2023-01-01T00:00:27Z'
    LogpushCreateResponse2:
      value:
        data:
          jobId: 123456
          name: example-job-name-with-filter
          logType: http_requests
          logFields:
            - ClientRequestBytes
            - ClientRequestPath
            - ClientRequestHost
            - ClientRequestMethod
            - EdgeResponseStatus
          filter: '{"where":{"and":[{"key":"ClientRequestPath","operator":"contains","value":"/example-path"}, {"key":"EdgeResponseStatus","operator":"in","value":[502, 503, 504, 520, 521, 522, 522, 523, 524, 525, 526, 530]}]}}'
          destinationPath: s3://customer-bucket/site-name/{DATE}?region=us-east-1&sse=AES256
          enabled: false
          createdOn: '2023-01-01T00:00:27Z'
    LogpushCreateResponse3:
      value:
        data:
          jobId: 123458
          name: example-job-name
          logType: page_shield_events
          logFields:
            - Action
            - CSPDirective
            - Host
            - PageURL
            - PolicyID
            - ResourceType
            - Timestamp
            - URL
            - URLHost
          destinationPath: s3://customer-bucket/site-name/page-shield-events/{DATE}?region=us-east-1&sse=AES256
          enabled: true
          createdOn: '2025-01-01T00:00:27Z'
    LogpushGetJobById1:
      value:
        data:
          jobId: 123456
          name: example-job-name
          logType: http_requests
          logFields:
            - ClientRequestBytes
            - ClientRequestHost
            - ClientRequestMethod
          destinationPath: s3://customer-bucket/site-name/{DATE}?region=us-east-1&sse=AES256
          lastComplete: '2023-03-14T02:09:32Z'
          createdOn: '2023-01-01T00:00:27Z'
    LogpushGetJobById2:
      value:
        data:
          jobId: 123456
          name: example-job-name
          logType: http_requests
          logFields:
            - ClientRequestBytes
            - ClientRequestHost
            - ClientRequestMethod
          destinationPath: s3://customer-bucket/site-name/{DATE}?region=us-east-1&sse=AES256
          lastComplete: '2023-03-14T02:09:32Z'
          lastError: '2023-03-16T02:00:00Z'
          errorMessage: no permissions to write to destination bucket
          createdOn: '2023-01-01T00:00:27Z'
    LogpushGetJobById3:
      value:
        data:
          jobId: 123456
          name: example-job-name
          logType: http_requests
          logFields:
            - ClientRequestBytes
            - ClientRequestPath
            - ClientRequestHost
            - ClientRequestMethod
            - EdgeResponseStatus
          filter: '{"where":{"and":[{"key":"ClientRequestPath","operator":"contains","value":"/example-path"}, {"key":"EdgeResponseStatus","operator":"in","value":[502, 503, 504, 520, 521, 522, 522, 523, 524, 525, 526, 530]}]}}'
          destinationPath: s3://customer-bucket/site-name/{DATE}?region=us-east-1&sse=AES256
          lastComplete: '2023-03-14T02:09:32Z'
          createdOn: '2023-01-01T00:00:27Z'
    LogpushUpdateRequestBodyExample:
      value:
        enabled: true
        filter: '{"where":{"key":"ClientRequestPath","operator":"contains","value":"/example-path"}}'
        logFields:
          - ClientRequestBytes
          - ClientRequestHost
          - ClientRequestMethod
    LogpushUpdateResponse:
      value:
        data:
          jobId: 123456
          name: example-job-name
          enabled: true
          logType: http_requests
          logFields:
            - ClientRequestBytes
            - ClientRequestHost
            - ClientRequestMethod
          destinationPath: s3://customer-bucket/site-name/{DATE}?region=us-east-1&sse=AES256
          lastComplete: '2023-03-14T02:09:32Z'
          lastError: '2023-01-01T00:00:27Z'
          errorMessage: ''
    WafPackagesGetExample:
      value:
        data:
          id: c504870194831cd12c3fc0284f294abb
          name: OWASP ModSecurity Core Rule Set
          description: OWASP Core Ruleset (2013) provides protection against common attack categories, including SQL Injection and Cross-Site Scripting.
          zone_id: 56702a674281951f541f9f304f7431f0
          detection_mode: anomaly
          sensitivity: low
          action_mode: simulate
    WafPackagesPatchRequestBodyExample:
      value:
        sensitivity: low
        action_mode: simulate
    CustomRulesResponse:
      value:
        data:
          - ruleId: ffffe61cf25e4ec49c34b029ff3060f7
            description: Block traffic for malformed URL requests
            expression: (http.request.uri.path matches "^/path1/.*")
            actions:
              - block
            lastUpdated: '2022-12-14T21:25:22.329194Z'
            enabled: false
          - ruleId: 2c0fc9fa937b11eaa1b71c4d701ab86e
            description: Skip user agent
            expression: (http.user_agent contains "Client")
            actions:
              - skip_custom_rules, skip_waf
            lastUpdated: '2022-12-14T21:30:34.263795Z'
            enabled: true
    CustomRulesPostRequestBodyExample:
      value:
        description: Block traffic for malformed URL requests
        expression: (http.request.uri.path matches "^/path1/.*")
        actions:
          - block
        enabled: false
        position:
          before: 2c0fc9fa937b11eaa1b71c4d701ab86e
    CustomRuleResponse:
      value:
        data:
          ruleId: ffffe61cf25e4ec49c34b029ff3060f7
          description: Block traffic for malformed URL requests
          expression: (http.request.uri.path matches "^/path1/.*")
          actions:
            - block
          lastUpdated: '2022-12-14T21:25:22.329194Z'
          enabled: false
    RateLimitingRulesResponse:
      value:
        data:
          - ruleId: ffffe61cf25e4ec49c34b029ff3060f7
            description: Rate limit /path1
            expression: http.request.uri.path matches "^/path1/.*"
            characteristics:
              - cf.unique_visitor_id
            action: block
            period: 60
            requestsPerPeriod: 50
            mitigationTimeout: 600
            countingExpression: http.request.uri.path matches "^/path1/.*" and http.response.code eq 400
            enabled: false
            lastUpdated: '2022-12-14T21:25:22.329194Z'
          - ruleId: 2c0fc9fa937b11eaa1b71c4d701ab86e
            description: Rate limit AS number 12345
            expression: ip.src.asnum eq 12345
            characteristics:
              - ip.src
            action: managed_challenge
            period: 600
            requestsPerPeriod: 1000
            mitigationTimeout: 0
            enabled: true
            lastUpdated: '2022-12-14T21:47:24.323223Z'
    RateLimitingRulesPostRequestBodyExample:
      value:
        description: Rate limit /path1
        expression: http.request.uri.path matches "^/path1/.*"
        characteristics:
          - cf.unique_visitor_id
        action: block
        period: 60
        requestsPerPeriod: 50
        mitigationTimeout: 600
        countingExpression: http.request.uri.path matches "^/path1/.*" and http.response.code eq 400
        enabled: false
        position:
          before: 2c0fc9fa937b11eaa1b71c4d701ab86e
    RateLimitingRuleResponse:
      value:
        data:
          ruleId: ffffe61cf25e4ec49c34b029ff3060f7
          description: Rate limit /path1
          expression: http.request.uri.path matches "^/path1/.*"
          characteristics:
            - cf.unique_visitor_id
          action: block
          period: 60
          requestsPerPeriod: 50
          mitigationTimeout: 600
          countingExpression: http.request.uri.path matches "^/path1/.*" and http.response.code eq 400
          enabled: false
          lastUpdated: '2022-12-14T21:25:22.329194Z'
    WAFManagedRulesetsResponse:
      value:
        data:
          - name: Managed Ruleset
            rulesetId: efb7b8c949ac4650a09736fc376e9aee
            action: default
            enabled: true
          - name: OWASP Core Ruleset
            rulesetId: 4814384a9e5d4991b9815dcfc25d2f1f
            action: log
            anomalyScoreThreshold: 25
            anomalyScore: high
            paranoiaLevel: 1
            enabled: true
          - name: Leaked Crednetials Check Ruleset
            rulesetId: c2e184081120413c86c3ab7e14069605
            action: block
            enabled: true
    WAFManagedRulesetsUpdateRequestBodyExample:
      value:
        action: js_challenge
        enabled: true
    WAFManagedRulesetsUpdateResponse:
      value:
        data:
          name: Managed Ruleset
          rulesetId: efb7b8c949ac4650a09736fc376e9aee
          action: js_challenge
          enabled: true
    WAFManagedRulesResponse:
      value:
        data:
          - ruleId: 8ac8bc2a661e475d940980f9317f28e1
            action: block
            score: 5
            categories:
              - application-multi
              - attack-generic
              - capec-1000
              - capec-210
              - capec-220
              - capec-272
              - capec-274
              - language-multi
              - paranoia-level-1
              - pci-12-1
              - platform-multi
            description: '911100: Method is not allowed by policy'
            lastUpdated: '2024-08-19T17:26:58.593021Z'
            enabled: false
          - ruleId: 53065ac9bd9449f3895f1865467a0e6a
            action: block
            score: 5
            categories:
              - application-multi
              - attack-reputation-scanner
              - capec-1000
              - capec-118
              - capec-224
              - capec-310
              - capec-541
              - language-multi
              - paranoia-level-1
              - pci-6-5-10
              - platform-multi
            description: '913100: Found User-Agent associated with security scanner'
            lastUpdated: '2024-08-19T17:26:58.593021Z'
            enabled: true
    WAFManagedRulesUpdateRequestBodyExample:
      value:
        action: log
        enabled: true
    WAFManagedRulesUpdateResponse:
      value:
        data:
          ruleId: 53065ac9bd9449f3895f1865467a0e6a
          action: log
          score: 5
          categories:
            - application-multi
            - attack-reputation-scanner
            - capec-1000
            - capec-118
            - capec-224
            - capec-310
            - capec-541
            - language-multi
            - paranoia-level-1
            - pci-6-5-10
            - platform-multi
          description: '913100: Found User-Agent associated with security scanner'
          lastUpdated: '2024-08-19T17:26:58.593021Z'
          enabled: true
    MrtGetResponse:
      value:
        data:
          headerName: x-sfdc-access-control
          headerValue: '********789'
          lastUpdated: '2024-04-27T18:32:34.675182Z'
    MrtPutRequestBodyExample:
      value:
        headerValue: '123456789'
    MrtPutUpdateResponse:
      value:
        data:
          headerName: x-sfdc-access-control
          headerValue: '********789'
          lastUpdated: '2024-04-27T18:32:34.675182Z'
    MrtPutCreateResponse:
      value:
        data:
          headerName: x-sfdc-access-control
          headerValue: '********789'
          lastUpdated: '2024-04-27T18:32:34.675182Z'
    CipherSettingsGetResponse:
      value:
        data:
          ciphers:
            - ECDHE-ECDSA-AES128-GCM-SHA256
            - ECDHE-RSA-AES128-GCM-SHA256
          cipherSuiteType: Custom
    CipherSettingsPatchRequestBodyExample:
      value:
        ciphers:
          - ECDHE-ECDSA-AES128-GCM-SHA256
        cipherSuiteType: Custom
    CipherSettingsPatchResponse:
      value:
        data:
          ciphers:
            - ECDHE-ECDSA-AES128-GCM-SHA256
          cipherSuiteType: Custom
