openapi: 3.0.3
info:
  title: Coupons
  version: v1
  description: |-
    # API Overview

    Use the Coupons API to create, modify, retrieve, and delete coupons for a given channel. You can also use it to create and retrieve coupon codes using a couponID.

    Coupons _must_ be added as a qualifier to a campaign before they can be used.

    For more information, see [Using Coupons as Qualifiers](https://documentation.b2c.commercecloud.salesforce.com/DOC1/topic/com.demandware.dochelp/Promotions/UsingCouponsasQualifiers.html) in the Salesforce B2C Commerce Infocenter.

    ## Authentication & Authorization

    The client requesting the coupon's information must have access to the Coupon resource. For resource access, you must use a client ID and client secret from Account Manager to request an access token. The access token is used as a bearer token and added to the Authorization header of your API request. The client must first authenticate against Account manager to log in.

    You must include the relevant scope(s) in the client ID used to generate the token. For details, see [Authorization Scopes Catalog.](https://developer.salesforce.com/docs/commerce/commerce-api/guide/auth-z-scope-catalog.html)

    For detailed setup instructions, see [Authorization for Admin APIs](https://developer.salesforce.com/docs/commerce/commerce-api/guide/authorization-for-admin-apis.html).

    ## Use Cases

    ### Single-Use Coupon

    Single-use coupons are your standard coupons, which you can only use once per customer.

    For example, use the Coupons API to create a coupon with a single coupon code that can be applied only once per order per customer.

    ### Multiple-Use Coupon

    A multiple-use coupon can be used any number of times by any number of customers.

    For example, use the Coupons API to create a coupon that can be applied once per order and has system-generated codes.

    ### Search Coupon

    Use the Coupons API to search for coupons using simple or complex querying.

    ### Search Coupon Redemptions

    Use the Coupons API to search for coupon redemptions using simple or complex querying.

    For more detail, see [Coupon Redemption](https://documentation.b2c.commercecloud.salesforce.com/DOC1/topic/com.demandware.dochelp/Coupons/CouponRedemption.html) in the Salesforce B2C Commerce Infocenter.
servers:
  - url: https://{shortCode}.api.commercecloud.salesforce.com/pricing/coupons/v1
    variables:
      shortCode:
        default: shortCode
paths:
  /organizations/{organizationId}/coupons:
    post:
      summary: Search for coupons.
      description: |-
        The Coupon Search document contains a search object that allows filtering on various attributes.

        The following searchable query attributes can be used to narrow the search:

        | Attribute | Type |
        |-----------|--------|
        | couponId| String |
        | description | String |
        | type | one of {"single_code", "multiple_codes", "system_codes"} |
        | enabled | Boolean |

         Note that only searchable attributes can be used in sorting.
      operationId: couponsSearch
      parameters:
        - $ref: '#/components/parameters/organizationId'
        - $ref: '#/components/parameters/siteId'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SearchRequest'
      responses:
        '200':
          description: Coupon information successfully retrieved.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CouponSearchResult'
        '400':
          description: Thrown when the query is ill-formed.
      security:
        - AmOAuth2:
            - sfcc.promotions
            - sfcc.promotions.rw
  /organizations/{organizationId}/coupons/redemptions:
    post:
      summary: Search for coupon redemptions.
      description: |-
        The Coupon Redemption Search document contains a search object that allows filtering on various attributes.


        The following searchable query attributes can be used to narrow down the search:

          | Attribute | Type |
          |-----------|--------|
          | code| String |
          | couponId | String |
          | customerEmail | String |
          | orderNo | String |

        Note that only searchable attributes can be used in sorting.

        If the user role does not have the `View_Coupon_Codes` permission, then the returned coupon codes are masked.
      operationId: couponRedemptionsSearch
      parameters:
        - $ref: '#/components/parameters/organizationId'
        - $ref: '#/components/parameters/siteId'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SearchRequest'
      responses:
        '200':
          description: Coupon redemption information successfully retrieved.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CouponRedemptionSearchResult'
        '400':
          description: Thrown when the query is ill-formed.
      security:
        - AmOAuth2:
            - sfcc.promotions
            - sfcc.promotions.rw
  /organizations/{organizationId}/coupons/actions/redeem:
    post:
      summary: Redeem a coupon code for an existing coupon for the specified site.
      description: |-
        The coupon code must be redeemable.
        ---
        ***Note: Coupon redemptions are evaluated during checkout. A large number of coupon redemptions negatively impacts order creation performance and scale.***
        1. Avoid importing unnecessary coupon redemptions.
        2. Clean up coupon codes and related redemptions when they are no longer required.
        ---
      operationId: redeemCoupon
      parameters:
        - $ref: '#/components/parameters/organizationId'
        - $ref: '#/components/parameters/siteId'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CouponCodeRedemptionRequest'
            examples:
              PostRedeemCoupon:
                $ref: '#/components/examples/PostRedeemCoupon'
      responses:
        '201':
          description: |
            Coupon was successfully redeemed and a redemption record created.
        '400':
          description: |
            Thrown when the coupon code can not be redeemed, for example, if it is disabled,
            already redeemed, if the redemption limit (maximum number or timeframe) is
            exceeded or if it has no assigned active promotion.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                IdConflict400:
                  $ref: '#/components/examples/CouponCodeNotRedeemable400'
        '404':
          description: |
            Thrown when the site does not contain a coupon, which
            defines whether the coupon code requested can be redeemed.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                IdConflict400:
                  $ref: '#/components/examples/CouponCodeNotFound404'
      security:
        - AmOAuth2:
            - sfcc.promotions.rw
  /organizations/{organizationId}/coupons/{couponId}:
    get:
      summary: Return coupon information for the specified coupon ID.
      description: If the user role does not have the View_Coupon_Codes permission, then the returned coupon codes are masked.
      operationId: getCoupon
      parameters:
        - $ref: '#/components/parameters/couponId'
        - $ref: '#/components/parameters/organizationId'
        - $ref: '#/components/parameters/siteId'
      responses:
        '200':
          description: Coupon information for the specified coupon ID successfully returned.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Coupon'
              examples:
                GetCoupon:
                  $ref: '#/components/examples/Coupon'
        '404':
          description: |
            Thrown when the coupon does not exist matching the given ID.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                getCoupon404:
                  $ref: '#/components/examples/CouponNotFound404'
      security:
        - AmOAuth2:
            - sfcc.promotions
            - sfcc.promotions.rw
    put:
      summary: |-
        Create a coupon using the information provided. If a coupon with the specified identifier already exists,
         the existing coupon is replaced.
      operationId: createCoupon
      parameters:
        - $ref: '#/components/parameters/couponId'
        - $ref: '#/components/parameters/organizationId'
        - $ref: '#/components/parameters/siteId'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Coupon'
      responses:
        '200':
          description: Coupon successfully created.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Coupon'
              examples:
                CreateCoupon:
                  $ref: '#/components/examples/Coupon'
        '400':
          description: |-
            Thrown when the coupon passed is not valid (the argument indicates
                          which field is invalid).
            Possible reasons:
            - The code provided is in use by another coupon.
            - A single code coupon set the coupon code improperly.
            - The ID in the request does not match the ID in the document.
            - A quota for system-generated coupons is violated.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                CouponCodeDuplicate400:
                  $ref: '#/components/examples/CouponCodeDuplicate400'
        '403':
          description: Thrown when the resource requires global context instead of site-specific context.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                createCoupon403:
                  $ref: '#/components/examples/SiteAccessForbidden403'
      security:
        - AmOAuth2:
            - sfcc.promotions.rw
    delete:
      summary: Delete a coupon with a specified ID.
      operationId: deleteCoupon
      parameters:
        - $ref: '#/components/parameters/couponId'
        - $ref: '#/components/parameters/organizationId'
        - $ref: '#/components/parameters/siteId'
      responses:
        '204':
          description: Coupon successfully deleted.
      security:
        - AmOAuth2:
            - sfcc.promotions.rw
    patch:
      summary: Update a coupon with the specified information.
      operationId: updateCoupon
      parameters:
        - $ref: '#/components/parameters/couponId'
        - $ref: '#/components/parameters/organizationId'
        - $ref: '#/components/parameters/siteId'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Coupon'
      responses:
        '200':
          description: Coupon successfully updated.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Coupon'
              examples:
                UpdateCoupon:
                  $ref: '#/components/examples/UpdateCoupon'
        '400':
          description: |-
            Possible reasons:
            - Cannot update certain fields in a coupon after redeeming it or exporting it
            - The code provided is in use by another coupon.
            - A quota for system-generated coupons is violated.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                updateCoupon400:
                  $ref: '#/components/examples/CouponCodeDuplicate400'
        '403':
          description: Thrown when trying to update a broken coupon that should be deleted and re-created, or when trying to update a legacy coupon.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                updateCoupon403:
                  $ref: '#/components/examples/LegacyCouponCoupon403'
      security:
        - AmOAuth2:
            - sfcc.promotions.rw
  /organizations/{organizationId}/coupons/{couponId}/codes:
    get:
      summary: |-
        Get the coupon codes for the given coupon.

         If the user role does not have the View_Coupon_Codes permission, then the coupon codes returned are masked.
      operationId: getCouponCodes
      parameters:
        - $ref: '#/components/parameters/couponId'
        - $ref: '#/components/parameters/organizationId'
        - $ref: '#/components/parameters/siteId'
        - name: limit
          in: query
          required: false
          schema:
            type: integer
            format: int32
            default: 25
            maximum: 200
          description: Maximum records to retrieve per request, not to exceed 200. Defaults to 25.
        - name: offset
          in: query
          required: false
          schema:
            type: integer
            format: int64
            default: 0
            minimum: 0
          description: Used to retrieve the results based on a particular resource offset.
      responses:
        '200':
          description: Coupon codes successfully retrieved.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CouponCodes'
              examples:
                GetCouponCodes:
                  $ref: '#/components/examples/GetCouponCodes'
        '404':
          description: |
            Thrown when the coupon does not exist matching the given ID.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                CouponNotFound:
                  $ref: '#/components/examples/CouponNotFound404'
      security:
        - AmOAuth2:
            - sfcc.promotions
            - sfcc.promotions.rw
    post:
      summary: Add or delete (modify) multiple codes to and from the supplied coupon.
      operationId: updateCouponCodes
      parameters:
        - $ref: '#/components/parameters/couponId'
        - $ref: '#/components/parameters/organizationId'
        - $ref: '#/components/parameters/delete'
        - $ref: '#/components/parameters/siteId'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CouponMultiCodesRequest'
      responses:
        '204':
          description: Coupon codes successfully updated - this is also returned if we try to add an already existing code or to delete a non-existing code.
        '400':
          description: Thrown when the coupon code could not be created.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                updateCoupon400:
                  $ref: '#/components/examples/CouponCodeCreate400'
        '404':
          description: |
            Thrown if the coupon does not exist matching the given ID.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                CouponNotFound404:
                  $ref: '#/components/examples/CouponNotFound404'
      security:
        - AmOAuth2:
            - sfcc.promotions.rw
components:
  securitySchemes:
    AmOAuth2:
      type: oauth2
      description: AccountManager OAuth 2.0 bearer token Authentication.
      flows:
        clientCredentials:
          tokenUrl: https://account.demandware.com/dwsso/oauth2/access_token
          scopes:
            sfcc.promotions: promotions READONLY
            sfcc.promotions.rw: promotions read/write
        authorizationCode:
          authorizationUrl: https://account.demandware.com/dwsso/oauth2/authorize
          tokenUrl: https://account.demandware.com/dwsso/oauth2/access_token
          scopes:
            sfcc.promotions: promotions READONLY
            sfcc.promotions.rw: promotions read/write
  schemas:
    OrganizationId:
      description: An identifier for the organization the request is being made by
      example: f_ecom_zzxy_prd
      type: string
      minLength: 1
      maxLength: 32
    SiteId:
      minLength: 1
      maxLength: 32
      description: The identifier of the site that a request is being made in the context of. Attributes might have site specific values, and some objects may only be assigned to specific sites
      example: RefArch
      type: string
    Limit:
      default: 10
      minimum: 1
      format: int32
      description: Maximum records to retrieve per request, not to exceed the maximum defined. A limit must be at least 1 so at least one record is returned (if any match the criteria).
      type: integer
      example: 10
    Query:
      minProperties: 1
      maxProperties: 1
      description: |-
        A set of objects that define criteria used to select records. A query can contain one of the following:
        * `MatchAllQuery`
         - Matches all documents.
        * `TermQuery`
         - Matches one or more documents against one or more document fields.
        * `TextQuery`
         - Matches text against one or more fields.
        * `BoolQuery`
         - Allows construction of a logical expression of multiple queries.
        * `FilteredQuery`
         - Allows a filter to be applied to a query.
        * `NestedQuery`
         - Allows you to query on nested documents.
         - _Only supported by some Commerce APIs. For more details, see the endpoint descriptions in the API documentation._
      example:
        filteredQuery:
          query:
            textQuery:
              fields:
                - couponId
              searchPhrase: disabled
          filter:
            termFilter:
              field: enabled
              operator: is
              values:
                - false
      type: object
      properties:
        boolQuery:
          $ref: '#/components/schemas/BoolQuery'
        filteredQuery:
          $ref: '#/components/schemas/FilteredQuery'
        matchAllQuery:
          $ref: '#/components/schemas/MatchAllQuery'
        nestedQuery:
          $ref: '#/components/schemas/NestedQuery'
        termQuery:
          $ref: '#/components/schemas/TermQuery'
        textQuery:
          $ref: '#/components/schemas/TextQuery'
      additionalProperties: false
    BoolQuery:
      description: "A boolean query allows construction of full logical expression trees that are composed of other queries (usually term queries and text queries). A boolean query has three sets of clauses:\n  \n  - `must`, which combines as an `AND` operator.\n  - `should`, which combines as an `OR` operator.\n  - `must_not`, which combines as a `NOT` operator.\n  \nIf `must`, `mustNot`, or `should` appear in the same boolean query, they are combined logically using the `AND` operator. For example:\n\n    (must-1 AND must-1 AND ...)\n      AND (should-1 OR should-2 OR ...)\n      AND NOT (must_not-1 OR must_not-2 OR ...)\n"
      type: object
      example:
        value:
          must:
            - textQuery:
                fields:
                  - couponId
                searchPhrase: DEAL
            - textQuery:
                fields:
                  - description
                searchPhrase: Big bargain deal
          mustNot:
            - termQuery:
                fields:
                  - enabled
                operator: is
                values:
                  - false
      properties:
        must:
          description: List of queries to be evaluated as an `AND` operator.
          type: array
          items:
            $ref: '#/components/schemas/Query'
        mustNot:
          description: List of queries to be evaluated as a `NOT` operator.
          type: array
          items:
            $ref: '#/components/schemas/Query'
        should:
          description: List of queries to be evaluated as an `OR` operator.
          type: array
          items:
            $ref: '#/components/schemas/Query'
      additionalProperties: false
    Filter:
      minProperties: 1
      maxProperties: 1
      description: |-
        Contains a set of objects that define criteria used to select records. A filter can contain one of the following:
          * `TermFilter`
           - Matches records where a field (or fields) exactly matches some simple value (including `null`).
          * `RangeFilter`
           - Matches records where a field value lies within a specified range.
          * `Range2Filter`
           - Matches records in a specified range across fields.
          * `QueryFilter`
           - Matches records based on a query.
          * `BoolFilter`
           - Provides filtering of records using a set of filters combined using a logical operator.
      example: null
      type: object
      properties:
        boolFilter:
          $ref: '#/components/schemas/BoolFilter'
        queryFilter:
          $ref: '#/components/schemas/QueryFilter'
        range2Filter:
          $ref: '#/components/schemas/Range2Filter'
        rangeFilter:
          $ref: '#/components/schemas/RangeFilter'
        termFilter:
          $ref: '#/components/schemas/TermFilter'
      additionalProperties: false
    BoolFilter:
      description: Allows you to combine other filters into (possibly recursive) logical expression trees. A boolean filter is composed of a logical operator (`AND`, `OR`, `NOT`) and a list of filters that the operator relates to. Multiple filters can be negated with a single `NOT` operator, even when the filters are combined with the `AND` operator.
      example:
        value:
          operator: and
          filters:
            - termFilter:
                field: id
                operator: is
                values:
                  - myId
            - termFilter:
                field: couponId
                operator: is
                values:
                  - couponOne
      type: object
      properties:
        filters:
          description: A list of filters that are logically combined by an operator.
          type: array
          items:
            $ref: '#/components/schemas/Filter'
        operator:
          description: The logical operator that is used to combine the filters.
          enum:
            - and
            - or
            - not
          type: string
          example: and
      required:
        - operator
      additionalProperties: false
    QueryFilter:
      description: Wraps any query and allows it to be used as a filter.
      type: object
      properties:
        query:
          $ref: '#/components/schemas/Query'
      required:
        - query
    Field:
      description: Name of the field. Might be a custom field name prefixed with c_.
      maxLength: 260
      type: string
      example: couponId
    Range2Filter:
      description: |-
        Allows you to restrict a search result to hits where a range defined by specified attributes has a certain relationship to a specified range.

        The first range (R1) is defined by a pair of attributes (`fromField` and `toField`) that specify the extent of a range, such as attributes `validFrom` and `validTo`.

        The second range (R2) is defined by `fromValue` and `toValue`.

        The filter mode specifies the method used to compare the two ranges:

        * `overlap`: R1 overlaps fully or partially with R2.
        * `containing`: R1 contains R2.
        * `contained`: R1 is contained in R2.

        The range filter supports several value types, and relies on the natural sorting of the value type for range interpretation. Value ranges can be open-ended, but only at one end of the range. You can configure whether the lower bounds and upper bounds are inclusive or exclusive.

        A range 2 filter is useful for general restrictions that can be shared between searches (like a static date range) because the filter result is cached in memory. Range filters are not appropriate if the range is expected to be different for every query (for example, if the user controls the date range down to the hour via a UI control). Range filters are inclusive by default.
      example:
        fromField: validFrom
        toField: validTo
        filterMode: overlap
        fromValue: '2007-01-01T00:00:00.000Z'
        toValue: '2017-01-01T00:00:00.000Z'
      type: object
      properties:
        filterMode:
          default: overlap
          example: overlap
          description: 'Compare mode: overlap, containing, or contained.'
          enum:
            - overlap
            - containing
            - contained
          type: string
        fromField:
          description: The field name of the field that starts the first range.
          example: validFrom
          allOf:
            - $ref: '#/components/schemas/Field'
        fromInclusive:
          default: true
          example: true
          description: A flag indicating if the lower bound of the second range is inclusive. To make the lower bound exclusive, set to `false`.
          type: boolean
        fromValue:
          description: The lower bound of the second range. If not specified, the range is open-ended with respect to the lower bound. You can't leave both the lower and upper bounds open-ended.
          example: '2007-01-01T00:00:00.000Z'
        toField:
          description: The field name of the field that ends the first range.
          example: validTo
          allOf:
            - $ref: '#/components/schemas/Field'
        toInclusive:
          default: true
          example: true
          description: A flag indicating if the upper bound of the second range is inclusive. To make the lower bound exclusive, set to `false`.
          type: boolean
        toValue:
          description: The upper bound of the second range. If not specified, the range is open-ended with respect to the upper bound. You can't leave both the upper and lower bounds open-ended.
          example: '2017-01-01T00:00:00.000Z'
      required:
        - fromField
        - toField
      additionalProperties: false
    RangeFilter:
      description: |-
        Allows you to restrict a search result to hits that have values for a given attribute that fall within a given value range. The range filter supports several value types and relies on the natural sorting of the value type for range interpretation. Value ranges can be open-ended, but only at one end of the range. You can configure whether the lower bounds and upper bounds are inclusive or exclusive.

        A range filter is useful for general restrictions that can be shared between searches (like a static date range) because the filter result is cached in memory. Range filters are not appropriate if the range is expected to be different for every query (for example, if the user controls the date range down to the hour via a UI control). Range filters are inclusive by default.
      type: object
      properties:
        field:
          example: validFrom
          description: The search field.
          allOf:
            - $ref: '#/components/schemas/Field'
        from:
          oneOf:
            - type: string
              format: date-time
              example: '2007-01-01T00:00:00.000Z'
            - type: integer
              example: 1
            - type: number
              example: 1
          description: The lower bound of the filter range. If not specified, the range is open-ended with respect to the lower bound. You can't leave both the lower and upper bounds open-ended.
        fromInclusive:
          default: true
          example: true
          description: A flag indicating if the lower bound of the range is inclusive. To make the lower bound exclusive, set to `false`.
          type: boolean
        to:
          oneOf:
            - type: string
              format: date-time
              example: '2007-01-02T00:00:00.000Z'
            - type: integer
              example: 2
            - type: number
              example: 2
          description: The upper bound of the filter range. If not specified, the range is open-ended with respect to the upper bound. You can't leave both the upper and lower bounds open-ended.
        toInclusive:
          default: true
          example: true
          description: A flag indicating if the upper bound of the range is inclusive. To make the upper bound exclusive, set to `false`.
          type: boolean
      required:
        - field
    TermFilter:
      description: Allows you to restrict a search result to hits that match exactly one of the values configured for the filter. A term filter is useful for general restrictions that can be shared between searches. Use term filters whenever the criteria you filter on is a shared property of multiple searches (for example, like filtering by an order status). Use term filters for fields that have a discrete and small set of values only.
      example:
        field: id
        operator: is
        values:
          - myId
      type: object
      properties:
        field:
          description: The filter field.
          allOf:
            - $ref: '#/components/schemas/Field'
        operator:
          description: The operator used to compare the field's values with the given values.
          example: is
          enum:
            - is
            - one_of
            - is_null
            - is_not_null
            - less
            - greater
            - not_in
            - neq
          type: string
        values:
          description: The filter values.
          type: array
          items:
            type: string
            example: myId
      required:
        - field
        - operator
      additionalProperties: false
    FilteredQuery:
      description: Allows to filter the result of a possibly complex query using a possibly complex filter.
      example:
        query:
          textQuery:
            fields:
              - couponId
            searchPhrase: disabled
        filter:
          termFilter:
            field: enabled
            operator: is
            values:
              - false
      type: object
      properties:
        filter:
          $ref: '#/components/schemas/Filter'
        query:
          $ref: '#/components/schemas/Query'
      required:
        - filter
        - query
      additionalProperties: false
    MatchAllQuery:
      description: Matches all documents (namespace and document type). This query comes in handy if you just want to filter a search result or really do not have any constraints.
      type: object
    NestedQuery:
      description: "Allows you to query nested documents that are part of a larger document. Say, for example, that you have a main product with variations in one big document, and you want to constrain a search to main products that have variations that match multiple constraints. \n\nA `NestedQuery` is only supported by some Commerce APIs. For more details, see the endpoint descriptions in the API documentation.\n"
      example:
        path: order.shippingAddresses
        query:
          boolQuery:
            must:
              - boolQuery:
                  must:
                    - termQuery:
                        fields:
                          - order.shippingAddresses.firstName
                        operator: is
                        values:
                          - John
              - boolQuery:
                  must:
                    - termQuery:
                        fields:
                          - order.shippingAddresses.lastName
                        operator: is
                        values:
                          - Doe
        scoreMode: avg
      type: object
      properties:
        path:
          description: The path to the nested document.
          type: string
          example: order.shippingAddresses
          maxLength: 2048
        query:
          $ref: '#/components/schemas/Query'
        scoreMode:
          description: Indicates how scores for matching child objects affect the root parent document’s relevance score.
          enum:
            - avg
            - total
            - max
            - none
          type: string
          example: avg
      required:
        - path
        - query
      additionalProperties: false
    TermQuery:
      description: |-
        A term query matches one or more values against one or more document fields. A document is considered a hit if one of the values matches exactly with at least one of the given fields. The operator `is` can only take one value, while `one_of` can take multiple values. If multiple fields are specified, they are combined using a logical `OR` operator.

        **Limitations:**

        * The `greater` and `less` operators are not supported under certain conditions. Both operators are permitted unless the API documentation states otherwise.
        * A subset of Commerce APIs handle queries with multiple fields differently. If the query has multiple fields, the query is internally handled as a logical `OR` of `DisjointMaxQueries` (with the dismax matching a value against all fields). The dismax makes sure that a document carrying a single term in multiple fields does not get higher scores than a document matching multiple terms in multiple fields.
      type: object
      properties:
        fields:
          minItems: 1
          description: The document fields that the values are matched against, combined with the operator.
          type: array
          items:
            $ref: '#/components/schemas/Field'
        operator:
          description: Returns the operator to use for the term query.
          enum:
            - is
            - one_of
            - is_null
            - is_not_null
            - less
            - greater
            - not_in
            - neq
          type: string
          example: is
        values:
          description: The values that the fields are compared against, combined with the operator.
          type: array
          items:
            oneOf:
              - type: string
                example: myCouponId
              - type: number
                example: 1
              - type: boolean
                example: true
              - type: integer
                example: 1
            example: myCouponId
      required:
        - fields
        - operator
    TextQuery:
      description: A text query is used to match some text (for example, a search phrase possibly consisting of multiple terms) against one or more fields. When multiple fields are provided, the phrase conceptually forms a logical `OR` over the fields. In this case, the terms of the phrase basically have to match within the text, that would result in concatenating all given fields.
      example:
        fields:
          - couponId
        searchPhrase: limit
      type: object
      properties:
        fields:
          minItems: 1
          description: The document fields that the search phrase matches against.
          type: array
          items:
            $ref: '#/components/schemas/Field'
        searchPhrase:
          description: A search phrase, which can include multiple terms separated by spaces.
          type: string
          example: campaign summer
      required:
        - fields
        - searchPhrase
      additionalProperties: false
    String256:
      type: string
      maxLength: 256
      description: "The String256 schema is a foundational schema designed for fields or attributes that are stored in a database field with a maximum capacity of 256 bytes. \nThis schema accommodates various character sets, with the following considerations:\n  - ASCII Characters: Each ASCII character occupies 1 byte, allowing up to 256 characters.\n  - Latin Characters: Many Latin characters require 2 bytes each, allowing up to 128 characters.\n  - Asian Characters: Many Asian characters require 3 bytes each, allowing approximately 85 characters."
      example: Max Mustermann
    Sort:
      description: Document representing a sort request. Each API has a different default sort configuration that can be modified in the request.
      example:
        field: couponId
        sortOrder: desc
      type: object
      properties:
        field:
          description: The name of the field to sort on.
          allOf:
            - $ref: '#/components/schemas/String256'
        sortOrder:
          default: asc
          description: The sort order to be applied when sorting. When omitted, the default sort order (asc) is used.
          example: asc
          enum:
            - asc
            - desc
          type: string
      required:
        - field
      additionalProperties: false
    Offset:
      default: 0
      minimum: 0
      format: int64
      description: The zero-based index of the first hit/data to include in the result.
      type: integer
      example: 0
    SearchRequest:
      description: Document representing a search request for retrieving items within the Data API. The query is a potentially complex set of expressions. The fields and expands that each query supports are defined within the search resource.
      type: object
      properties:
        limit:
          description: Maximum records to retrieve per request, not to exceed 200.
          example: 10
          maximum: 200
          allOf:
            - $ref: '#/components/schemas/Limit'
        query:
          $ref: '#/components/schemas/Query'
        sorts:
          description: The list of sort clauses configured for the search request. Sort clauses are optional. See the description of the search endpoint for details on the default sorting behavior that is used when explicit sorts are not passed.
          type: array
          items:
            $ref: '#/components/schemas/Sort'
        offset:
          $ref: '#/components/schemas/Offset'
      required:
        - query
    Total:
      default: 0
      minimum: 0
      format: int64
      description: The total number of hits that match the search's criteria. This can be greater than the number of results returned as search results are pagenated.
      type: integer
      example: 10
    ResultBase:
      description: "Schema defining generic list result. Each response schema of a resource requiring a list response should extend this schema. \nAdditionally it needs to be defined what data is returned."
      type: object
      required:
        - limit
        - total
      properties:
        limit:
          maximum: 200
          allOf:
            - $ref: '#/components/schemas/Limit'
        total:
          $ref: '#/components/schemas/Total'
    PaginatedResultBase:
      description: "Schema defining generic pageable result. Each response schema of a resource requiring pagination should extend this schema. \nIf you use this extend this schema directly, it needs to be defined what data is returned. Allowed names for the data field is `data`."
      type: object
      allOf:
        - $ref: '#/components/schemas/ResultBase'
      properties:
        offset:
          $ref: '#/components/schemas/Offset'
      required:
        - limit
        - offset
        - total
    PaginatedSearchResult:
      description: Document representing a generic search result. Each search resource should extend this to define what is returned in the `hits`.
      properties:
        query:
          $ref: '#/components/schemas/Query'
        sorts:
          description: The sorting that was applied to the result.
          type: array
          items:
            $ref: '#/components/schemas/Sort'
        hits:
          description: The sorted array of search hits. Can be empty.
          type: array
          items:
            type: object
      allOf:
        - $ref: '#/components/schemas/PaginatedResultBase'
      type: object
      required:
        - query
      example:
        limit: 1
        hits:
          - couponId: coupon1
            creationDate: '2019-10-20T12:00:00Z'
            description: This coupon is used to give 10% off stuff.
            enabled: false
            exportedCodeCount: 0
            lastModified: '2019-10-30T04:23:59Z'
            redemptionCount: 3
            redemptionLimits:
              limitPerCode: 1
              limitPerCustomer: 1
              limitPerTimeFrame:
                limit: 2
                redemptionTimeFrame: 24
            singleCode: MyCode
            systemCodesConfig:
              codePrefix: SG
              numberOfCodes: 500000
            totalCodesCount: 50
            type: single_code
        query:
          textQuery:
            fields:
              - id
              - description
            searchPhrase: stuff
        sorts:
          - field: couponId
            sortOrder: desc
        offset: 2
        total: 8
      additionalProperties: false
    RedemptionLimitPerPeriod:
      description: Document representing a coupon redemption limit.
      type: object
      additionalProperties: false
      required:
        - limit
        - redemptionTimeFrame
      properties:
        limit:
          minimum: 0
          format: int32
          description: The limit on the number of times a coupon can be redeemed for a specified redemption time period.
          example: 1
          type: integer
        redemptionTimeFrame:
          minimum: 0
          maximum: 999
          format: int32
          description: The redemption time period.
          example: 24
          type: integer
    RedemptionLimits:
      description: Document representing a coupon.
      additionalProperties: false
      properties:
        limitPerCode:
          minimum: 0
          format: int32
          description: The redemption limit per code.
          example: 0
          type: integer
        limitPerCustomer:
          minimum: 0
          format: int32
          description: The redemption limit per customer.
          example: 0
          type: integer
        limitPerTimeFrame:
          description: The redemption limit per time frame.
          example:
            redemptionTimeFrame: 24
            limit: 1
          allOf:
            - $ref: '#/components/schemas/RedemptionLimitPerPeriod'
      type: object
      required:
        - limitPerCode
        - limitPerCustomer
        - limitPerTimeFrame
    CouponSystemCodeConfig:
      type: object
      required:
        - codePrefix
        - numberOfCodes
      additionalProperties: false
      properties:
        codePrefix:
          description: The code prefix for system-generated coupon codes.
          example: SG
          type: string
        numberOfCodes:
          format: int32
          description: The number of system coupon codes that can be issued.
          example: 50000
          type: integer
    Coupon:
      description: Document representing a coupon.
      type: object
      required:
        - couponId
        - enabled
        - type
      additionalProperties: false
      properties:
        couponId:
          minLength: 1
          maxLength: 256
          description: The ID of the coupon.
          example: MyCoupon
          type: string
        creationDate:
          description: Returns the value of attribute 'creationDate'.
          example: '2019-10-20T12:00:00Z'
          type: string
          format: date-time
        description:
          maxLength: 4000
          description: The description of the coupon.
          example: |
            This coupon is used to give 10% off stuff.
          type: string
        enabled:
          description: A flag indicating whether the coupon is enabled.
          example: false
          type: boolean
        exportedCodeCount:
          format: int32
          description: The number of coupon codes attached to the coupon that have been issued (read only).
          example: 0
          type: integer
        lastModified:
          description: Returns the value of attribute 'lastModified'.
          example: '2019-10-30T04:23:59Z'
          type: string
          format: date-time
        redemptionCount:
          format: int32
          description: The number of times the coupon has been redeemed (read only). The count is updated once per hour.
          example: 3
          type: integer
        redemptionLimits:
          description: The redemption limit per coupon code.
          allOf:
            - $ref: '#/components/schemas/RedemptionLimits'
          example:
            limitPerCode: 1
            limitPerCustomer: 1
            limitPerTimeFrame:
              limit: 2
              redemptionTimeFrame: 24
        singleCode:
          minLength: 1
          maxLength: 256
          description: Single coupon code, only valid for Single Code type.
          example: MyCode
          type: string
        systemCodesConfig:
          description: The configuration of system coupon codes, including prefix and number of codes.
          example:
            codePrefix: SG
            numberOfCodes: 500000
          allOf:
            - $ref: '#/components/schemas/CouponSystemCodeConfig'
        totalCodesCount:
          format: int32
          description: The total number of coupon codes associated with this coupon (read only). The count is updated once per hour.
          example: 50
          type: integer
        type:
          description: The type of coupon code.
          example: single_code
          enum:
            - single_code
            - multiple_codes
            - system_codes
          type: string
    CouponSearchResult:
      description: Document representing a coupon search result.
      allOf:
        - $ref: '#/components/schemas/PaginatedSearchResult'
      properties:
        hits:
          description: The sorted array of coupon search hits. Can be empty.
          type: array
          items:
            $ref: '#/components/schemas/Coupon'
      type: object
      required:
        - hits
    CouponRedemption:
      description: A redemption record returned from the coupon redemption resources.
      additionalProperties: false
      type: object
      required:
        - code
        - couponId
        - creationDate
        - customerEmail
        - orderNo
        - viewOrderUrl
      properties:
        code:
          description: The coupon code that was redeemed.
          type: string
        couponId:
          description: The coupon id that was redeemed.
          type: string
        creationDate:
          description: Date when the redemption was created.
          type: string
          format: date-time
        customerEmail:
          description: The customer email that was used to redeem it.
          type: string
        orderNo:
          description: The order number where the redemption occurred.
          type: string
        viewOrderUrl:
          description: A URL able to access the order.
          type: string
    CouponRedemptionSearchResult:
      description: The result of the coupon redemption search.
      allOf:
        - $ref: '#/components/schemas/PaginatedSearchResult'
      properties:
        hits:
          description: The array of coupon redemption search hits. Can be empty.
          type: array
          items:
            $ref: '#/components/schemas/CouponRedemption'
      type: object
      required:
        - hits
    CouponCodeRedemptionRequest:
      description: Document representing a request to redeem a coupon.
      type: object
      required:
        - code
        - orderNo
      additionalProperties: false
      properties:
        code:
          description: The coupon code to redeem.
          example: Code1
          type: string
        customerEmail:
          description: The customer email to use on the redemption.
          example: shopper@salesforce-test.com
          type: string
        orderNo:
          description: "The order number to use on the redemption. In case the coupon \nwas redeemed externally and no order number is associated, use \na reference id or custom string to identify the source of the \nredemption.\n"
          example: 00023120@store4
          type: string
    ErrorResponse:
      type: object
      additionalProperties: true
      properties:
        title:
          description: "A short, human-readable summary of the problem\ntype.  It will not change from occurrence to occurrence of the \nproblem, except for purposes of localization\n"
          type: string
          maxLength: 256
          example: You do not have enough credit
        type:
          description: |
            A URI reference [RFC3986] that identifies the
            problem type.  This specification encourages that, when
            dereferenced, it provide human-readable documentation for the
            problem type (e.g., using HTML [W3C.REC-html5-20141028]).  When
            this member is not present, its value is assumed to be
            "about:blank". It accepts relative URIs; this means
            that they must be resolved relative to the document's base URI, as
            per [RFC3986], Section 5.
          type: string
          maxLength: 2048
          example: NotEnoughMoney
        detail:
          description: A human-readable explanation specific to this occurrence of the problem.
          type: string
          example: Your current balance is 30, but that costs 50
        instance:
          description: |
            A URI reference that identifies the specific
            occurrence of the problem.  It may or may not yield further
            information if dereferenced.  It accepts relative URIs; this means
            that they must be resolved relative to the document's base URI, as
            per [RFC3986], Section 5.
          type: string
          maxLength: 2048
          example: /account/12345/msgs/abc
      required:
        - title
        - type
        - detail
    CouponCode:
      description: A coupon code with accompanying stats for redemptions and issues.
      type: object
      required:
        - code
        - issued
        - redemptionCount
      additionalProperties: false
      properties:
        code:
          description: The code used to redeem the coupon.
          example: MyCode
          type: string
        issued:
          description: Flag indicating if the coupon code has been issued.
          example: true
          type: boolean
        redemptionCount:
          format: int32
          description: The count of the number of redemptions associated with the code.
          example: 1
          type: integer
    CouponCodes:
      description: Document representing a set of coupon codes.
      type: object
      required:
        - data
        - total
      allOf:
        - $ref: '#/components/schemas/PaginatedResultBase'
      properties:
        data:
          description: The collection of coupon codes.
          example:
            - code: Code1
              issued: false
              redemptionCount: 0
          type: array
          items:
            $ref: '#/components/schemas/CouponCode'
    CouponMultiCodesRequest:
      description: A request object to add and remove coupon codes from a document.
      type: object
      additionalProperties: false
      required:
        - codes
      properties:
        codes:
          description: The list of coupon codes to add or delete.
          example:
            - CodeA
            - CodeB
          type: array
          items:
            type: string
  parameters:
    organizationId:
      description: An identifier for the organization the request is being made by
      name: organizationId
      in: path
      required: true
      example: f_ecom_zzxy_prd
      schema:
        $ref: '#/components/schemas/OrganizationId'
    siteId:
      description: The identifier of the site that a request is being made in the context of. Attributes might have site specific values, and some objects may only be assigned to specific sites.
      name: siteId
      in: query
      required: true
      examples:
        SiteId:
          value: RefArch
      schema:
        $ref: '#/components/schemas/SiteId'
    couponId:
      name: couponId
      in: path
      description: The ID of the coupon to create.
      required: true
      schema:
        minLength: 1
        type: string
    delete:
      name: delete
      in: query
      description: Pass as true to delete the passed codes.
      required: false
      schema:
        type: boolean
        default: false
  examples:
    PostRedeemCoupon:
      value:
        code: Code1
        customerEmail: shopper@salesforce-test.com
        orderNo: 00023120@store4
    CouponCodeNotRedeemable400:
      value:
        type: https://api.commercecloud.salesforce.com/documentation/error/v1/errors/coupon-code-not-redeemable
        title: Coupon Code Not Redeemable
        detail: The coupon code 'CODE374' in site 'RefArch' is not redeemable because 'COUPON_DISABLED'.
        errorCode: COUPON_DISABLED
        couponCode: CODE374
        siteId: RefArch
    CouponCodeNotFound404:
      value:
        type: https://api.commercecloud.salesforce.com/documentation/error/v1/errors/coupon-not-found
        title: Coupon Not Found
        detail: No coupon for the given coupon code 'CODE374' and site 'RefArch' could be found.
        couponCode: CODE374
        siteId: RefArch
    Coupon:
      value:
        couponId: MyCoupon
        creationDate: '2019-10-20T12:00:00Z'
        description: This coupon is used to give 10% off stuff.
        enabled: false
        exportedCodeCount: 0
        lastModified: '2019-10-30T04:23:59Z'
        redemptionCount: 3
        redemptionLimits:
          limitPerCode: 0
          limitPerCustomer: 0
          limitPerTimeFrame:
            redemptionTimeFrame: 24
            limit: 1
        singleCode: MyCode
        systemCodesConfig:
          codePrefix: SG
          numberOfCodes: 50000
        totalCodesCount: 50
        type: single_code
    CouponNotFound404:
      value:
        type: https://api.commercecloud.salesforce.com/documentation/error/v1/errors/coupon-not-found
        title: Coupon Not Found
        detail: No coupon with ID 'foo' for site 'RefArch' could be found.
        couponId: foo
        siteId: RefArch
    CouponCodeDuplicate400:
      value:
        type: https://api.commercecloud.salesforce.com/documentation/error/v1/errors/coupon-code-duplicate
        title: Coupon Code Duplicate
        detail: The coupon code 'bar' is already used in coupon 'foo'. Please make sure the code is unique.
        couponId: foo
        couponCode: bar
    SiteAccessForbidden403:
      value:
        type: https://api.commercecloud.salesforce.com/documentation/error/v1/errors/site-access-forbidden
        title: Site Access Forbidden
        detail: Site-specific access via '/s/RefArch/' isn't allowed. Organization-specific access is expected via '/s/-/'.
        siteId: RefArch
    UpdateCoupon:
      value:
        couponId: MyCoupon
        creationDate: '2019-10-20T12:00:00Z'
        description: This coupon is used to give 10% off stuff.
        enabled: false
        exportedCodeCount: 0
        lastModified: '2019-10-30T04:23:59Z'
        redemptionCount: 3
        redemptionLimits:
          limitPerCode: 0
          limitPerCustomer: 0
          limitPerTimeFrame:
            redemptionTimeFrame: 24
            limit: 1
        singleCode: MyCode
        systemCodesConfig:
          codePrefix: SG
          numberOfCodes: 50000
        totalCodesCount: 50
        type: single_code
    LegacyCouponCoupon403:
      value:
        type: https://api.commercecloud.salesforce.com/documentation/error/v1/errors/coupon-legacy-update-forbidden
        title: Coupon Legacy Update Forbidden
        detail: The coupon 'foo' can't be modified because it was created before Release 16.7.2. Customers can still redeem this coupon code on the Storefront.
        couponId: foo
    GetCouponCodes:
      value:
        limit: 3
        offset: 0
        total: 50
        data:
          - code: CodeA
            issued: false
            redemptionCount: 0
          - code: CodeB
            issued: false
            redemptionCount: 0
          - code: CodeC
            issued: false
            redemptionCount: 0
    CouponCodeCreate400:
      value:
        type: https://api.commercecloud.salesforce.com/documentation/error/v1/errors/coupon-code-create
        title: Coupon Code Create
        detail: The coupon code 'bar' couldn't be created. Please make sure the code is valid.
        couponCode: bar
