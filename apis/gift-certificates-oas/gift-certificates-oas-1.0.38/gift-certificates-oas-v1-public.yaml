openapi: 3.0.3
info:
  title: Gift Certificates
  version: v1
  description: |-
    # API Overview

    Use the Gift Certificates API to create, update, and delete gift certificates, so that your storefront customers can purchase and redeem gift certificates.

    ## Authentication & Authorization

    The client requesting the gift certificate information must have access to the Gift Certificates resource. For resource access, you must use a client ID and client secret from Account Manager to request an access token. The access token is used as a bearer token and added to the Authorization header of your API request. The client must first authenticate against Account Manager to log in.

    You must include the relevant scope(s) in the client ID used to generate the token. For details, see [Authorization Scopes Catalog.](https://developer.salesforce.com/docs/commerce/commerce-api/guide/auth-z-scope-catalog.html)

    For detailed setup instructions, see [Authorization for Admin APIs](https://developer.salesforce.com/docs/commerce/commerce-api/guide/authorization-for-admin-apis.html).

    ## Use Cases

    ### Capture All Gift Certificates

    Retrieve all gift certificates for a site with no filtering.

    ### Capture Specific Gift Certificates

    Retrieve a specific gift certificate for a site using a merchant ID.

    ### Create Site Specific Gift Certificates

    Create and issue site-specific gift certificates with information such as amount, description, status, recipient email, recipient name, sender name, and so on.

    ### Update Gift Certificates

    Update a gift certificate with specified information using a merchant ID.
servers:
  - url: https://{shortCode}.api.commercecloud.salesforce.com/pricing/gift-certificates/v1
    variables:
      shortCode:
        default: shortCode
paths:
  /organizations/{organizationId}/gift-certificates:
    put:
      summary: Create a gift certificate using the information provided.
      description: If an existing identifier is specified, the gift certificate with that unique identifier is deleted and a new one is created.
      operationId: createGiftCertificate
      parameters:
        - $ref: '#/components/parameters/organizationId'
        - $ref: '#/components/parameters/siteId'
      requestBody:
        content:
          application/json:
            examples:
              Gift-Certificates:
                $ref: '#/components/examples/GiftCertificateCreateExample'
            schema:
              $ref: '#/components/schemas/GiftCertificate'
        required: true
      responses:
        '200':
          description: Successfully created the gift certificate.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GiftCertificate'
              examples:
                CreateGiftCertificateSuccess:
                  $ref: '#/components/examples/CreateGiftCertificateSuccess'
        '400':
          description: |-
            Potential reasons:
            - Thrown when the merchant ID is not unique.
            - Thrown when the specified gift certificate status is invalid.
            - Thrown when the specified gift certificate is not valid (the argument indicates the field that was invalid).
            - Thrown when the specified amount is out of range.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                InvalidRecipientEmail400:
                  $ref: '#/components/examples/InvalidRecipientEmail400'
                InvalidStatus400:
                  $ref: '#/components/examples/InvalidStatus400'
                Invalid400:
                  $ref: '#/components/examples/Invalid400'
                MerchantIdNotUnique400:
                  $ref: '#/components/examples/MerchantIdNotUnique400'
        '404':
          description: Thrown when the gift certificate does not exist or does not match the specified merchant ID.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                createGiftCertificate404:
                  $ref: '#/components/examples/GiftCertificate404'
      security:
        - AmOAuth2:
            - sfcc.gift-certificates.rw
    post:
      summary: Search for gift certificates.
      description: |-
        Use the following searchable query attributes to narrow the search:

        | Attribute | Type | Sortable |
        |-----------|--------|----------|
        | merchantId | String | yes |
        | maskedGiftCertificateCode * | String | no |
        | orderNo | String | yes |
        | senderName | String | yes |
        | recipientName | String | yes |
        | recipientEmail | String | yes |
        | status | String | yes |
        | enabled | Boolean | yes |
        | message | String | yes |
        | description | String | yes |
        | creationDate | Date | yes |
        | currencyMnemonic ** | String | yes |

        ## Notes:
          * *`maskedGiftCertificateCode`, also known as just code, can only be used in a term query.  If a
         four-character code is supplied, it is assumed that the search is on the unmasked portion of the code. Otherwise,
         the full code must be matched.  Text queries are not allowed.
          * **`currencyMnemonic` can only be joined with other attributes using a conjunction (`AND`).
          * Only searchable attributes can be used in sorting.
      operationId: giftCertificatesSearch
      parameters:
        - $ref: '#/components/parameters/organizationId'
        - $ref: '#/components/parameters/siteId'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SearchRequest'
      responses:
        '200':
          description: Successfully returned the gift certificate information.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GiftCertificateSearchResult'
              examples:
                GiftCertificatesSearchSuccess:
                  $ref: '#/components/examples/GiftCertificatesSearchSuccess'
        '400':
          description: |-
            Potential reasons:
            - Thrown when the given query field cannot be queried.
            - Thrown when the query is malformed.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                UnqueryableField400:
                  $ref: '#/components/examples/UnqueryableField400'
                MalformedSearchParameter400:
                  $ref: '#/components/examples/MalformedSearchParameter400'
      security:
        - AmOAuth2:
            - sfcc.gift-certificates
            - sfcc.gift-certificates.rw
  /organizations/{organizationId}/gift-certificates/{merchantId}:
    get:
      description: Retrieve gift certificate information for a specified merchant ID.
      operationId: getGiftCertificate
      parameters:
        - $ref: '#/components/parameters/organizationId'
        - $ref: '#/components/parameters/merchantId'
        - $ref: '#/components/parameters/siteId'
      responses:
        '200':
          description: Successfully retrieved the gift certificate information for the specified merchant ID.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GiftCertificate'
              examples:
                GetGiftCertificateSuccess:
                  $ref: '#/components/examples/GetGiftCertificateSuccess'
        '404':
          description: Thrown when the gift certificate does not exist or does not match the specified merchant ID.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                createGiftCertificate404:
                  $ref: '#/components/examples/GiftCertificate404'
      security:
        - AmOAuth2:
            - sfcc.gift-certificates
            - sfcc.gift-certificates.rw
    delete:
      summary: Delete gift certificate information for a specified merchant ID.
      operationId: deleteGiftCertificate
      parameters:
        - $ref: '#/components/parameters/organizationId'
        - $ref: '#/components/parameters/merchantId'
        - $ref: '#/components/parameters/siteId'
      responses:
        '204':
          description: Successfully deleted the gift certificate information for the specified merchant ID.
      security:
        - AmOAuth2:
            - sfcc.gift-certificates.rw
    patch:
      summary: Update gift certificate information for a specified merchant ID.
      operationId: updateGiftCertificate
      parameters:
        - $ref: '#/components/parameters/organizationId'
        - $ref: '#/components/parameters/merchantId'
        - $ref: '#/components/parameters/siteId'
      requestBody:
        content:
          application/json:
            examples:
              Gift-Certificates:
                $ref: '#/components/examples/GiftCertificateUpdateExample'
            schema:
              $ref: '#/components/schemas/GiftCertificate'
        required: true
      responses:
        '200':
          description: Successfully updated the gift certificate information for the specified merchant ID.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GiftCertificate'
              examples:
                updateGiftCertificateSuccess:
                  $ref: '#/components/examples/UpdateGiftCertificateSuccess'
        '400':
          description: |-
            Potential reasons:
            - Thrown when the recipient email address is invalid.
            - Thrown when the specified gift certificate status is invalid.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                InvalidRecipientEmail400:
                  $ref: '#/components/examples/InvalidRecipientEmail400'
                InvalidStatus400:
                  $ref: '#/components/examples/InvalidStatus400'
        '404':
          description: Thrown when the gift certificate does not exist or does not match the specified merchant ID.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                createGiftCertificate404:
                  $ref: '#/components/examples/GiftCertificate404'
      security:
        - AmOAuth2:
            - sfcc.gift-certificates.rw
components:
  securitySchemes:
    AmOAuth2:
      type: oauth2
      description: AccountManager OAuth 2.0 bearer token Authentication.
      flows:
        clientCredentials:
          tokenUrl: https://account.demandware.com/dwsso/oauth2/access_token
          scopes:
            sfcc.gift-certificates: gift certificate READONLY
            sfcc.gift-certificates.rw: gift certificate read/write
        authorizationCode:
          authorizationUrl: https://account.demandware.com/dwsso/oauth2/authorize
          tokenUrl: https://account.demandware.com/dwsso/oauth2/access_token
          scopes:
            sfcc.gift-certificates: gift certificate READONLY
            sfcc.gift-certificates.rw: gift certificate read/write
  schemas:
    OrganizationId:
      description: An identifier for the organization the request is being made by
      example: f_ecom_zzxy_prd
      type: string
      minLength: 1
      maxLength: 32
    SiteId:
      minLength: 1
      maxLength: 32
      description: The identifier of the site that a request is being made in the context of. Attributes might have site specific values, and some objects may only be assigned to specific sites
      example: RefArch
      type: string
    ISOCurrency:
      pattern: ^[A-Z][A-Z][A-Z]$
      description: A three letter uppercase currency code conforming to the [ISO 4217](https://www.iso.org/iso-4217-currency-codes.html) standard.
      example: USD
      type: string
    NoValue:
      default: N/A
      description: A specialized value indicating the lack of definition of a currency, for example, if the value of the monetary value of the currency is an undefined number.
      example: N/A
      enum:
        - N/A
      type: string
    CurrencyCode:
      description: A three letter uppercase currency code conforming to the [ISO 4217](https://www.iso.org/iso-4217-currency-codes.html) standard, or the string `N/A` indicating that a currency is not applicable.
      example: USD
      oneOf:
        - $ref: '#/components/schemas/ISOCurrency'
        - $ref: '#/components/schemas/NoValue'
    Money:
      description: A combination of a Currency and an amount of that Currency.
      type: object
      properties:
        currencyMnemonic:
          $ref: '#/components/schemas/CurrencyCode'
        value:
          format: double
          description: The amount of money for the given currency.
          example: 1234.56
          type: number
    AccountTransaction:
      type: object
      required:
        - amount
        - orderNo
        - timestamp
        - typeCode
      properties:
        amount:
          $ref: '#/components/schemas/Money'
        orderNo:
          type: string
          description: The order number of the gift certificate.
          example: my-order-43128
        timestamp:
          type: string
          description: The timestamp of the transaction of the gift certificate.
          format: date-time
          example: 1578516896.641
        typeCode:
          type: string
          description: The type code of the gift certificate.
          example: redeem
          enum:
            - create
            - redeem
            - delete
            - enable
            - disable
      description: Document representing an account transaction.
    GiftCertificate:
      description: Document representing a gift certificate.
      type: object
      properties:
        amount:
          description: |-
            The gift certificate amount.
             The user cannot change the gift certificate amount after the creation of the gift certificate.
          allOf:
            - $ref: '#/components/schemas/Money'
        balance:
          type: object
          description: |-
            The gift certificate balance.
             This is a computed attribute and cannot be modified.
          allOf:
            - $ref: '#/components/schemas/Money'
        creationDate:
          type: string
          description: Returns the value of attribute 'creationDate'.
          format: date-time
          example: 1578516896.641
        description:
          maxLength: 4000
          type: string
          description: The description of the gift certificate.
          example: |
            A gift certificate for birthday.
        enabled:
          type: boolean
          description: The enabled flag of the gift certificate.
          example: true
        lastModified:
          type: string
          description: Returns the value of attribute 'lastModified'.
          format: date-time
          example: 1578516896.641
        maskedGiftCertificateCode:
          type: string
          description: Masked code.
          example: '*******XQTY'
        merchantId:
          type: string
          description: |-
            The merchant ID of the gift certificate.
             This is a unique attribute.
             This is a computed attribute and cannot be modified.
             This is used to get, update and the delete gift certificates.
          example: |
            Macy's1256489
        message:
          maxLength: 4000
          type: string
          description: The message to the recipient of the gift certificate.
          example: |
            This gift certificate is to be given as birthday present
        orderNo:
          type: string
          description: The order number of the gift certificate.
          example: |
            MyOrder5421
        recipientEmail:
          type: string
          description: The email address of the recipient of the gift certificate.
          example: |
            my-recipient-email@gmail.com
        recipientName:
          maxLength: 256
          type: string
          description: The recipient of the gift certificate.
          example: |
            Jane Doe
        senderName:
          maxLength: 256
          type: string
          description: The sender of the gift certificate.
          example: |
            John Smith
        status:
          type: string
          description: |-
            The status of the gift certificate.
             While creating a gift certificate, user can set the status
             to either "pending" or "issued" only.
          example: issued
          enum:
            - issued
            - partially_redeemed
            - pending
            - redeemed
        transactions:
          items:
            $ref: '#/components/schemas/AccountTransaction'
          type: array
          description: The transactions of the gift certificate.
          example:
            - amount:
                currencyMnemonic: USD
                value: 1000
              orderNo: my-test-order_no
              timestamp: '2020-01-08T20:54:56.644Z'
              typeCode: create
    ErrorResponse:
      type: object
      additionalProperties: true
      properties:
        title:
          description: "A short, human-readable summary of the problem\ntype.  It will not change from occurrence to occurrence of the \nproblem, except for purposes of localization\n"
          type: string
          maxLength: 256
          example: You do not have enough credit
        type:
          description: |
            A URI reference [RFC3986] that identifies the
            problem type.  This specification encourages that, when
            dereferenced, it provide human-readable documentation for the
            problem type (e.g., using HTML [W3C.REC-html5-20141028]).  When
            this member is not present, its value is assumed to be
            "about:blank". It accepts relative URIs; this means
            that they must be resolved relative to the document's base URI, as
            per [RFC3986], Section 5.
          type: string
          maxLength: 2048
          example: NotEnoughMoney
        detail:
          description: A human-readable explanation specific to this occurrence of the problem.
          type: string
          example: Your current balance is 30, but that costs 50
        instance:
          description: |
            A URI reference that identifies the specific
            occurrence of the problem.  It may or may not yield further
            information if dereferenced.  It accepts relative URIs; this means
            that they must be resolved relative to the document's base URI, as
            per [RFC3986], Section 5.
          type: string
          maxLength: 2048
          example: /account/12345/msgs/abc
      required:
        - title
        - type
        - detail
    Limit:
      default: 10
      minimum: 1
      format: int32
      description: Maximum records to retrieve per request, not to exceed the maximum defined. A limit must be at least 1 so at least one record is returned (if any match the criteria).
      type: integer
      example: 10
    Query:
      minProperties: 1
      maxProperties: 1
      description: |-
        A set of objects that define criteria used to select records. A query can contain one of the following:
        * `MatchAllQuery`
         - Matches all documents.
        * `TermQuery`
         - Matches one or more documents against one or more document fields.
        * `TextQuery`
         - Matches text against one or more fields.
        * `BoolQuery`
         - Allows construction of a logical expression of multiple queries.
        * `FilteredQuery`
         - Allows a filter to be applied to a query.
        * `NestedQuery`
         - Allows you to query on nested documents.
         - _Only supported by some Commerce APIs. For more details, see the endpoint descriptions in the API documentation._
      example:
        filteredQuery:
          query:
            textQuery:
              fields:
                - couponId
              searchPhrase: disabled
          filter:
            termFilter:
              field: enabled
              operator: is
              values:
                - false
      type: object
      properties:
        boolQuery:
          $ref: '#/components/schemas/BoolQuery'
        filteredQuery:
          $ref: '#/components/schemas/FilteredQuery'
        matchAllQuery:
          $ref: '#/components/schemas/MatchAllQuery'
        nestedQuery:
          $ref: '#/components/schemas/NestedQuery'
        termQuery:
          $ref: '#/components/schemas/TermQuery'
        textQuery:
          $ref: '#/components/schemas/TextQuery'
    BoolQuery:
      description: "A boolean query allows construction of full logical expression trees that are composed of other queries (usually term queries and text queries). A boolean query has three sets of clauses:\n  \n  - `must`, which combines as an `AND` operator.\n  - `should`, which combines as an `OR` operator.\n  - `must_not`, which combines as a `NOT` operator.\n  \nIf `must`, `mustNot`, or `should` appear in the same boolean query, they are combined logically using the `AND` operator. For example:\n\n    (must-1 AND must-1 AND ...)\n      AND (should-1 OR should-2 OR ...)\n      AND NOT (must_not-1 OR must_not-2 OR ...)\n"
      type: object
      example:
        value:
          must:
            - textQuery:
                fields:
                  - couponId
                searchPhrase: DEAL
            - textQuery:
                fields:
                  - description
                searchPhrase: Big bargain deal
          mustNot:
            - termQuery:
                fields:
                  - enabled
                operator: is
                values:
                  - false
      properties:
        must:
          description: List of queries to be evaluated as an `AND` operator.
          type: array
          items:
            $ref: '#/components/schemas/Query'
        mustNot:
          description: List of queries to be evaluated as a `NOT` operator.
          type: array
          items:
            $ref: '#/components/schemas/Query'
        should:
          description: List of queries to be evaluated as an `OR` operator.
          type: array
          items:
            $ref: '#/components/schemas/Query'
    Filter:
      minProperties: 1
      maxProperties: 1
      description: |-
        Contains a set of objects that define criteria used to select records. A filter can contain one of the following:
          * `TermFilter`
           - Matches records where a field (or fields) exactly matches some simple value (including `null`).
          * `RangeFilter`
           - Matches records where a field value lies within a specified range.
          * `Range2Filter`
           - Matches records in a specified range across fields.
          * `QueryFilter`
           - Matches records based on a query.
          * `BoolFilter`
           - Provides filtering of records using a set of filters combined using a logical operator.
      example: null
      type: object
      properties:
        boolFilter:
          $ref: '#/components/schemas/BoolFilter'
        queryFilter:
          $ref: '#/components/schemas/QueryFilter'
        range2Filter:
          $ref: '#/components/schemas/Range2Filter'
        rangeFilter:
          $ref: '#/components/schemas/RangeFilter'
        termFilter:
          $ref: '#/components/schemas/TermFilter'
    BoolFilter:
      description: Allows you to combine other filters into (possibly recursive) logical expression trees. A boolean filter is composed of a logical operator (`AND`, `OR`, `NOT`) and a list of filters that the operator relates to. Multiple filters can be negated with a single `NOT` operator, even when the filters are combined with the `AND` operator.
      example:
        value:
          operator: and
          filters:
            - termFilter:
                field: id
                operator: is
                values:
                  - myId
            - termFilter:
                field: couponId
                operator: is
                values:
                  - couponOne
      type: object
      properties:
        filters:
          description: A list of filters that are logically combined by an operator.
          type: array
          items:
            $ref: '#/components/schemas/Filter'
        operator:
          description: The logical operator that is used to combine the filters.
          enum:
            - and
            - or
            - not
          type: string
          example: and
      required:
        - operator
    QueryFilter:
      description: Wraps any query and allows it to be used as a filter.
      type: object
      properties:
        query:
          $ref: '#/components/schemas/Query'
      required:
        - query
    Field:
      description: Name of the field. Might be a custom field name prefixed with c_.
      maxLength: 260
      type: string
      example: couponId
    Range2Filter:
      description: |-
        Allows you to restrict a search result to hits where a range defined by specified attributes has a certain relationship to a specified range.

        The first range (R1) is defined by a pair of attributes (`fromField` and `toField`) that specify the extent of a range, such as attributes `validFrom` and `validTo`.

        The second range (R2) is defined by `fromValue` and `toValue`.

        The filter mode specifies the method used to compare the two ranges:

        * `overlap`: R1 overlaps fully or partially with R2.
        * `containing`: R1 contains R2.
        * `contained`: R1 is contained in R2.

        The range filter supports several value types, and relies on the natural sorting of the value type for range interpretation. Value ranges can be open-ended, but only at one end of the range. You can configure whether the lower bounds and upper bounds are inclusive or exclusive.

        A range 2 filter is useful for general restrictions that can be shared between searches (like a static date range) because the filter result is cached in memory. Range filters are not appropriate if the range is expected to be different for every query (for example, if the user controls the date range down to the hour via a UI control). Range filters are inclusive by default.
      example:
        fromField: validFrom
        toField: validTo
        filterMode: overlap
        fromValue: '2007-01-01T00:00:00.000Z'
        toValue: '2017-01-01T00:00:00.000Z'
      type: object
      properties:
        filterMode:
          default: overlap
          example: overlap
          description: 'Compare mode: overlap, containing, or contained.'
          enum:
            - overlap
            - containing
            - contained
          type: string
        fromField:
          description: The field name of the field that starts the first range.
          example: validFrom
          allOf:
            - $ref: '#/components/schemas/Field'
        fromInclusive:
          default: true
          example: true
          description: A flag indicating if the lower bound of the second range is inclusive. To make the lower bound exclusive, set to `false`.
          type: boolean
        fromValue:
          description: The lower bound of the second range. If not specified, the range is open-ended with respect to the lower bound. You can't leave both the lower and upper bounds open-ended.
          example: '2007-01-01T00:00:00.000Z'
        toField:
          description: The field name of the field that ends the first range.
          example: validTo
          allOf:
            - $ref: '#/components/schemas/Field'
        toInclusive:
          default: true
          example: true
          description: A flag indicating if the upper bound of the second range is inclusive. To make the lower bound exclusive, set to `false`.
          type: boolean
        toValue:
          description: The upper bound of the second range. If not specified, the range is open-ended with respect to the upper bound. You can't leave both the upper and lower bounds open-ended.
          example: '2017-01-01T00:00:00.000Z'
      required:
        - fromField
        - toField
    RangeFilter:
      description: |-
        Allows you to restrict a search result to hits that have values for a given attribute that fall within a given value range. The range filter supports several value types and relies on the natural sorting of the value type for range interpretation. Value ranges can be open-ended, but only at one end of the range. You can configure whether the lower bounds and upper bounds are inclusive or exclusive.

        A range filter is useful for general restrictions that can be shared between searches (like a static date range) because the filter result is cached in memory. Range filters are not appropriate if the range is expected to be different for every query (for example, if the user controls the date range down to the hour via a UI control). Range filters are inclusive by default.
      type: object
      properties:
        field:
          example: validFrom
          description: The search field.
          allOf:
            - $ref: '#/components/schemas/Field'
        from:
          description: The lower bound of the filter range. If not specified, the range is open-ended with respect to the lower bound. You can't leave both the lower and upper bounds open-ended.
          example: '2007-01-01T00:00:00.000Z'
        fromInclusive:
          default: true
          example: true
          description: A flag indicating if the lower bound of the range is inclusive. To make the lower bound exclusive, set to `false`.
          type: boolean
        to:
          description: The upper bound of the filter range. If not specified, the range is open-ended with respect to the upper bound. You can't leave both the upper and lower bounds open-ended.
          example: '2017-01-01T00:00:00.000Z'
        toInclusive:
          default: true
          example: true
          description: A flag indicating if the upper bound of the range is inclusive. To make the upper bound exclusive, set to `false`.
          type: boolean
      required:
        - field
    TermFilter:
      description: Allows you to restrict a search result to hits that match exactly one of the values configured for the filter. A term filter is useful for general restrictions that can be shared between searches. Use term filters whenever the criteria you filter on is a shared property of multiple searches (for example, like filtering by an order status). Use term filters for fields that have a discrete and small set of values only.
      example:
        field: id
        operator: is
        values:
          - myId
      type: object
      properties:
        field:
          description: The filter field.
          allOf:
            - $ref: '#/components/schemas/Field'
        operator:
          description: The operator used to compare the field's values with the given values.
          example: is
          enum:
            - is
            - one_of
            - is_null
            - is_not_null
            - less
            - greater
            - not_in
            - neq
          type: string
        values:
          description: The filter values.
          type: array
          items:
            type: string
            example: myId
      required:
        - field
        - operator
    FilteredQuery:
      description: Allows to filter the result of a possibly complex query using a possibly complex filter.
      example:
        query:
          textQuery:
            fields:
              - couponId
            searchPhrase: disabled
        filter:
          termFilter:
            field: enabled
            operator: is
            values:
              - false
      type: object
      properties:
        filter:
          $ref: '#/components/schemas/Filter'
        query:
          $ref: '#/components/schemas/Query'
      required:
        - filter
        - query
    MatchAllQuery:
      description: Matches all documents (namespace and document type). This query comes in handy if you just want to filter a search result or really do not have any constraints.
      type: object
    NestedQuery:
      description: "Allows you to query nested documents that are part of a larger document. Say, for example, that you have a main product with variations in one big document, and you want to constrain a search to main products that have variations that match multiple constraints. \n\nA `NestedQuery` is only supported by some Commerce APIs. For more details, see the endpoint descriptions in the API documentation.\n"
      example:
        path: order.shippingAddresses
        query:
          boolQuery:
            must:
              - boolQuery:
                  must:
                    - termQuery:
                        fields:
                          - order.shippingAddresses.firstName
                        operator: is
                        values:
                          - John
              - boolQuery:
                  must:
                    - termQuery:
                        fields:
                          - order.shippingAddresses.lastName
                        operator: is
                        values:
                          - Doe
        scoreMode: avg
      type: object
      properties:
        path:
          description: The path to the nested document.
          type: string
          example: order.shippingAddresses
          maxLength: 2048
        query:
          $ref: '#/components/schemas/Query'
        scoreMode:
          description: Indicates how scores for matching child objects affect the root parent document’s relevance score.
          enum:
            - avg
            - total
            - max
            - none
          type: string
          example: avg
      required:
        - path
        - query
    TermQuery:
      description: |-
        A term query matches one or more values against one or more document fields. A document is considered a hit if one of the values matches exactly with at least one of the given fields. The operator `is` can only take one value, while `one_of` can take multiple values. If multiple fields are specified, they are combined using a logical `OR` operator.

        **Limitations:**

        * The `greater` and `less` operators are not supported under certain conditions. Both operators are permitted unless the API documentation states otherwise.
        * A subset of Commerce APIs handle queries with multiple fields differently. If the query has multiple fields, the query is internally handled as a logical `OR` of `DisjointMaxQueries` (with the dismax matching a value against all fields). The dismax makes sure that a document carrying a single term in multiple fields does not get higher scores than a document matching multiple terms in multiple fields.
      type: object
      properties:
        fields:
          minItems: 1
          description: The document fields that the values are matched against, combined with the operator.
          type: array
          items:
            $ref: '#/components/schemas/Field'
        operator:
          description: Returns the operator to use for the term query.
          enum:
            - is
            - one_of
            - is_null
            - is_not_null
            - less
            - greater
            - not_in
            - neq
          type: string
          example: is
        values:
          description: The values that the fields are compared against, combined with the operator.
          type: array
          items:
            type: string
            example: myCouponId
      required:
        - fields
        - operator
    TextQuery:
      description: A text query is used to match some text (for example, a search phrase possibly consisting of multiple terms) against one or more fields. When multiple fields are provided, the phrase conceptually forms a logical `OR` over the fields. In this case, the terms of the phrase basically have to match within the text, that would result in concatenating all given fields.
      example:
        fields:
          - couponId
        searchPhrase: limit
      type: object
      properties:
        fields:
          minItems: 1
          description: The document fields that the search phrase matches against.
          type: array
          items:
            $ref: '#/components/schemas/Field'
        searchPhrase:
          description: A search phrase, which can include multiple terms separated by spaces.
          type: string
          example: campaign summer
      required:
        - fields
        - searchPhrase
    String256:
      type: string
      maxLength: 256
      description: "The String256 schema is a foundational schema designed for fields or attributes that are stored in a database field with a maximum capacity of 256 bytes. \nThis schema accommodates various character sets, with the following considerations:\n  - ASCII Characters: Each ASCII character occupies 1 byte, allowing up to 256 characters.\n  - Latin Characters: Many Latin characters require 2 bytes each, allowing up to 128 characters.\n  - Asian Characters: Many Asian characters require 3 bytes each, allowing approximately 85 characters."
      example: Max Mustermann
    Sort:
      description: Document representing a sort request. Each API has a different default sort configuration that can be modified in the request.
      example:
        field: couponId
        sortOrder: desc
      type: object
      properties:
        field:
          description: The name of the field to sort on.
          allOf:
            - $ref: '#/components/schemas/String256'
        sortOrder:
          default: asc
          description: The sort order to be applied when sorting. When omitted, the default sort order (asc) is used.
          example: asc
          enum:
            - asc
            - desc
          type: string
      required:
        - field
    Offset:
      default: 0
      minimum: 0
      format: int64
      description: The zero-based index of the first hit/data to include in the result.
      type: integer
      example: 0
    SearchRequest:
      description: Document representing a search request for retrieving items within the Data API. The query is a potentially complex set of expressions. The fields and expands that each query supports are defined within the search resource.
      type: object
      properties:
        limit:
          description: Maximum records to retrieve per request, not to exceed 200.
          example: 10
          maximum: 200
          allOf:
            - $ref: '#/components/schemas/Limit'
        query:
          $ref: '#/components/schemas/Query'
        sorts:
          description: The list of sort clauses configured for the search request. Sort clauses are optional. See the description of the search endpoint for details on the default sorting behavior that is used when explicit sorts are not passed.
          type: array
          items:
            $ref: '#/components/schemas/Sort'
        offset:
          $ref: '#/components/schemas/Offset'
      required:
        - query
    Total:
      default: 0
      minimum: 0
      format: int64
      description: The total number of hits that match the search's criteria. This can be greater than the number of results returned as search results are pagenated.
      type: integer
      example: 10
    ResultBase:
      description: "Schema defining generic list result. Each response schema of a resource requiring a list response should extend this schema. \nAdditionally it needs to be defined what data is returned."
      type: object
      required:
        - limit
        - total
      properties:
        limit:
          maximum: 200
          allOf:
            - $ref: '#/components/schemas/Limit'
        total:
          $ref: '#/components/schemas/Total'
    PaginatedResultBase:
      description: "Schema defining generic pageable result. Each response schema of a resource requiring pagination should extend this schema. \nIf you use this extend this schema directly, it needs to be defined what data is returned. Allowed names for the data field is `data`."
      type: object
      allOf:
        - $ref: '#/components/schemas/ResultBase'
      properties:
        offset:
          $ref: '#/components/schemas/Offset'
      required:
        - limit
        - offset
        - total
    PaginatedSearchResult:
      description: Document representing a generic search result. Each search resource should extend this to define what is returned in the `hits`.
      properties:
        query:
          $ref: '#/components/schemas/Query'
        sorts:
          description: The sorting that was applied to the result.
          type: array
          items:
            $ref: '#/components/schemas/Sort'
        hits:
          description: The sorted array of search hits. Can be empty.
          type: array
          items:
            type: object
      allOf:
        - $ref: '#/components/schemas/PaginatedResultBase'
      type: object
      required:
        - query
      example:
        limit: 1
        hits:
          - couponId: coupon1
            creationDate: '2019-10-20T12:00:00Z'
            description: This coupon is used to give 10% off stuff.
            enabled: false
            exportedCodeCount: 0
            lastModified: '2019-10-30T04:23:59Z'
            redemptionCount: 3
            redemptionLimits:
              limitPerCode: 1
              limitPerCustomer: 1
              limitPerTimeFrame:
                limit: 2
                redemptionTimeFrame: 24
            singleCode: MyCode
            systemCodesConfig:
              codePrefix: SG
              numberOfCodes: 500000
            totalCodesCount: 50
            type: single_code
        query:
          textQuery:
            fields:
              - id
              - description
            searchPhrase: stuff
        sorts:
          - field: couponId
            sortOrder: desc
        offset: 2
        total: 8
    GiftCertificateSearchResult:
      type: object
      required:
        - hits
      allOf:
        - $ref: '#/components/schemas/PaginatedSearchResult'
      properties:
        hits:
          items:
            $ref: '#/components/schemas/GiftCertificate'
          type: array
      description: Document representing a gift certificate search result.
  parameters:
    organizationId:
      description: An identifier for the organization the request is being made by
      name: organizationId
      in: path
      required: true
      example: f_ecom_zzxy_prd
      schema:
        $ref: '#/components/schemas/OrganizationId'
    siteId:
      description: The identifier of the site that a request is being made in the context of. Attributes might have site specific values, and some objects may only be assigned to specific sites.
      name: siteId
      in: query
      required: true
      examples:
        SiteId:
          value: RefArch
      schema:
        $ref: '#/components/schemas/SiteId'
    merchantId:
      name: merchantId
      in: path
      description: The merchant ID of the requested gift certificate.
      required: true
      schema:
        minLength: 1
        type: string
  examples:
    GiftCertificateCreateExample:
      value:
        amount:
          currencyMnemonic: USD
          value: 1000
        description: Birthday gift
        message: A birthday present to you
        senderName: Jane Doe
        recipientName: John Doe
        recipientEmail: john.doe@gmail.com
        status: issued
        orderNo: CA17293
        enabled: false
    CreateGiftCertificateSuccess:
      value:
        amount:
          currencyMnemonic: USD
          value: 100
        balance:
          currencyMnemonic: USD
          value: 100
        creationDate: '2015-07-31T14:36:17.544Z'
        description: Birthday gift
        enabled: false
        maskedGiftCertificateCode: '************KTIP'
        merchantId: NorthernTrailOutfitters
        message: A birthday gift for you
        orderNo: CA17293
        recipientName: John Doe
        recipientEmail: john.doe@gmail.com
        senderName: Jane Doe
        status: issued
        transactions:
          - amount:
              currencyMnemonic: EUR
              value: 80
            orderNo: my-order_no
            timestamp: '2015-09-09T17:16:12.066Z'
            typeCode: create
    InvalidRecipientEmail400:
      value:
        type: https://api.commercecloud.salesforce.com/documentation/error/v1/errors/invalid-recipient-email
        title: Invalid Recipient Email Exception
        detail: Invalid recipient email ID provided.
    InvalidStatus400:
      value:
        type: https://api.commercecloud.salesforce.com/documentation/error/v1/errors/invalid-status
        title: Invalid Gift Certificate Status Exception
        detail: Invalid gift certificate status provided.
    Invalid400:
      value:
        type: https://api.commercecloud.salesforce.com/documentation/error/v1/errors/invalid
        title: Invalid Gift Certificate Exception
        detail: Invalid gift certificate provided.
    MerchantIdNotUnique400:
      value:
        type: https://api.commercecloud.salesforce.com/documentation/error/v1/errors/merchant-id-not-unique
        title: Gift Certificate Create Merchant Id Not Unique Exception
        detail: Merchant id is not unique.
    GiftCertificate404:
      value:
        type: https://api.commercecloud.salesforce.com/documentation/error/v1/errors/not-found
        title: Gift Certificate Not Found Exception
        detail: No gift certificate with merchant ID 'my-merchant_id' for site 'TestWapi' was found.
    GiftCertificatesSearchSuccess:
      value:
        limit: 3
        hits:
          - amount:
              currencyMnemonic: USD
              value: 100
            balance:
              currencyMnemonic: USD
              value: 100
            creationDate: '2015-07-31T15:10:25.192Z'
            description: Birthday Gift
            enabled: true
            maskedGiftCertificateCode: '************HHHZ'
            merchantId: NorthernTrailOutfitters
            orderNo: CA17293
            status: pending
            transactions:
              - amount:
                  currencyMnemonic: EUR
                  value: 80
                orderNo: CA17293
                timestamp: '2015-01-09T17:16:12.066Z'
                typeCode: create
          - amount:
              currencyMnemonic: USD
              value: 100
            balance:
              currencyMnemonic: USD
              value: 100
            creationDate: '2015-07-31T15:03:21.988Z'
            enabled: true
            maskedGiftCertificateCode: '************DOIZ'
            merchantId: my-merchant_id
            orderNo: '00000002'
            status: pending
            transactions:
              - amount:
                  currencyMnemonic: EUR
                  value: 80
                orderNo: '00000002'
                timestamp: '2015-02-09T17:16:12.066Z'
                typeCode: create
          - amount:
              currencyMnemonic: USD
              value: 100
            balance:
              currencyMnemonic: USD
              value: 100
            creationDate: '2015-07-31T15:10:00.659Z'
            description: Promotion Gift
            enabled: true
            maskedGiftCertificateCode: '************GSPZ'
            merchantId: NorthernTrailOutfitters
            orderNo: '00000003'
            status: pending
            transactions:
              - amount:
                  currencyMnemonic: EUR
                  value: 80
                orderNo: '00000003'
                timestamp: '2015-09-09T17:16:12.066Z'
                typeCode: create
        query:
          textQuery:
            fields:
              - status
            searchPhrase: pending
        offset: 0
        total: 3
    UnqueryableField400:
      value:
        type: https://api.commercecloud.salesforce.com/documentation/error/v1/errors/unqueryable-field
        title: Unqueryable Field Exception
        detail: Given field cannot be queried. For example - The field 'link' is unqueryable.
    MalformedSearchParameter400:
      value:
        type: https://api.commercecloud.salesforce.com/documentation/error/v1/errors/malformed-search-parameter
        title: Malformed Search Parameter Exception
        detail: An error occurred while decoding the request, the body was 'malformed'.
    GetGiftCertificateSuccess:
      value:
        amount:
          currencyMnemonic: USD
          value: 100
        balance:
          currencyMnemonic: USD
          value: 100
        creationDate: '2015-07-31T14:56:38.936Z'
        description: Birthday Gift
        enabled: true
        maskedGiftCertificateCode: '************LKWJ'
        merchantId: NorthernTrailOutfitters
        message: A birthday gift for you
        orderNo: CA17293
        recipientName: John Doe
        recipientEmail: john.doe@gmail.com
        senderName: Jane Doe
        status: issued
        transactions:
          - amount:
              currencyMnemonic: EUR
              value: 80
            orderNo: CA17293
            timestamp: '2015-09-09T17:16:12.066Z'
            typeCode: create
    GiftCertificateUpdateExample:
      value:
        description: Birthday Gift
        enabled: false
        message: A birthday gift for you
        recipientEmail: john.doe@gmail.com
        recipientName: John Doe
        senderName: Jane Doe
        status: pending
    UpdateGiftCertificateSuccess:
      value:
        amount:
          currencyMnemonic: USD
          value: 100
        balance:
          currencyMnemonic: USD
          value: 100
        creationDate: '2015-07-31T15:05:52.311Z'
        description: Birthday Gift
        enabled: false
        maskedGiftCertificateCode: '***********cate'
        merchantId: NorthernTrailOutfitters
        message: A birthday gift for you
        orderNo: CA17293
        recipientEmail: john.doe@gmail.com
        recipientName: John Doe
        senderName: Jane Doe
        status: pending
        transactions:
          - amount:
              currencyMnemonic: EUR
              value: 80
            orderNo: CA17293
            timestamp: '2015-09-09T17:16:12.066Z'
            typeCode: create
