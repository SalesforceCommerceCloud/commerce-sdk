#%RAML 1.0
title: Shopper Login
description: SLAS (Shopper Login & API Authentication Service) APIs enable shoppers to 1) login via federation to any external IDP or 2) to Salesforce B2C Ecom system, get access token and use it to access shopper APIs. SLAS also provides APIs for SSO, refresh a token using the long-term refresh token and revoke a refresh token.
version: v1
mediaType: application/json
protocols: HTTPS
baseUri: https://{shortCode}.api.commercecloud.salesforce.com/shopper/auth/{version}
baseUriParameters:
  shortCode:
    description: A region-specific merchant identifier.
    example: 0dnz6oep
    pattern: ^([a-z0-9]+)(-[a-z0-9]+)*$

traits:
  SlasRateLimit: !include traits/slasRateLimit.raml
securitySchemes:
    SlasJWT-BearerSecurityScheme.BearerToken: !include slasJWT-BearerSecurityScheme.raml
uses:
  ApiStandards: exchange_modules/893f605e-10e2-423a-bdb4-f952f56eb6d8/api-standards/1.1.8/api-standards.raml
  CommerceCloudStandards: exchange_modules/893f605e-10e2-423a-bdb4-f952f56eb6d8/commerce-cloud-standards/1.0.10/commerce-cloud-standards.raml
types:
  ErrorResponse: !include exchange_modules/893f605e-10e2-423a-bdb4-f952f56eb6d8/api-standards/1.1.8/dataTypes/error-response.raml
  ResponseType:
    type: string
    description: Response Type
    enum: [code]
    example: "code"
  GrantType:
    type: string
    description: Grant Type
    enum: [AUTHORIZATION_CODE, REFRESH_TOKEN, CLIENT_CREDENTIALS, AUTHORIZATION_CODE_PKCE]
    example: "AUTHORIZATION_CODE"
  TokenType:
    type: string
    description: Token Type
    enum: [Bearer]
    example: "Bearer"
  TokenTypeHint:
    type: string
    description: Token Type Hint
    enum: [ACCESS_TOKEN, REFRESH_TOKEN]  
    example: "ACCESS_TOKEN"
  TokenRequest:
    type: object
    properties:
      refresh_token:
        description: Refresh Token - the long term token used to refresh the short term access token. Required only with Grant Type - "refresh_token".
        type: string
        required: false
        minLength: 8
        maxLength: 256
        example: "Jq4mlnVEyAXtuWTXBgmKEDUVsT3L-KLRotckvmwO8nk.P7VWTk-DxMBVc_MABhDeMv-UbcgmB3eh624sgGfFTx4"
      code: 
        description: Authorization Code - code from the OAuth service received in the front channel that is used to get access and refresh tokens. Required only with Grant Type -  "authorization_code".
        type: string
        required: false
        minLength: 8
        maxLength: 256
        example: "M0t1K0pyoFKhBpUZnuUYO07xf8iYyMJrAc7h31h_ra8.gglPClJHsofqdTm_yPe5n6m2yCXzFmD8qICwIEjQGVA"
      usid:
        description: The Shopper's unique identifier if known. This is an optional field, a new shopper ID will be generated if this field is empty.
        type: string
        required: false
        example: "54ad2c5a-91f0-44ab-817c-73d6b86872d9"
      grant_type:
        description: Grant Type
        type: GrantType
        example: "AUTHORIZATION_CODE"
      redirect_uri:
        description: The redirect that was used when getting the authorization code. If missing the redirectUri will default to http://localhost:9010/callback .
        type: string
        required: false
        example: "http://localhost:9010/callback"
      code_verifier:
        description: Created by the client calling the login endpoint.The code verifier should be a high-entropy cryptographic random string with a minimum of 43 characters and a maximum of 128 characters.<br><br>The code_challenge is created by SHA256 hashing the code_verifier and base64 URL encoding the resulting hash Base64UrlEncode(SHA256Hash(code_verifier).<br><br>
        type: string
        minLength: 43
        maxLength: 128
        required: false
        example:
      client_id:
        description: SLAS client Id. The SLAS client_id will be required when using the PKCE flow.
        required: false
        type: string   
        minLength: 8
        maxLength: 256
        example: "z99ec276-cg53-4g94-cf72-76f300c6778zc"
  TokenResponse:
    type: object
    properties:
      access_token:
        description: Short term Shopper JWT that can be used to access Commerce Cloud Shopper APIs. Good for 30 minutes.
        type: string
        example: |
          "eyJ2ZXIiOiIxLjAiLCJraWQiOiJTTEFTIiwidHlwIjoiand0IiwiY2x2IjoiSjIuMS4wIiwiYWxnIjoiRVMyNTYifQ.eyJhdWQiOiJjb3JlL2Rldi9idGluZ2V5bHRtMiIsImF1dCI6IkdVSUQiLCJzdWIiOiJ1c2lkOjo1NGFkMmM1YS05MWYwLTQ0YWItODE3Yy03M2Q2Yjg2ODcyZDk6OnVwbjpndWVzdCIsIm5iZiI6MTU4Mjg0NTYyNCwiY3R4Ijoic2ZkYy5jb21tZXJjZWNsb3VkIiwiaXNzIjoiY29yZS9kZXYvYnRpbmdleWx0bTIiLCJzdHkiOiJVc2VyIiwiaXN0IjoxLCJleHAiOjE1ODI4NDU3NDQsImlhdCI6MTU4Mjg0NTY1NCwianRpIjoiQzJDOTA0ODg2NDA3MDkwNDg4NjQwNzMyMjExNzQ1ODEyMTQzIn0.2a6lMBSY17PrhDO8pvEk7PCXW_nkguMHi4J-Tuirkz-ETB6rnKyuRjF5yD6B55tMvm8dO8ulAHyDYqjObMxLJg"
      id_token:
        description: User ID token. Valid for 30 minutes.
        type: string
        example: "eyJraWQiOiI3NGU2YjMxZS1lYTczLTQ3OTYtOWRkYi1jMDJmZGI4ZDgwYmUiLCJhbGciOiJSUzI1NiJ9.eyJzdWIiOiJ1c2lkOmQ1MDBhMzY5LTc1MWQtNDkzYy1iNDAzLThmOThmYjg3MTdiNiIsImF1ZCI6IjU1M2FjOGFjLTRkYjktNGVkMy04MjVjLTNhZTNiZjVkMzI3YiIsImlzcyI6ImRldi51cy5zaG9wcGVyLmNjLnNhbGVzZm9yY2UuY29tIiwibmFtZSI6ImJsYWlyLnNsYXMudGVzdEBnbWFpbC5jb20iLCJleHAiOjE1OTExMTE0MzgsImlhdCI6MTU5MTEwOTYzOCwiZW1haWwiOiJibGFpci5zbGFzLnRlc3RAZ21haWwuY29tIn0.KgpAcq-G9Lz7IGnjkJlaFLFXYncVCwcVrRIuy3bEfgzRozqaDRvAori4oOz4RtgYjmoc5x2euoisHL0mVnHgPKOdYBty1wTJqneJEQt6hP4Kp0KFciID_ILCi-DE8VWS5t0NknnMP_iKhIkqcRL48iwPFUWkWA6AEWxE_yvJLNRLithsSxsx7EfBfpD8Hr2b5tMEwImQNmJNYGRTI4LSmcYspBORvJoAnfGpMC0kglxl40bhf5j4ItX4_DiWQC4zaGYD-HJV4BDr6C7iGCs5ZVPypF0yQD3iBio26fwj9Ys5WF9XMtPtqET2kqsz6fDC5GkE6HTUHH_r87jxbDq-8w"
      refresh_token:
        description: Long term refresh token that can be used to refresh an access token. Good for 90 days.
        type: string
        example: "EgMYpjfFKdlSy-a3PYeyihmP95IpIp3FaDpPmVH1yu8.lahomBi7zJbRa6yKAuAAiKu3lprTPsEueKwqcBvhRLU"
      expires_in:
        description: Remaning access token expiry time, in seconds.
        type: integer
        example: 900
      token_type: 
        description: Token Type
        type: TokenType
        example: "Bearer"
      usid:
        type: string
        description: The unique shopper ID. This will be returned when using the client credential grant type.
        example: 18cda486-fe32-4e27-888b-6e4f89938e67
      customer_id:
        type: string
        description: Customer's Id
        example: "1000005"
      enc_user_id:
        type: string
        description: MD5 Hashed ECOM user id in uppercase.
        example: "45D39A8499A95288F82855427EBA99B5"
  TokenActionRequest:
    type: object
    properties:
      token:
        description: Refresh token to be revoked.
        type: string
        example: "EgMYpjfFKdlSy-a3PYeyihmP95IpIp3FaDpPmVH1yu8.lahomBi7zJbRa6yKAuAAiKu3lprTPsEueKwqcBvhRLU"
      token_type_hint:
        description: Refresh token to be revoked.
        type: TokenTypeHint
        required: false
        example: "REFRESH_TOKEN"
  IntrospectResponse:
    type: object
    properties:
      active: 
        type: boolean
        example: true
      scope: 
        type: string
        example: "offline_access openid"
      client_id: 
        type: string
        example: "553ac8ac-4db9-4ed3-825c-3ae3bf5d327b"
      sub: 
        type: string
        example: "usid:156c4e69-e89b-406b-a4b7-576980bb234e::upn:Guest"
      exp: 
        type: integer
        example: 1594733276
      username: 
        type: string
        example: "testuser1@test.org"
      token_type: 
        type: string
        example: "refresh_token"
  Oauth2ErrorResponse:
    type: object
    properties:
      error:
        type: string
        example: invalid_client
      error_uri:
        type: string
        required: false
        example: "https://api.commercecloud.salesforce.com/documentation/error/v1/errors/oauth-service"
      error_description:
        type: string
        required: false
        example: "Missing access or refresh token."
  LoginRequest:
    type: object
    properties:
      client_id:
        description: SLAS client Id. The SLAS client_id will be required when using the PKCE flow.
        required: false
        type: string   
        minLength: 8
        maxLength: 256
        example: "z99ec276-cg53-4g94-cf72-76f300c6778zc"
      response_type:
        description: Must be 'code'. This indicates the client wants an authorization code (grant type of authorization_code).
        required: false
        type: ResponseType
        example: "code"
      redirect_uri:
          description: The URL to which the server redirects the browser after the user grants the authorization. The URI must be pre-registered.
          required: true
          minLength: 3
          maxLength: 256
          type: string
          example: "http://localhost:9010/callback"
      state:
        description: Value to be sent by the client to determine the state between the authorization request and the server response.  Optional, but strongly recommended.
        required: false
        type: string
        maxLength: 256
        example: "client-state"
      scope:
          description: Scopes are to limit an application's access to a user's account. 
          required: false
          type: string
          maxLength: 256
          example: "openid|offline_access|email"
      usid:
        description: The unique shopper ID.
        required: false
        type: string
        example: "18cda486-fe32-4e27-888b-6e4f89938e67"
      channel_id:
        description: The channel this request is for. For an ECOM request this is angalous to the site ID.
        required: true
        type: string
        maxLength: 100
        example: "SiteGenesis"
      code_challenge:
        description: Created by the client calling the login endpoint.<br><br>The code_challenge is created by SHA256 hashing the code_verifier and base64 URL encoding the resulting hash Base64UrlEncode(SHA256Hash(code_verifier).<br><br>The code verifier should be a high-entropy cryptographic random string with a minimum of 43 characters and a maximum of 128 characters. 
        required: true
        type: string
        example: "krc5G3_5lRUcXDUzFZQ88oJA_-ZmlHWkyGsgOrSLEWg"

/organizations/{organizationId}:
  type: CommerceCloudStandards.Organization
  /oauth2:
    /login:
      description: <b>The GET method is DEPRECATED - Please use the POST method.</b><br>Get authorization code after authenticating a user using an ECOM instance.
      post:
        description: Get authorization code after authenticating a user using an ECOM instance.
        displayName: authenticateCustomer
        is:
          - SlasRateLimit:
                responseStatus: 303
                responseStatus2: 400
                responseStatus3: 401
                responseStatus4: 500
        headers:
          Authorization: 
            displayName: Login
            description: Basic authentication base 64 encoded shopper user name and password.
            type: string
            required: true
            example: "Basic czZCaGRSa3F0MzpnWDFmQmF0M2JW"
        body:
          application/x-www-form-urlencoded:
            type: LoginRequest

        responses:
          303:
            description: Success - authorization code will be added to the redirect_uri. For example, http://localhost:9010/callback?code=eyJ2ZXIiOiIxLjAiLCJraWQiOiJTTEFTIiwidHlwIjoiand0IiwiY2x2IjoiS&state=client-state
            body:
              application/json:
                type: string
                example: |
                  {
                    "authorizationCode": "eyJ2ZXIiOiIxLjAiLCJraWQiOiJTTEFTIiwidHlwIjoiand0IiwiY2x2IjoiS",
                    "usid": "156c4e69-e89b-406b-a4b7-576980bb234e"              
                  }           
          400:
            description: Bad Request
            body:
              application/problem+json:
                type: Oauth2ErrorResponse
                example: |
                  {
                    "error": "invalid_request",
                    "error_description": "Bad or missing client_id."
                  }
          401:
            description: Unauthorized
            body:
              application/problem+json:
                type: Oauth2ErrorResponse
                example: |
                    {
                    "error": "invalid_client",
                    "error_description": "Basic Authorization failed."
                    }
          500:
            description: Internal Server Error
            body:
              application/problem+json:
                type: Oauth2ErrorResponse
                example: |
                    {
                    "error": "server_error",
                    "error_description": "The server has encountered a situation it doesn't know how to handle."
                    }

    /logout:
      description: Logout a shopper. The shoppers SLAS token will be revoked and if the shopper authenticated with ECOM the OCAPI JWT will be deleted from ecom.
      get:
        description: Logout a shopper.
        displayName: logoutCustomer
        is:
          - SlasRateLimit:
                responseStatus: 303
                responseStatus2: 400
                responseStatus3: 401
                responseStatus4: 500
     
        securedBy:
          - SlasJWT-BearerSecurityScheme.BearerToken: {Bearer eyJ2ZXIiOiIxLjAiLCJraWQiOiI0ZTQyNTFkOS0zM2Y2LTRjMTMtYjZmZC1mOWJkNTJmYTZhNDciLCJ0eXAiOiJqd3QiLCJjbHYiOiJKMi4xLjAiLCJhbGciOiJFUzI1NiJ9.eyJhdXQiOiJHVUlEIiwic2NwIjoic2ZjYy5wcm9kdWN0cy5ybyBzZmNjLmNhdGFsb2dzLnJvIHNmY2Muc2hvcHBlci5ydyIsInN1YiI6ImNjLXNsYXM6OnNsc2FfZGV2OjpzY2lkOjU1M2FjOGFjLTRkYjktNGVkMy04MjVjLTNhZTNiZjVkMzI3Yjo6dXNpZDoxY2E3OWZiNi0xYjIyLTRmOWItOGJiNi05YmU5NWNjMjA4NjMiLCJjdHgiOiJzbGFzLm5vdF9mb3JfZXh0ZXJuYWxfdXNlIiwiaXNzIjoic2xhcy9kZXYvc2xzYV9kZXYiLCJpc3QiOjEsImF1ZCI6ImNvbW1lcmNlY2xvdWQvZGV2L3Nsc2FfZGV2IiwibmJmIjoxNTk0NzY0MDgwLCJzdHkiOiJVc2VyIiwiaXNiIjoidWlkbzpzbGFzOjp1cG46R3Vlc3Q6OnVpZG46R3Vlc3QgVXNlciIsImV4cCI6MTU5NDc2NTkxMCwiaWF0IjoxNTk0NzY0MTEwLCJqdGkiOiJDMkMxNjM0NTE0NTEwLTE3MTQzMTg2NzY0MjcwNTcyNjQ2NTYxMzgifQ.UVYAsWXCn3hoUPy8vLlc7O96RZEHD3N3ZgdNH-ZVvJ1G-R6uJ2VPrYvwKmYXF41Ujm2bo83AYOHVqEEEPT8Kgw}

        queryParameters:
          client_id:
            description: The SLAS client ID.
            required: true
            type: string   
            minLength: 8
            maxLength: 256
            example: "z99ec276-cg53-4g94-cf72-76f300c6778zc"
          refresh_token:
            description: Refresh token that was given during the access token request.
            required: true
            type: string
          channel_id:
            description: The channel_id parameter is a MUST (required) if the shopper authenticated using the /login with ECOM.
            required: false
            type: string
            maxLength: 100
            example: "SiteGenesis"
        responses:
          200:
            description: Success
            body:
              application/json:
                type: TokenResponse
                example: |
                  {
                      "access_token": "",
                      "id_token": "null",
                      "refresh_token": "EnL9U2f3-WiVPwL60CFBI21UY_oxWAwX5JkgO-X12Vs",
                      "expires_in": 0,
                      "token_type": "Bearer",
                      "usid": "null",
                      "customer_id": "null",
                      "enc_user_id": "null"
                  }
          400:
            description: Bad Request
            body:
              application/problem+json:
                type: Oauth2ErrorResponse
                example: |
                  {
                    "error": "invalid_request",
                    "error_description": "Bad or missing client_id."
                  }
          401:
            description: Unauthorized
            body:
              application/problem+json:
                type: Oauth2ErrorResponse
                example: |
                    {
                    "error": "invalid_client",
                    "error_description": "Basic Authorization failed."
                    }
          500:
            description: Internal Server Error
            body:
              application/problem+json:
                type: Oauth2ErrorResponse
                example: |
                    {
                    "error": "server_error",
                    "error_description": "The server has encountered a situation it doesn't know how to handle."
                    }
    /authorize:
      description: Shopper Oauth2 Authorization Endpoints.
      get:
        description: Get authorization code after authenticating a user against an IDP. This is the first step of the Authorization code grant flow, where a user is able to log in via federation to the IDP configured for the client, and gets an authorization code after successful login via a callback/redirect URI. Mandatory fields are the shopping app's clientId, redirectURI, responseType and authType. This API can be called from the front channel (from the browser).
        displayName: authorizeCustomer
        is:
          - SlasRateLimit:
                responseStatus: 303
                responseStatus2: 400
                responseStatus3: 401
                responseStatus4: 500
        queryParameters:
          redirect_uri:
            description: The URL to which the server redirects the browser after the user grants the authorization. The URI must be pre-registered.
            required: true
            minLength: 3
            maxLength: 256
            type: string
            example: "http://localhost:9010/callback"
          response_type:
            description: Must be 'code'. 'code' indicates that the client wants an authorization code (authorization code grant flow).
            required: true
            type: ResponseType
            example: "code"
          client_id:
            description: The client ID obtained during application registration.
            required: true
            type: string   
            minLength: 8
            maxLength: 256
            example: "client-id1"
          scope:
            description: (Not Supported)
            required: false
            type: string
            maxLength: 256
            example: "admin"
          state:
            description: Value to be sent by the client to determine the state between the authorization request and the server response.  Optional but strongly recommended.
            required: false
            type: string
            maxLength: 256
            example: "client-state"
          usid:
            description : ID that uniquely identifies the shopper much like a UUID. This is an optional field, a new USID will be generated if this field is empty.
            required: false
            type: string
            maxLength: 256
            example: "d09c5010-4baa-11ea-98d8-01062d1a14bb"
          hint:
            description : IDP name that can be optionally added to redirect directly to skipping the IDP selection step.
            required: false
            type: string
            maxLength: 256
            example: "Google"
          channel_id:
            description: The channel this request is for. For an ECOM request this is angalous to the site ID.
            required: false
            type: string
            maxLength: 100
            example: "SiteGenesis"
          code_challenge:
            description: Created by the client calling the login endpoint.<br><br>The code_challenge is created by SHA256 hashing the code_verifier and base64 URL encoding the resulting hash Base64UrlEncode(SHA256Hash(code_verifier).<br><br>The code verifier should be a high-entropy cryptographic random string with a minimum of 43 characters and a maximum of 128 characters. 
            required: true
            type: string
            example: "krc5G3_5lRUcXDUzFZQ88oJA_-ZmlHWkyGsgOrSLEWg"
        responses:
          303:
            description: Success - authorization code will be added to the redirect_uri ex. http://localhost:9010/callback?code=eyJ2ZXIiOiIxLjAiLCJraWQiOiJTTEFTIiwidHlwIjoiand0IiwiY2x2IjoiS&state=client-state
            body:
              application/json:
                type: string
                example: |
                  {
                    "authorizationCode": "eyJ2ZXIiOiIxLjAiLCJraWQiOiJTTEFTIiwidHlwIjoiand0IiwiY2x2IjoiS",
                    "usid": "156c4e69-e89b-406b-a4b7-576980bb234e"              
                  }           
          400:
            description: Bad Request
            body:
              application/problem+json:
                type: Oauth2ErrorResponse
                example: |
                  {
                    "error": "invalid_request",
                    "error_description": "Bad or missing client_id."
                  }
          401:
            description: Unauthorized
            body:
              application/problem+json:
                type: Oauth2ErrorResponse
                example: |
                    {
                    "error": "invalid_client",
                    "error_description": "Basic Authorization failed."
                    }
          500:
            description: Internal Server Error
            body:
              application/problem+json:
                type: Oauth2ErrorResponse
                example: |
                    {
                    "error": "server_error",
                    "error_description": "The server has encountered a situation it doesn't know how to handle."
                    }

    /token:
      description: Shopper OAuth2 Token Endpoint.
      post:
        description: Get the shopper or guest JWT/access token, along with a refresh token. This is the second step of the OAuth2 Authorization code flow where a client app is able to get an access token for the shopper through the backchannel (a trusted server side) by passing in the client credentials and the authorization code retrieved from authorize endpoint. Mandatory fields when using the token endpoint to get the access token are clientId, clientSecret, authorizationCode, grantType of authorization_code. <br/><br/> As a guest user get the shopper JWT / access token along with a refresh token. This is where a client app is able to get an access token for the guest user through the back-channel (a trusted server side) by passing in the client credentials. Mandatory fields when asking for the guest token endpoint to get the access token are clientId, clientSecret, grantType of client_credentials.<br/><br/> Mandatory fields when using the token endpoint to refresh an access token are grant_type, or refresh_token. Valid grant types for the token endpoint are REFRESH_TOKEN, CLIENT_CREDENTIALS, AUTHORIZATION_CODE_PKCE.
        displayName: getAccessToken
        is:
          - SlasRateLimit:
                responseStatus: 200
                responseStatus2: 400
                responseStatus3: 401
                responseStatus4: 500
        headers:
          Authorization: 
            displayName: Authorization
            description: Basic authentication base 64 encoded string having clientId:clientSecret
            type: string
            required: false
            example: "Basic czZCaGRSa3F0MzpnWDFmQmF0M2JW"
        body:
          application/x-www-form-urlencoded:
            type: TokenRequest
        responses:
          200:
            description: Success
            body:
              application/json:
                type: TokenResponse
                example: |
                  {
                    "access_token": "eyJ2ZXIiOiIxLjAiLCJraWQiOiJTTEFTIiwidHlwIjoiand0IiwiY2x2IjoiSjIuMS4wIiwiYWxnIjoiRVMyNTYifQ.eyJhdWQiOiJjb3JlL2Rldi9idGluZ2V5bHRtMiIsImF1dCI6IkdVSUQiLCJzdWIiOiJ1c2lkOjo1NGFkMmM1YS05MWYwLTQ0YWItODE3Yy03M2Q2Yjg2ODcyZDk6OnVwbjpndWVzdCIsIm5iZiI6MTU4Mjg0NTYyNCwiY3R4Ijoic2ZkYy5jb21tZXJjZWNsb3VkIiwiaXNzIjoiY29yZS9kZXYvYnRpbmdleWx0bTIiLCJzdHkiOiJVc2VyIiwiaXN0IjoxLCJleHAiOjE1ODI4NDU3NDQsImlhdCI6MTU4Mjg0NTY1NCwianRpIjoiQzJDOTA0ODg2NDA3MDkwNDg4NjQwNzMyMjExNzQ1ODEyMTQzIn0.2a6lMBSY17PrhDO8pvEk7PCXW_nkguMHi4J-Tuirkz-ETB6rnKyuRjF5yD6B55tMvm8dO8ulAHyDYqjObMxLJg",
                    "id_token": "eyJraWQiOiI3NGU2YjMxZS1lYTczLTQ3OTYtOWRkYi1jMDJmZGI4ZDgwYmUiLCJhbGciOiJSUzI1NiJ9.eyJzdWIiOiJ1c2lkOmQ1MDBhMzY5LTc1MWQtNDkzYy1iNDAzLThmOThmYjg3MTdiNiIsImF1ZCI6IjU1M2FjOGFjLTRkYjktNGVkMy04MjVjLTNhZTNiZjVkMzI3YiIsImlzcyI6ImRldi51cy5zaG9wcGVyLmNjLnNhbGVzZm9yY2UuY29tIiwibmFtZSI6ImJsYWlyLnNsYXMudGVzdEBnbWFpbC5jb20iLCJleHAiOjE1OTExMTE0MzgsImlhdCI6MTU5MTEwOTYzOCwiZW1haWwiOiJibGFpci5zbGFzLnRlc3RAZ21haWwuY29tIn0.KgpAcq-G9Lz7IGnjkJlaFLFXYncVCwcVrRIuy3bEfgzRozqaDRvAori4oOz4RtgYjmoc5x2euoisHL0mVnHgPKOdYBty1wTJqneJEQt6hP4Kp0KFciID_ILCi-DE8VWS5t0NknnMP_iKhIkqcRL48iwPFUWkWA6AEWxE_yvJLNRLithsSxsx7EfBfpD8Hr2b5tMEwImQNmJNYGRTI4LSmcYspBORvJoAnfGpMC0kglxl40bhf5j4ItX4_DiWQC4zaGYD-HJV4BDr6C7iGCs5ZVPypF0yQD3iBio26fwj9Ys5WF9XMtPtqET2kqsz6fDC5GkE6HTUHH_r87jxbDq-8w",
                    "refresh_token": "EgMYpjfFKdlSy-a3PYeyihmP95IpIp3FaDpPmVH1yu8.lahomBi7zJbRa6yKAuAAiKu3lprTPsEueKwqcBvhRLU",
                    "expires_in": 900,
                    "token_type": "Bearer",
                    "usid": "18cda486-fe32-4e27-888b-6e4f89938e67",
                    "customer_id": "1000005",
                    "enc_user_id": "45D39A8499A95288F82855427EBA99B5"               
                  }
          400:
            description: Bad Request
            body:
              application/problem+json:
                type: Oauth2ErrorResponse
                example: |
                  {
                    "error": "invalid_request",
                    "error_description": "Bad or missing access token."
                  }
          401:
            description: Unauthorized
            body:
              application/problem+json:
                type: Oauth2ErrorResponse
                example: |
                    {
                    "error": "invalid_client",
                    "error_description": "Basic Authorization failed."
                    }
          500:
            description: Internal Server Error
            body:
              application/problem+json:
                type: Oauth2ErrorResponse
                example: |
                    {
                    "error": "server_error",
                    "error_description": "The server has encountered a situation it doesn't know how to handle."
                    }
    /revoke:
      description: Shopper OAuth2 Token revoke Endpoint.
      post:
        description: Invalidate the refresh token. A basic auth header with base64 encoded clientId:secret is required in the Authorization header, and the refresh token to be revoked is required in the body.
        displayName: revokeToken
        headers:
          Authorization: 
            displayName: Authorization
            description: Basic authentication base 64 encoded string.
            type: string
            required: true
            example: "Basic czZCaGRSa3F0MzpnWDFmQmF0M2JW"
        body:
          application/x-www-form-urlencoded:
            type: TokenActionRequest
            example: |
              {
                "token": "ry5XU_WHX20S6Cn6W7keFIs7Pzkv4wTZJS9Yvh0Ve9A.cdBxoCY9Q3jffQQOFnb_qghbSmSRnn9-2H4GwFTDMTk",
                "token_type_hint": "REFRESH_TOKEN"
              }
        responses:
          200:
            description: Success
            body:
              application/json:
                type: TokenResponse
                example: |
                  {
                      "access_token": "",
                      "id_token": "null",
                      "refresh_token": "EnL9U2f3-WiVPwL60CFBI21UY_oxWAwX5JkgO-X12Vs",
                      "expires_in": 0,
                      "token_type": "Bearer",
                      "usid": "null",
                      "customer_id": "null",
                      "enc_user_id": "null"
                  }
          400:
            description: Bad Request
            body:
              application/problem+json:
                type: Oauth2ErrorResponse
                example: |
                  {
                    "error": "invalid_request",
                    "error_description": "Bad or missing refresh token."
                  }
          401:
            description: Unauthorized
            body:
              application/problem+json:
                type: Oauth2ErrorResponse
                example: |
                    {
                    "error": "invalid_client",
                    "error_description": "Basic Authorization failed."
                    }
          500:
            description: Internal Server Error
            body:
              application/problem+json:
                type: Oauth2ErrorResponse
                example: |
                    {
                    "error": "server_error",
                    "error_description": "The server has encountered a situation it doesn't know how to handle."
                    }
    /introspect:
      description: Token Introspection returns information about an access token or refresh token, intended to be used by resource servers or other internal servers.
      post:
        description: Returns the token properties. A basic auth header with base64 encoded clientId:secret is required in the Authorization header, as well as an access token or refresh token. Use token_type_hint to help identify the token.
        displayName: introspectToken
        headers:
          Authorization: 
            displayName: Authorization
            description: Basic authentication base 64 encoded string.
            type: string
            required: true
            example: "Basic czZCaGRSa3F0MzpnWDFmQmF0M2JW"
        body:
          application/x-www-form-urlencoded:
            type: TokenActionRequest
            example: |
              {
                "token": "eyJ2ZXIiOiIxLjAiLCJraWQiOiI0ZTQyNTFkOS0zM2Y2LTRjMTMtYjZmZC1mOWJkNTJmYTZhNDciLCJ0eXAiOiJqd3QiLCJjbHYiOiJKMi4xLjAiLCJhbGciOiJFUzI1NiJ9.eyJhdXQiOiJHVUlEIiwic2NwIjoic2ZjYy5wcm9kdWN0cy5ybyBzZmNjLmNhdGFsb2dzLnJvIHNmY2Muc2hvcHBlci5ydyIsInN1YiI6ImNjLXNsYXM6OnNsc2FfZGV2OjpzY2lkOjU1M2FjOGFjLTRkYjktNGVkMy04MjVjLTNhZTNiZjVkMzI3Yjo6dXNpZDoxY2E3OWZiNi0xYjIyLTRmOWItOGJiNi05YmU5NWNjMjA4NjMiLCJjdHgiOiJzbGFzLm5vdF9mb3JfZXh0ZXJuYWxfdXNlIiwiaXNzIjoic2xhcy9kZXYvc2xzYV9kZXYiLCJpc3QiOjEsImF1ZCI6ImNvbW1lcmNlY2xvdWQvZGV2L3Nsc2FfZGV2IiwibmJmIjoxNTk0NzY0MDgwLCJzdHkiOiJVc2VyIiwiaXNiIjoidWlkbzpzbGFzOjp1cG46R3Vlc3Q6OnVpZG46R3Vlc3QgVXNlciIsImV4cCI6MTU5NDc2NTkxMCwiaWF0IjoxNTk0NzY0MTEwLCJqdGkiOiJDMkMxNjM0NTE0NTEwLTE3MTQzMTg2NzY0MjcwNTcyNjQ2NTYxMzgifQ.UVYAsWXCn3hoUPy8vLlc7O96RZEHD3N3ZgdNH-ZVvJ1G-R6uJ2VPrYvwKmYXF41Ujm2bo83AYOHVqEEEPT8Kgw",
                "token_type_hint": "ACCESS_TOKEN"
              }
        responses:
          200:
            description: Success
            body:
              application/json:
                example: |
                  {
                    "active": true,
                    "scope": "offline_access openid",
                    "client_id": "553ac8ac-4db9-4ed3-825c-3ae3bf5d327b",
                    "sub": "usid:edbf780a-2d83-4e82-9f64-8d051e3538d2::uido:Google::upn:blair.slas.test@gmail.com::uidn:Foo SLAS-Test",
                    "exp": 1602523099,
                    "iat": 1594747099,
                    "iss": "https://localhost:9000/",
                    "token_type": "refresh_token"
                  }
          400:
            description: Bad Request
            body:
              application/problem+json:
                type: Oauth2ErrorResponse
                example: |
                  {
                    "error": "invalid_request",
                    "error_description": "Bad or missing access token or refresh token"
                  }
          401:
            description: Unauthorized
            body:
              application/problem+json:
                type: Oauth2ErrorResponse
                example: |
                    {
                    "error": "invalid_client",
                    "error_description": "Basic Authorization failed."
                    }
          500:
            description: Internal Server Error
            body:
              application/problem+json:
                type: Oauth2ErrorResponse
                example: |
                    {
                    "error": "server_error",
                    "error_description": "The server has encountered a situation it doesn't know how to handle."
                    }    
    /userinfo:
      description: Return claims about the authenticated end user.
      get:
        description: Returns a JSON document with claims about the currently authenticated end user.
        displayName: getUserInfo
        securedBy:
          - SlasJWT-BearerSecurityScheme.BearerToken: {Bearer eyJ2ZXIiOiIxLjAiLCJraWQiOiI0ZTQyNTFkOS0zM2Y2LTRjMTMtYjZmZC1mOWJkNTJmYTZhNDciLCJ0eXAiOiJqd3QiLCJjbHYiOiJKMi4xLjAiLCJhbGciOiJFUzI1NiJ9.eyJhdXQiOiJHVUlEIiwic2NwIjoic2ZjYy5wcm9kdWN0cy5ybyBzZmNjLmNhdGFsb2dzLnJvIHNmY2Muc2hvcHBlci5ydyIsInN1YiI6ImNjLXNsYXM6OnNsc2FfZGV2OjpzY2lkOjU1M2FjOGFjLTRkYjktNGVkMy04MjVjLTNhZTNiZjVkMzI3Yjo6dXNpZDoxY2E3OWZiNi0xYjIyLTRmOWItOGJiNi05YmU5NWNjMjA4NjMiLCJjdHgiOiJzbGFzLm5vdF9mb3JfZXh0ZXJuYWxfdXNlIiwiaXNzIjoic2xhcy9kZXYvc2xzYV9kZXYiLCJpc3QiOjEsImF1ZCI6ImNvbW1lcmNlY2xvdWQvZGV2L3Nsc2FfZGV2IiwibmJmIjoxNTk0NzY0MDgwLCJzdHkiOiJVc2VyIiwiaXNiIjoidWlkbzpzbGFzOjp1cG46R3Vlc3Q6OnVpZG46R3Vlc3QgVXNlciIsImV4cCI6MTU5NDc2NTkxMCwiaWF0IjoxNTk0NzY0MTEwLCJqdGkiOiJDMkMxNjM0NTE0NTEwLTE3MTQzMTg2NzY0MjcwNTcyNjQ2NTYxMzgifQ.UVYAsWXCn3hoUPy8vLlc7O96RZEHD3N3ZgdNH-ZVvJ1G-R6uJ2VPrYvwKmYXF41Ujm2bo83AYOHVqEEEPT8Kgw}
#       headers:
#          Authorization: 
#            displayName: Authorization
#            description: SLAS Access Token
#            type: string
#           required: true
#            example: "eyJ2ZXIiOiIxLjAiLCJraWQiOiI0ZTQyNTFkOS0zM2Y2LTRjMTMtYjZmZC1mOWJkNTJmYTZhNDciLCJ0eXAiOiJqd3QiLCJjbHYiOiJKMi4xLjAiLCJhbGciOiJFUzI1NiJ9.eyJhdXQiOiJHVUlEIiwic2NwIjoic2ZjYy5wcm9kdWN0cy5ybyBzZmNjLmNhdGFsb2dzLnJvIHNmY2Muc2hvcHBlci5ydyIsInN1YiI6ImNjLXNsYXM6OnNsc2FfZGV2OjpzY2lkOjU1M2FjOGFjLTRkYjktNGVkMy04MjVjLTNhZTNiZjVkMzI3Yjo6dXNpZDoxY2E3OWZiNi0xYjIyLTRmOWItOGJiNi05YmU5NWNjMjA4NjMiLCJjdHgiOiJzbGFzLm5vdF9mb3JfZXh0ZXJuYWxfdXNlIiwiaXNzIjoic2xhcy9kZXYvc2xzYV9kZXYiLCJpc3QiOjEsImF1ZCI6ImNvbW1lcmNlY2xvdWQvZGV2L3Nsc2FfZGV2IiwibmJmIjoxNTk0NzY0MDgwLCJzdHkiOiJVc2VyIiwiaXNiIjoidWlkbzpzbGFzOjp1cG46R3Vlc3Q6OnVpZG46R3Vlc3QgVXNlciIsImV4cCI6MTU5NDc2NTkxMCwiaWF0IjoxNTk0NzY0MTEwLCJqdGkiOiJDMkMxNjM0NTE0NTEwLTE3MTQzMTg2NzY0MjcwNTcyNjQ2NTYxMzgifQ.UVYAsWXCn3hoUPy8vLlc7O96RZEHD3N3ZgdNH-ZVvJ1G-R6uJ2VPrYvwKmYXF41Ujm2bo83AYOHVqEEEPT8Kgw"
        responses:
          200:
            description: Success
            body:
              application/json:
                type: string
                example: |
                  {
                    "sub": "cc-slas::slsa_dev::scid:553ac8ac-4db9-4ed3-825c-3ae3bf5d327b::usid:f7bea65d-15f0-4ec3-8432-99911c1eaa31",
                    "name": "Foo SLAS-Test",
                    "given_name": "Foo",
                    "family_name": "SLAS-Test",
                    "email": "Foo.slas.test@gmail.com"
                  }
          400:
            description: Bad Request
            body:
              application/problem+json:
                type: Oauth2ErrorResponse
                example: |
                  {
                    "error": "invalid_request",
                    "error_description": "Bad or missing access token."
                  }
          500:
            description: Internal Server Error
            body:
              application/problem+json:
                type: Oauth2ErrorResponse
                example: |
                    {
                    "error": "server_error",
                    "error_description": "The server has encountered a situation it doesn't know how to handle."
                    }

    /.well-known/openid-configuration:
      description: OpenID Connect (OIDC) is an identity layer built on top of the OAuth 2.0 protocol and supported by some OAuth 2.0 providers, such as Google and Azure Active Directory. It defines a sign-in flow that enables a client application to authenticate a user, and to obtain information (or "claims") about that user, such as the user name, email, and so on. User identity information is encoded in a secure JSON Web Token (JWT), called ID token.  
      get:
        description: Returns a JSON listing of the OpenID/OAuth endpoints, supported scopes and claims, public keys used to sign the tokens, and other details.
        displayName: getWellknownOpenidConfiguration
        responses:
          200:
            description: Success
            body:
              application/json:
                type: string
                example: |
                  {
                    "response_types_supported": [
                        "code",
                        "token",
                        "token id_token"
                    ],
                    "claims_supported": [
                        "email",
                        "name",
                        "given_name",
                        "family_name",
                        "sub"
                    ],
                    "jwks_uri": "http://localhost:9010/api/v1/organization/{organizationId}/oauth2/jwks",
                    "subject_types_supported": [
                        "public"
                    ],
                    "scopes_supported": [
                        "email",
                        "openid",
                        "profile"
                    ],
                    "id_token_encryption_enc_values_supported": [
                        "A256GCM"
                    ],
                    "userinfo_endpoint": "http://localhost:9010/api/v1/organization/{organizationId}/oauth2/userinfo"
                  }
          400:
            description: Bad Request
            body:
              application/problem+json:
                type: Oauth2ErrorResponse
                example: |
                  {
                    "error": "invalid_request",
                    "error_description": "Tenant Id Exception - Must be a well-formed tenantId"
                  }
          500:
            description: Internal Server Error
            body:
              application/problem+json:
                type: Oauth2ErrorResponse
                example: |
                    {
                    "error": "server_error",
                    "error_description": "The server has encountered a situation it doesn't know how to handle."
                    }
    /jwks:
      description: The JSON Web Key Set (JWKS) is a set of keys which contains the public keys used to verify any JSON Web Token (JWT) issued by the authorization server and signed using the RS256 signing algorithm.
      get:
        description: Returns a JWKS containing public keys that enable clients to validate a JSON Web Token (JWT) issued by this OpenID Connect Provider.
        displayName: getJwksUri
        responses:
          200:
            description: Success
            body:
              application/json:
                type: string
                example: |
                  {
                      "keys": [
                          {
                              "kty": "RSA",
                              "e": "AQAB",
                              "use": "sig",
                              "kid": "slas-openid-pubkey-228",
                              "alg": "RS256",
                              "n": "rICcT4U7e9sdtneog0uiQlP1zKk6Kl3hqy7TN4Qx1hKm3vyiTWYuAlx6ELhifqBnMpm72flBCIRVdJ2lvIav4G4LxnvfQQLVca9Hy6Rvn27sJoj82bmZ8Fa-yMiT3c7_uKpqlt7SrodFS1NcdeELgmeZtL4W55HF2UPc1b3StcEkfEeHJknNLZgiUK36Z_OlYh658X4p7qHqakGosz4tMnoMnj-9kR8WQ5XXkM7nJqfm8KqwVgapON4PNNl1vfTYu1ymDP_VcbMU3LonNRGpix6XEypbBetgB4KtvaTL5KetvKboNHojMCfcwcEAd5WQZCrmznT9bQ3L9yHVrQ2fPw"
                          }
                      ]
                  }
          400:
            description: Bad Request
            body:
              application/problem+json:
                type: Oauth2ErrorResponse
                example: |
                  {
                    "error": "invalid_request",
                    "error_description": "Tenant Id Exception - Must be a well-formed tenantId"
                  }
          500:
            description: Internal Server Error
            body:
              application/problem+json:
                type: Oauth2ErrorResponse
                example: |
                    {
                    "error": "server_error",
                    "error_description": "The server has encountered a situation it doesn't know how to handle."
                    }
