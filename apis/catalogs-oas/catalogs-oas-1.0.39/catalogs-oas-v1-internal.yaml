openapi: 3.0.3
info:
  title: Catalogs
  version: v1
  description: |-
    # API Overview

    With the Catalogs API, you can:

    - Create, view, edit, and delete catalogs and categories.
    - Assign and unassign products to categories.
    - Search for a product within a category.
    - Search for categories within a catalog or within a merchandising system.

    For more information, see the [Catalogs](https://documentation.b2c.commercecloud.salesforce.com/DOC1/topic/com.demandware.dochelp/Catalogs/Catalogs.html) and [Categories](https://documentation.b2c.commercecloud.salesforce.com/DOC1/topic/com.demandware.dochelp/Catalogs/Categories.html) sections of the Salesforce B2C Commerce Infocenter.

    ## Authentication & Authorization

    The client managing catalog and category information must have access to the Categories and Catalogs resources. This API requires a bearer token in the header of the request. The client accessing the API must first authenticate against Account Manager to get the bearer token.

    You must include the relevant scope(s) in the client ID used to generate the SLAS token. For details, see the  [Authorization Scopes Catalog.](https://developer.salesforce.com/docs/commerce/commerce-api/guide/auth-z-scope-catalog.html)

    ## Use Cases

    Here are some common use cases for the API:

    ### Categorize Products

    Use the Catalogs API to assign products to categories so that shoppers can find all products that are merchandized in that category.

    ![b2c-commerce-catalogs-screenshot-1.png](https://resources.docs.salesforce.com/rel1/doc/en-us/static/misc/b2c-commerce-catalogs-screenshot-1.png)

    ### Validate Product Category Assignments

    Use the Catalogs API to search for products assigned to a category within a site catalog to validate whether a product is merchandized and ready to be sold in one or more ecommerce channels. You can also update a product to make sure it meets the readiness criteria for each channel.

    ![b2c-commerce-catalogs-screenshot-2.png](https://resources.docs.salesforce.com/rel1/doc/en-us/static/misc/b2c-commerce-catalogs-screenshot-2.png)

    ### Edit Categories

    Use the Catalogs API to edit categories assigned to a catalog to change the navigation path, make a category online or offline, change position of a category relative to other categories within a catalog.

    ![b2c-commerce-catalogs-screenshot-3.png](https://resources.docs.salesforce.com/rel1/doc/en-us/static/misc/b2c-commerce-catalogs-screenshot-3.png)

    ## Resources

    A Salesforce B2C Commerce storefront implementation uses a Catalog, Category, and Product architecture to organize your storefront. Product data is stored in a catalog, and the stored product data is organized by categories. You can create any number of catalog, category, and product scenarios to address your business needs.

    ### Catalogs

    A catalog is a collection of categories, products, and images. Itâ€™s best practice to create two catalogs: the master catalog and the storefront catalog. The master catalog provides the same structure as an external system of record for your products. The storefront catalog is where you create categories that appear on your storefront.

    ### Categories

    You create and organize categories and subcategories to organize and group products in your catalog and on your storefront. Categories allow Products to be organized into hierarchical structures. Categories can have relationships to other parent categories. Each category also can provide a context that is inherited by subcategories, for example a category may have an attribute value assigned to it and any product assigned to the category or a subcategory would inherit the attribute value as long as the product is assigned. Once the product is removed from the category those attribute values would no longer be in the context of the product.

    ### Products

    Products are the items and services for sale on the storefront. All of your product data is stored in your master catalog. For a product or service to show on your storefront, it must be assigned to a category.
servers:
  - url: https://{shortCode}.api.commercecloud.salesforce.com/product/catalogs/v1
    variables:
      shortCode:
        default: shortCode
paths:
  /organizations/{organizationId}/catalogs:
    get:
      summary: Retrieve a list of catalog IDs.
      description: Get the list of catalog IDs with no filtering.
      operationId: getCatalogs
      parameters:
        - $ref: '#/components/parameters/organizationId'
        - name: limit
          in: query
          required: false
          schema:
            type: integer
            format: int32
            default: 25
            maximum: 50
          description: Maximum records to retrieve per request, not to exceed 50. Defaults to 25.
        - name: offset
          in: query
          required: false
          schema:
            type: integer
            format: int64
            default: 0
            minimum: 0
          description: Used to retrieve the results based on a particular resource offset.
      responses:
        '200':
          description: Catalogs retrieved successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Catalogs'
              examples:
                Catalogs:
                  $ref: '#/components/examples/Catalogs'
        '400':
          description: |
            Bad Request. Thrown when a specified parameter value is unknown.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                getCategoryFromCatalog400:
                  $ref: '#/components/examples/getCategoryFromCatalog400'
        '401':
          description: |
            Unauthorized. Your Client ID is invalid, or you are not allowed to access
            the content provided by the requested URL.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                getCatalog401:
                  $ref: '#/components/examples/getCatalog401'
      security:
        - AmOAuth2:
            - sfcc.catalogs
            - sfcc.catalogs.rw
  /organizations/{organizationId}/catalogs/{catalogId}:
    get:
      summary: Retrieve details of a specific catalog.
      description: Gets the catalog with the specified information.
      operationId: getCatalog
      parameters:
        - $ref: '#/components/parameters/catalogId'
        - $ref: '#/components/parameters/organizationId'
      responses:
        '200':
          description: Catalog retrieved successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Catalog'
              examples:
                Catalog:
                  $ref: '#/components/examples/Catalog'
        '401':
          description: |
            Unauthorized. Your Client ID is invalid, or you are not allowed to access
            the content provided by the requested URL.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                getCatalog401:
                  $ref: '#/components/examples/getCatalog401'
        '404':
          description: |
            Requested resource not found.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                getCatalog404:
                  $ref: '#/components/examples/getCatalog404'
      security:
        - AmOAuth2:
            - sfcc.catalogs
            - sfcc.catalogs.rw
    patch:
      summary: Update details of a specific catalog.
      description: Update the catalog with the specified information.
      operationId: updateCatalog
      parameters:
        - $ref: '#/components/parameters/catalogId'
        - $ref: '#/components/parameters/organizationId'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Catalog'
            examples:
              CatalogBody:
                $ref: '#/components/examples/CatalogBody'
        required: true
      responses:
        '200':
          description: Catalog updated successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Catalog'
              examples:
                Catalog:
                  $ref: '#/components/examples/Catalog'
        '401':
          description: |
            Unauthorized. Your Client ID is invalid, or you are not allowed to access
            the content provided by the requested URL.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                getCatalog401:
                  $ref: '#/components/examples/getCatalog401'
        '404':
          description: |
            Requested resource not found.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                getCatalog404:
                  $ref: '#/components/examples/getCatalog404'
      security:
        - AmOAuth2:
            - sfcc.catalogs.rw
  /organizations/{organizationId}/catalogs/{catalogId}/categories:
    get:
      summary: Retrieve all categories within a catalog.
      description: Get all categories with no filtering.
      operationId: getCategoriesFromCatalog
      parameters:
        - $ref: '#/components/parameters/catalogId'
        - $ref: '#/components/parameters/organizationId'
        - name: limit
          in: query
          required: false
          schema:
            type: integer
            format: int32
            default: 25
            maximum: 50
          description: Maximum records to retrieve per request, not to exceed 50. Defaults to 25.
        - name: offset
          in: query
          required: false
          schema:
            type: integer
            format: int64
            default: 0
            minimum: 0
          description: Used to retrieve the results based on a particular resource offset.
      responses:
        '200':
          description: Categories retrieved successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Categories'
              examples:
                Catalog:
                  $ref: '#/components/examples/Categories'
        '400':
          description: |
            Bad Request. Thrown when a specified parameter value is unknown.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                getCategoryFromCatalog400:
                  $ref: '#/components/examples/getCategoryFromCatalog400'
        '401':
          description: |
            Unauthorized. Your Client ID is invalid, or you are not allowed to access
            the content provided by the requested URL.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                getCatalog401:
                  $ref: '#/components/examples/getCatalog401'
        '404':
          description: |
            Requested resource not found.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                getCatalog404:
                  $ref: '#/components/examples/getCatalog404'
      security:
        - AmOAuth2:
            - sfcc.catalogs
            - sfcc.catalogs.rw
  /organizations/{organizationId}/catalogs/{catalogId}/categories/{categoryId}:
    get:
      summary: Retrieve details of a specific category within a catalog.
      description: |-
        By default, the server
        returns the first level of sub-categories, but you can specify another level by setting the levels
        parameter. Using a large value for levels can cause performance
        issues with large and deep category trees.
      operationId: getCategoryFromCatalog
      parameters:
        - $ref: '#/components/parameters/categoryId'
        - $ref: '#/components/parameters/catalogId'
        - $ref: '#/components/parameters/organizationId'
        - $ref: '#/components/parameters/levels'
      responses:
        '200':
          description: Category retrieved successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Category'
              examples:
                CategoryExample:
                  $ref: '#/components/examples/CategoryExample'
        '400':
          description: |
            Bad Request. Thrown when a specified parameter value is unknown.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                getCategoryFromCatalog400:
                  $ref: '#/components/examples/getCategoryFromCatalog400'
        '401':
          description: |
            Unauthorized. Your Client ID is invalid, or you are not allowed to access
            the content provided by the requested URL.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                getCatalog401:
                  $ref: '#/components/examples/getCatalog401'
        '404':
          description: |
            Requested resource not found.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                getCatalog404:
                  $ref: '#/components/examples/getCatalog404'
      security:
        - AmOAuth2:
            - sfcc.catalogs
            - sfcc.catalogs.rw
    put:
      summary: Create or update a category within a catalog.
      description: Create a catalog category using the information provided.
      operationId: createCategoryInCatalog
      parameters:
        - $ref: '#/components/parameters/categoryId'
        - $ref: '#/components/parameters/catalogId'
        - $ref: '#/components/parameters/organizationId'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Category'
            examples:
              CategoryBody:
                $ref: '#/components/examples/CategoryBody'
        required: true
      responses:
        '200':
          description: Category updated successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Category'
              examples:
                SingleCategory:
                  $ref: '#/components/examples/SingleCategory'
        '201':
          description: Category created successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Category'
              examples:
                SingleCategory:
                  $ref: '#/components/examples/SingleCategory'
        '400':
          description: |
            Bad Request. Thrown when a specified parameter value is unknown.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                getCategoryFromCatalog400:
                  $ref: '#/components/examples/getCategoryFromCatalog400'
        '401':
          description: |
            Unauthorized. Your Client ID is invalid, or you are not allowed to access
            the content provided by the requested URL.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                getCatalog401:
                  $ref: '#/components/examples/getCatalog401'
        '404':
          description: |
            Requested resource not found.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                getCatalog404:
                  $ref: '#/components/examples/getCatalog404'
      security:
        - AmOAuth2:
            - sfcc.catalogs.rw
    delete:
      summary: Delete a specific category from a catalog.
      description: Delete a category by catalog ID and category ID.
      operationId: deleteCategoryFromCatalog
      parameters:
        - $ref: '#/components/parameters/categoryId'
        - $ref: '#/components/parameters/catalogId'
        - $ref: '#/components/parameters/organizationId'
      responses:
        '204':
          description: Category deleted successfully.
        '401':
          description: |
            Unauthorized. Your Client ID is invalid, or you are not allowed to access
            the content provided by the requested URL.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                getCatalog401:
                  $ref: '#/components/examples/getCatalog401'
        '404':
          description: |
            Requested resource not found.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                getCatalog404:
                  $ref: '#/components/examples/getCatalog404'
      security:
        - AmOAuth2:
            - sfcc.catalogs.rw
    patch:
      summary: Update a specific category within a catalog.
      description: Update a catalog category using the information provided.
      operationId: updateCategoryInCatalog
      parameters:
        - $ref: '#/components/parameters/categoryId'
        - $ref: '#/components/parameters/catalogId'
        - $ref: '#/components/parameters/organizationId'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Category'
            examples:
              CategoryBody:
                $ref: '#/components/examples/CategoryBody'
        required: true
      responses:
        '200':
          description: Category updated successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Category'
              examples:
                SingleCategory:
                  $ref: '#/components/examples/SingleCategory'
        '400':
          description: |
            Bad Request. Thrown when a specified parameter value is unknown.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                getCategoryFromCatalog400:
                  $ref: '#/components/examples/getCategoryFromCatalog400'
        '401':
          description: |
            Unauthorized. Your Client ID is invalid, or you are not allowed to access
            the content provided by the requested URL.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                getCatalog401:
                  $ref: '#/components/examples/getCatalog401'
        '404':
          description: |
            Requested resource not found.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                getCatalog404:
                  $ref: '#/components/examples/getCatalog404'
      security:
        - AmOAuth2:
            - sfcc.catalogs.rw
  /organizations/{organizationId}/catalogs/{catalogId}/categories/{categoryId}/category-product-assignment-search:
    post:
      summary: Search for category product assignments.
      description: |-
        The query attribute specifies a complex query that can be used to narrow down the search.

        Searchable attributes:

          | Attribute | Type |
          |-----------|--------|
          | productId| String |
          | productName | String |
          | onlineFlag | Boolean |
          | searchable | Boolean |
          | validFrom | DateTime |
          | validTo | DateTime |
          | creationDate | DateTime |


         Sortable Fields:

          | Attribute | Type |
          |-----------|--------|
          | productId| String |
          | productName | String |
          | position | Double |
          | creationDate | DateTime |

        Expansions that can be applied for the search request:
          - product_base - String

        The product_base expand enables retrieval of the following basic product information:

          | Attribute | Type | Function |
          |-----------|--------|-----|
          | none | String | Does not fetch any expanded information.
          | product_images| String | Fetch preview image and image groups specified for the given product. |
          | product_all_images | String | Fetch preview image, image groups specified for the product, and variant and variation group images. |
          | product_variations | String | Fetch variations-related information. |
          | product_availability | String | Fetch availability-related information. |
          | product_categories | String | Fetch category-related information. |
          | product_prices | String | Fetch price-related information. |
          | product_options | String | Fetch options-related information. |
          | product_all | String | Fetch all expanded information. This is the default used when no expand value is included in the request.|

        Note: productAll includes the following:
          - brand
          - ean
          - link
          - longDescription
          - manufacturerName
          - manufacturerSku
          - name
          - pageDescription
          - pageKeywords
          - pageTitle
          - searchable
          - shortDescription
          - type
          - unit
          - upc
      operationId: searchProductsAssignedToCategory
      parameters:
        - $ref: '#/components/parameters/categoryId'
        - $ref: '#/components/parameters/catalogId'
        - $ref: '#/components/parameters/organizationId'
        - $ref: '#/components/parameters/siteId'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CategoryProductAssignmentSearchRequest'
            examples:
              ProductAssignmentBody:
                $ref: '#/components/examples/ProductAssignmentBody'
        required: true
      responses:
        '200':
          description: Assignments searched successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CategoryProductAssignmentSearchResult'
              examples:
                CategoryProductAssignment:
                  $ref: '#/components/examples/CategoryProductAssignment'
        '401':
          description: |
            Unauthorized. Your Client ID is invalid, or you are not allowed to access
            the content provided by the requested URL.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                getCatalog401:
                  $ref: '#/components/examples/getCatalog401'
        '404':
          description: |
            Requested resource not found.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                getCatalog404:
                  $ref: '#/components/examples/getCatalog404'
      security:
        - AmOAuth2:
            - sfcc.catalogs
            - sfcc.catalogs.rw
  /organizations/{organizationId}/catalogs/{catalogId}/categories/{categoryId}/products/{productId}:
    get:
      summary: Retrieve a category product assignment.
      description: |-
        Retrieve a category product assignment.


        For example, if we have products A, B, C at positions 1, 2, 7.5, and we delete the assignment for product B,
          the result is products A, B, C at positions 1, null, 7.5.
      operationId: getAssignedProductFromCategory
      parameters:
        - $ref: '#/components/parameters/productId'
        - $ref: '#/components/parameters/categoryId'
        - $ref: '#/components/parameters/catalogId'
        - $ref: '#/components/parameters/organizationId'
      responses:
        '200':
          description: Assignment retrieved successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CategoryProductAssignment'
              examples:
                CatalogCategoryPrdAssignmentExample:
                  $ref: '#/components/examples/CatalogCategoryPrdAssignmentExample'
        '401':
          description: |
            Unauthorized. Your Client ID is invalid, or you are not allowed to access
            the content provided by the requested URL.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                getCatalog401:
                  $ref: '#/components/examples/getCatalog401'
        '404':
          description: |
            Requested resource not found.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                getCatalog404:
                  $ref: '#/components/examples/getCatalog404'
      security:
        - AmOAuth2:
            - sfcc.catalogs
            - sfcc.catalogs.rw
    put:
      summary: Create a category product assignment.
      description: |-
        Create a category product assignment using the information provided.

        Because the assigned position n is a normalized target position, we verify that the product is assigned
        to a position that maintains the position order.

        For example, if we have products A, B, C at positions 1, 2, 3, and product D is assigned to
        position 2, the end result is products A, D, B, C with position order 1, 2, 3, 4.

        If there are n existing position assignments, assigning a new product to position >= n+1 results in
        a new assignment with position n+1.
      operationId: assignProductToCategory
      parameters:
        - $ref: '#/components/parameters/productId'
        - $ref: '#/components/parameters/categoryId'
        - $ref: '#/components/parameters/catalogId'
        - $ref: '#/components/parameters/organizationId'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CategoryProductAssignment'
            examples:
              CatalogCategoryProdAssignmentBody:
                $ref: '#/components/examples/CatalogCategoryProdAssignmentBody'
        required: true
      responses:
        '200':
          description: Assignment updated successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CategoryProductAssignment'
              examples:
                CatalogCategoryPrdAssignmentExample:
                  $ref: '#/components/examples/CatalogCategoryPrdAssignmentExample'
        '201':
          description: Assignment created successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CategoryProductAssignment'
              examples:
                CatalogCategoryPrdAssignmentExample:
                  $ref: '#/components/examples/CatalogCategoryPrdAssignmentExample'
        '401':
          description: |
            Unauthorized. Your Client ID is invalid, or you are not allowed to access
            the content provided by the requested URL.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                getCatalog401:
                  $ref: '#/components/examples/getCatalog401'
        '404':
          description: |
            Requested resource not found.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                getCatalog404:
                  $ref: '#/components/examples/getCatalog404'
      security:
        - AmOAuth2:
            - sfcc.catalogs.rw
    delete:
      summary: Remove a category product assignment.
      description: |-
        Remove a category product assignment.


        For example, if we have products A, B, C at positions 1, 2, 7.5, and we delete the assignment for product B,
        the result is products A, B, C at positions 1, null, 7.5.
      operationId: unassignProductFromCategory
      parameters:
        - $ref: '#/components/parameters/productId'
        - $ref: '#/components/parameters/categoryId'
        - $ref: '#/components/parameters/catalogId'
        - $ref: '#/components/parameters/organizationId'
      responses:
        '204':
          description: Assignment deleted successfully.
        '401':
          description: |
            Unauthorized. Your Client ID is invalid, or you are not allowed to access
            the content provided by the requested URL.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                getCatalog401:
                  $ref: '#/components/examples/getCatalog401'
        '404':
          description: |
            Requested resource not found.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                getCatalog404:
                  $ref: '#/components/examples/getCatalog404'
      security:
        - AmOAuth2:
            - sfcc.catalogs.rw
    patch:
      summary: Update a category product assignment.
      description: |-
        Update the category product assignment with the specified information, such as position.
          Because the assigned position n is a normalized target position, we verify that the product is assigned
        to a position that maintains position order.

        For example, if we have products A, B, C, D at positions 1, 2, 3, 4 and we update product A with a new position of 3,
        the end result is products B, C, A, D with position order 1, 2, 3, 4. If we then update product C to no position,
        the end result is products B, A, D, C with position order 1, 2, 3, null.

        If there are n existing positioned assignments, updating a product to position >= n results in a new assignment with a position that maintains the position order.
      operationId: updateProductCategoryAssignment
      parameters:
        - $ref: '#/components/parameters/productId'
        - $ref: '#/components/parameters/categoryId'
        - $ref: '#/components/parameters/catalogId'
        - $ref: '#/components/parameters/organizationId'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CategoryProductAssignment'
            examples:
              CatalogCategoryProdAssignmentBody:
                $ref: '#/components/examples/CatalogCategoryProdAssignmentBody'
        required: true
      responses:
        '200':
          description: Assignment updated successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CategoryProductAssignment'
              examples:
                CatalogCategoryPrdAssignmentExample:
                  $ref: '#/components/examples/CatalogCategoryPrdAssignmentExample'
        '401':
          description: |
            Unauthorized. Your Client ID is invalid, or you are not allowed to access
            the content provided by the requested URL.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                getCatalog401:
                  $ref: '#/components/examples/getCatalog401'
        '404':
          description: |
            Requested resource not found.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                getCatalog404:
                  $ref: '#/components/examples/getCatalog404'
      security:
        - AmOAuth2:
            - sfcc.catalogs.rw
  /organizations/{organizationId}/catalogs/{catalogId}/categories/{categoryId}/rules-execution:
    get:
      summary: Get the status of the latest categorization job.
      description: Get the status of the latest categorization job, which could be evaluation or execution. For evaluation, the matched count and a paginated list of product IDs are returned. For execution, the counts of the products that are assigned or unassigned are returned.
      operationId: getCategorizationStatus
      parameters:
        - $ref: '#/components/parameters/categoryId'
        - $ref: '#/components/parameters/catalogId'
        - $ref: '#/components/parameters/organizationId'
        - $ref: '#/components/parameters/limit'
        - $ref: '#/components/parameters/offset'
      responses:
        '200':
          description: Job executed status returned successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExecutionJobStatusResult'
              examples:
                ExecutionJobStatusResponse:
                  $ref: '#/components/examples/ExecutionJobStatusResponse'
        '400':
          description: |
            Bad Request. Thrown when a specified parameter value is unknown.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                getCategoryFromCatalog400:
                  $ref: '#/components/examples/getCategoryFromCatalog400'
        '401':
          description: |
            Unauthorized. Your Client ID is invalid, or you are not allowed to access
            the content provided by the requested URL.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                getCatalog401:
                  $ref: '#/components/examples/getCatalog401'
        '404':
          description: |
            Resource requested not found.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                getCategorizationStatus404:
                  $ref: '#/components/examples/getCategorizationStatus404'
      security:
        - AmOAuth2:
            - sfcc.catalogs
            - sfcc.catalogs.rw
    post:
      summary: Submit a job to evaluate or execute the rules.
      description: Submit a job to evaluate or execute the rules. The evaluation returns a set of matching products based on the rules and conditions. The execution categorizes the products based on the evaluated results.
      operationId: runCategoryRules
      parameters:
        - $ref: '#/components/parameters/categoryId'
        - $ref: '#/components/parameters/catalogId'
        - $ref: '#/components/parameters/organizationId'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ExecutionRequest'
            examples:
              ExecutionRequestBody:
                $ref: '#/components/examples/ExecutionRequestBody'
        required: true
      responses:
        '202':
          description: Job submitted successfully.
        '400':
          description: |
            Bad Request. Thrown when a specified parameter value is unknown.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                getCategoryFromCatalog400:
                  $ref: '#/components/examples/getCategoryFromCatalog400'
        '401':
          description: |
            Unauthorized. Your Client ID is invalid, or you are not allowed to access
            the content provided by the requested URL.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                getCatalog401:
                  $ref: '#/components/examples/getCatalog401'
        '404':
          description: |
            Requested resource not found.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                getCatalog404:
                  $ref: '#/components/examples/getCatalog404'
      security:
        - AmOAuth2:
            - sfcc.catalogs.rw
  /organizations/{organizationId}/catalogs/{catalogId}/categories/{categoryId}/excluded-products:
    get:
      summary: Get the list of excluded products.
      description: Get the list of excluded products for a given catalog and category.
      operationId: getExclusionList
      parameters:
        - $ref: '#/components/parameters/categoryId'
        - $ref: '#/components/parameters/catalogId'
        - $ref: '#/components/parameters/organizationId'
      responses:
        '200':
          description: Excluded products retrieved successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExcludedProductsResult'
              examples:
                GetExcludedProducts:
                  $ref: '#/components/examples/GetExcludedProducts'
        '400':
          description: |
            Bad Request. Thrown when a specified parameter value is unknown.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                getCategoryFromCatalog400:
                  $ref: '#/components/examples/getCategoryFromCatalog400'
        '401':
          description: |
            Unauthorized. Your Client ID is invalid, or you are not allowed to access
            the content provided by the requested URL.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                getCatalog401:
                  $ref: '#/components/examples/getCatalog401'
        '404':
          description: |
            Requested resource not found.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                getCatalog404:
                  $ref: '#/components/examples/getCatalog404'
      security:
        - AmOAuth2:
            - sfcc.catalogs
            - sfcc.catalogs.rw
    post:
      summary: Add products to the exclusion list.
      description: Add the product to the excluded product list for a given catalog and category. After a product is added as an excluded product for the category, the categorization process no longer categorizes that product for that category.
      operationId: addProductsToExclusionList
      parameters:
        - $ref: '#/components/parameters/categoryId'
        - $ref: '#/components/parameters/catalogId'
        - $ref: '#/components/parameters/organizationId'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ExcludedProductRequest'
            examples:
              ExcludedProductsRequestBody:
                $ref: '#/components/examples/ExcludedProductsRequestBody'
        required: true
      responses:
        '200':
          description: Excluded products list added for a catalog category.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExcludedProductsResult'
              examples:
                GetExcludedProducts:
                  $ref: '#/components/examples/GetExcludedProducts'
        '400':
          description: |
            Bad Request. Thrown when a specified parameter value is unknown.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                getCategoryFromCatalog400:
                  $ref: '#/components/examples/getCategoryFromCatalog400'
        '401':
          description: |
            Unauthorized. Your Client ID is invalid, or you are not allowed to access
            the content provided by the requested URL.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                getCatalog401:
                  $ref: '#/components/examples/getCatalog401'
        '404':
          description: |
            Requested resource not found.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                getCatalog404:
                  $ref: '#/components/examples/getCatalog404'
      security:
        - AmOAuth2:
            - sfcc.catalogs.rw
    delete:
      summary: Remove products from the exclusion list.
      description: Delete products from the excluded products list for a catalog category.
      operationId: removeProductsFromExclusionList
      parameters:
        - $ref: '#/components/parameters/categoryId'
        - $ref: '#/components/parameters/catalogId'
        - $ref: '#/components/parameters/organizationId'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ExcludedProductRequest'
            examples:
              ExcludedProductsRequestBody:
                $ref: '#/components/examples/ExcludedProductsRequestBody'
        required: true
      responses:
        '204':
          description: No content.
        '400':
          description: |
            Bad Request. Thrown when a specified parameter value is unknown.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                getCategoryFromCatalog400:
                  $ref: '#/components/examples/getCategoryFromCatalog400'
        '401':
          description: |
            Unauthorized. Your Client ID is invalid, or you are not allowed to access
            the content provided by the requested URL.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                getCatalog401:
                  $ref: '#/components/examples/getCatalog401'
        '404':
          description: |
            Resource requested not found.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                getRuleById404:
                  $ref: '#/components/examples/getRuleById404'
      security:
        - AmOAuth2:
            - sfcc.catalogs.rw
  /organizations/{organizationId}/catalogs/{catalogId}/categories/{categoryId}/rules:
    get:
      summary: Retrieve all rules for a catalog and category.
      description: Get all rules for the given catalog and category.
      operationId: getCategoryRules
      parameters:
        - $ref: '#/components/parameters/categoryId'
        - $ref: '#/components/parameters/catalogId'
        - $ref: '#/components/parameters/organizationId'
      responses:
        '200':
          description: Rules retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RulesResult'
              examples:
                GetRules:
                  $ref: '#/components/examples/GetRules'
        '400':
          description: |
            Bad Request. Thrown when a specified parameter value is unknown.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                getCategoryFromCatalog400:
                  $ref: '#/components/examples/getCategoryFromCatalog400'
        '401':
          description: |
            Unauthorized. Your Client ID is invalid, or you are not allowed to access
            the content provided by the requested URL.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                getCatalog401:
                  $ref: '#/components/examples/getCatalog401'
        '404':
          description: |
            Requested resource not found.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                getCatalog404:
                  $ref: '#/components/examples/getCatalog404'
      security:
        - AmOAuth2:
            - sfcc.catalogs
            - sfcc.catalogs.rw
    post:
      summary: Create rules and conditions for a catalog and category.
      description: Create all rules and conditions within the catalog and category. This deletes any existing rules and conditions for that catalog and category combination, and recreates them based on the new request. The LocaleID, PrimaryFlag, and ClassificationFlag can be set on any of the individual rules, but they apply to the entire ruleset. For simplicity, those values can be provided with one of the rules. If they are provided with multiple rules, then they must all have the same value for all rules or it could produce undesired effects.
      operationId: createCategoryRules
      parameters:
        - $ref: '#/components/parameters/categoryId'
        - $ref: '#/components/parameters/catalogId'
        - $ref: '#/components/parameters/organizationId'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RulesRequest'
            examples:
              PostRuleRequestBody:
                $ref: '#/components/examples/PostRuleRequestBody'
        required: true
      responses:
        '200':
          description: Rules created successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RulesResult'
              examples:
                GetRules:
                  $ref: '#/components/examples/GetRules'
        '400':
          description: |
            Bad Request. Thrown when a specified parameter value is unknown.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                getCategoryFromCatalog400:
                  $ref: '#/components/examples/getCategoryFromCatalog400'
        '401':
          description: |
            Unauthorized. Your Client ID is invalid, or you are not allowed to access
            the content provided by the requested URL.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                getCatalog401:
                  $ref: '#/components/examples/getCatalog401'
        '404':
          description: |
            Requested resource not found.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                getCatalog404:
                  $ref: '#/components/examples/getCatalog404'
      security:
        - AmOAuth2:
            - sfcc.catalogs.rw
    delete:
      summary: Delete all rules and conditions for a catalog and category.
      description: Delete all rules and conditions for the given catalog and category.
      operationId: deleteCategoryRules
      parameters:
        - $ref: '#/components/parameters/categoryId'
        - $ref: '#/components/parameters/catalogId'
        - $ref: '#/components/parameters/organizationId'
      responses:
        '204':
          description: No content.
        '400':
          description: |
            Bad Request. Thrown when a specified parameter value is unknown.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                getCategoryFromCatalog400:
                  $ref: '#/components/examples/getCategoryFromCatalog400'
        '401':
          description: |
            Unauthorized. Your Client ID is invalid, or you are not allowed to access
            the content provided by the requested URL.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                getCatalog401:
                  $ref: '#/components/examples/getCatalog401'
        '404':
          description: |
            Resource requested not found.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                getRuleById404:
                  $ref: '#/components/examples/getRuleById404'
      security:
        - AmOAuth2:
            - sfcc.catalogs.rw
  /organizations/{organizationId}/catalogs/{catalogId}/categories/{categoryId}/rules/{ruleId}:
    get:
      summary: Retrieve a rule by ID.
      description: Get a rule by ID.
      operationId: getRuleById
      parameters:
        - $ref: '#/components/parameters/ruleId'
        - $ref: '#/components/parameters/categoryId'
        - $ref: '#/components/parameters/catalogId'
        - $ref: '#/components/parameters/organizationId'
      responses:
        '200':
          description: Rule retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Rule'
              examples:
                GetRulesByID:
                  $ref: '#/components/examples/GetRulesByID'
        '400':
          description: |
            Bad Request. Thrown when a specified parameter value is unknown.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                getCategoryFromCatalog400:
                  $ref: '#/components/examples/getCategoryFromCatalog400'
        '401':
          description: |
            Unauthorized. Your Client ID is invalid, or you are not allowed to access
            the content provided by the requested URL.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                getCatalog401:
                  $ref: '#/components/examples/getCatalog401'
        '404':
          description: |
            Resource requested not found.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                getRuleById404:
                  $ref: '#/components/examples/getRuleById404'
      security:
        - AmOAuth2:
            - sfcc.catalogs
            - sfcc.catalogs.rw
    put:
      summary: Create or update a rule.
      description: Create or update a rule.
      operationId: createUpdateRule
      parameters:
        - $ref: '#/components/parameters/ruleId'
        - $ref: '#/components/parameters/categoryId'
        - $ref: '#/components/parameters/catalogId'
        - $ref: '#/components/parameters/organizationId'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RuleRequest'
            examples:
              PutRuleRequestBody:
                $ref: '#/components/examples/PutRuleRequestBody'
        required: true
      responses:
        '200':
          description: Rule updated successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Rule'
              examples:
                PutRuleRequestBody:
                  $ref: '#/components/examples/PutRuleUpdateResult'
        '201':
          description: Rule created successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Rule'
              examples:
                PutRuleRequestBody:
                  $ref: '#/components/examples/PutRuleUpdateResult'
        '400':
          description: |
            Bad Request. Thrown when a specified parameter value is unknown.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                getCategoryFromCatalog400:
                  $ref: '#/components/examples/getCategoryFromCatalog400'
        '401':
          description: |
            Unauthorized. Your Client ID is invalid, or you are not allowed to access
            the content provided by the requested URL.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                getCatalog401:
                  $ref: '#/components/examples/getCatalog401'
        '404':
          description: |
            Requested resource not found.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                getCatalog404:
                  $ref: '#/components/examples/getCatalog404'
      security:
        - AmOAuth2:
            - sfcc.catalogs.rw
    delete:
      summary: Delete a rule.
      description: Delete a rule.
      operationId: deleteRule
      parameters:
        - $ref: '#/components/parameters/ruleId'
        - $ref: '#/components/parameters/categoryId'
        - $ref: '#/components/parameters/catalogId'
        - $ref: '#/components/parameters/organizationId'
      responses:
        '204':
          description: No content.
        '400':
          description: |
            Bad Request. Thrown when a specified parameter value is unknown.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                getCategoryFromCatalog400:
                  $ref: '#/components/examples/getCategoryFromCatalog400'
        '401':
          description: |
            Unauthorized. Your Client ID is invalid, or you are not allowed to access
            the content provided by the requested URL.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                getCatalog401:
                  $ref: '#/components/examples/getCatalog401'
        '404':
          description: |
            Resource requested not found.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                getRuleById404:
                  $ref: '#/components/examples/getRuleById404'
      security:
        - AmOAuth2:
            - sfcc.catalogs.rw
  /organizations/{organizationId}/catalogs/{catalogId}/categories/{categoryId}/rules/{ruleId}/conditions:
    get:
      summary: Retrieve conditions for a rule.
      description: Get the conditions for a given rule, catalog and category.
      operationId: getCategoryRuleConditions
      parameters:
        - $ref: '#/components/parameters/ruleId'
        - $ref: '#/components/parameters/categoryId'
        - $ref: '#/components/parameters/catalogId'
        - $ref: '#/components/parameters/organizationId'
      responses:
        '200':
          description: Conditions retrieved successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConditionsResult'
              examples:
                GetConditions:
                  $ref: '#/components/examples/GetConditions'
        '400':
          description: |
            Bad Request. Thrown when a specified parameter value is unknown.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                getCategoryFromCatalog400:
                  $ref: '#/components/examples/getCategoryFromCatalog400'
        '401':
          description: |
            Unauthorized. Your Client ID is invalid, or you are not allowed to access
            the content provided by the requested URL.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                getCatalog401:
                  $ref: '#/components/examples/getCatalog401'
        '404':
          description: |
            Requested resource not found.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                getCatalog404:
                  $ref: '#/components/examples/getCatalog404'
      security:
        - AmOAuth2:
            - sfcc.catalogs
            - sfcc.catalogs.rw
    delete:
      summary: Delete all conditions for a rule.
      description: Deletes all conditions for a given rule, catalog, and category.
      operationId: deleteCategoryRuleConditions
      parameters:
        - $ref: '#/components/parameters/ruleId'
        - $ref: '#/components/parameters/categoryId'
        - $ref: '#/components/parameters/catalogId'
        - $ref: '#/components/parameters/organizationId'
      responses:
        '204':
          description: No content.
        '400':
          description: |
            Bad Request. Thrown when a specified parameter value is unknown.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                getCategoryFromCatalog400:
                  $ref: '#/components/examples/getCategoryFromCatalog400'
        '401':
          description: |
            Unauthorized. Your Client ID is invalid, or you are not allowed to access
            the content provided by the requested URL.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                getCatalog401:
                  $ref: '#/components/examples/getCatalog401'
        '404':
          description: |
            Resource requested not found.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                getRuleById404:
                  $ref: '#/components/examples/getRuleById404'
      security:
        - AmOAuth2:
            - sfcc.catalogs.rw
  /organizations/{organizationId}/catalogs/{catalogId}/categories/{categoryId}/rules/{ruleId}/conditions/{conditionId}:
    get:
      summary: Retrieve a condition by ID.
      description: Get a condition by ID.
      operationId: getCategoryRuleCondition
      parameters:
        - $ref: '#/components/parameters/conditionId'
        - $ref: '#/components/parameters/ruleId'
        - $ref: '#/components/parameters/categoryId'
        - $ref: '#/components/parameters/catalogId'
        - $ref: '#/components/parameters/organizationId'
      responses:
        '200':
          description: Condition retrieved successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Condition'
              examples:
                GetConditionByID:
                  $ref: '#/components/examples/GetConditionByID'
        '400':
          description: |
            Bad Request. Thrown when a specified parameter value is unknown.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                getCategoryFromCatalog400:
                  $ref: '#/components/examples/getCategoryFromCatalog400'
        '401':
          description: |
            Unauthorized. Your Client ID is invalid, or you are not allowed to access
            the content provided by the requested URL.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                getCatalog401:
                  $ref: '#/components/examples/getCatalog401'
        '404':
          description: |
            Requested resource not found.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                getCatalog404:
                  $ref: '#/components/examples/getCatalog404'
      security:
        - AmOAuth2:
            - sfcc.catalogs
            - sfcc.catalogs.rw
    put:
      summary: Create or update a condition.
      description: Create or update a condition.
      operationId: createOrUpdateCategoryRuleCondition
      parameters:
        - $ref: '#/components/parameters/conditionId'
        - $ref: '#/components/parameters/ruleId'
        - $ref: '#/components/parameters/categoryId'
        - $ref: '#/components/parameters/catalogId'
        - $ref: '#/components/parameters/organizationId'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Condition'
            examples:
              PutConditionRequestBody:
                $ref: '#/components/examples/PutConditionRequestBody'
        required: true
      responses:
        '200':
          description: Condition updated successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Condition'
              examples:
                GetConditionByID:
                  $ref: '#/components/examples/GetConditionByID'
        '201':
          description: Condition created successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Condition'
              examples:
                GetConditionByID:
                  $ref: '#/components/examples/GetConditionByID'
        '400':
          description: |
            Bad Request. Thrown when a specified parameter value is unknown.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                getCategoryFromCatalog400:
                  $ref: '#/components/examples/getCategoryFromCatalog400'
        '401':
          description: |
            Unauthorized. Your Client ID is invalid, or you are not allowed to access
            the content provided by the requested URL.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                getCatalog401:
                  $ref: '#/components/examples/getCatalog401'
        '404':
          description: |
            Requested resource not found.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                getCatalog404:
                  $ref: '#/components/examples/getCatalog404'
      security:
        - AmOAuth2:
            - sfcc.catalogs.rw
    delete:
      summary: Delete a condition.
      description: Delete a condition.
      operationId: deleteCategoryRuleCondition
      parameters:
        - $ref: '#/components/parameters/conditionId'
        - $ref: '#/components/parameters/ruleId'
        - $ref: '#/components/parameters/categoryId'
        - $ref: '#/components/parameters/catalogId'
        - $ref: '#/components/parameters/organizationId'
      responses:
        '204':
          description: No content.
        '400':
          description: |
            Bad Request. Thrown when a specified parameter value is unknown.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                getCategoryFromCatalog400:
                  $ref: '#/components/examples/getCategoryFromCatalog400'
        '401':
          description: |
            Unauthorized. Your Client ID is invalid, or you are not allowed to access
            the content provided by the requested URL.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                getCatalog401:
                  $ref: '#/components/examples/getCatalog401'
        '404':
          description: |
            Resource requested not found.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                getRuleById404:
                  $ref: '#/components/examples/getRuleById404'
      security:
        - AmOAuth2:
            - sfcc.catalogs.rw
  /organizations/{organizationId}/catalogs/{catalogId}/category-search:
    post:
      summary: Search for catalog categories.
      description: |-
        Search for catalog categories in the scope of a catalog.
        By default, the server returns the first level of subcategories,
        but you can specify another level by setting the levels parameter.
        Using a large value for levels can cause performance
        issues with large and deep category trees.

        The query attribute specifies a complex query that can be used to narrow down the search with the following searchable attributes:

        | Attribute | Type |
        |-----------|--------|
        |id | String |
        |name | String |
        |description | String |
        |creationDate | DateTime |
        |online | Boolean |
        |parentCategoryId | String|


        The output of the query can also be sorted with the following sortable attributes:

        | Attribute | Type |
        |-----------|--------|
        |id | String |
        |name | String |
        |description | String |
        |creationDate | DateTime |
        |online | Boolean |
        |position | Double|
      operationId: searchCategoriesInCatalog
      parameters:
        - $ref: '#/components/parameters/catalogId'
        - $ref: '#/components/parameters/organizationId'
        - $ref: '#/components/parameters/levels'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CatalogCategorySearchRequest'
            examples:
              CatalogSearchBody:
                $ref: '#/components/examples/CatalogSearchBody'
        required: true
      responses:
        '200':
          description: Categories searched successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CategorySearchResult'
              examples:
                CategorySearchResultExample:
                  $ref: '#/components/examples/CategorySearchResultExample'
        '400':
          description: |
            Bad Request. Thrown when a specified parameter value is unknown.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                getCategoryFromCatalog400:
                  $ref: '#/components/examples/getCategoryFromCatalog400'
        '401':
          description: |
            Unauthorized. Your Client ID is invalid, or you are not allowed to access
            the content provided by the requested URL.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                getCatalog401:
                  $ref: '#/components/examples/getCatalog401'
        '404':
          description: |
            Requested resource not found.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                getCatalog404:
                  $ref: '#/components/examples/getCatalog404'
      security:
        - AmOAuth2:
            - sfcc.catalogs
            - sfcc.catalogs.rw
  /organizations/{organizationId}/catalog-search:
    post:
      summary: Search for catalogs.
      description: |-
        Search for catalogs.

        The query attribute specifies a complex query that can be used to narrow down the search with the following searchable attributes:

        | Attribute | Type |
        |-----------|--------|
        |id | String |
        |name | String |
        |description | String |
        |creationDate | DateTime |

        There are two additional fields that can be used as search filters. They are not attributes in the CatalogWO object,
        but they can be used as filters to query catalogs based on site assignments.

        | Attribute | Type |
        |-----------|--------|
        |isMasterCatalog | Boolean |
        |isStorefrontCatalog | Boolean |
        |description | String |
        |creationDate | DateTime |
        |online | Boolean |
        |position | Double|


        When you use isMasterCatalog in the search query, catalogs without any site assignments are returned.
        When you use isStorefrontCatalog in the search query, catalogs with one or more site assignments are returned.

        The output of the query can also be sorted with the following sortable attributes:

        | Attribute | Type |
        |-----------|--------|
        |id | String |
        |name | String |
        |description | String |
        |creationDate | DateTime |
      operationId: searchCatalogs
      parameters:
        - $ref: '#/components/parameters/organizationId'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CatalogSearchRequest'
            examples:
              CatalogSearchBodyQuery:
                $ref: '#/components/examples/CatalogSearchBodyQuery'
        required: true
      responses:
        '200':
          description: Catalogs searched successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CatalogSearchResult'
              examples:
                CatalogSearchResultQuery:
                  $ref: '#/components/examples/CatalogSearchResultQuery'
        '400':
          description: |
            Bad Request. Thrown when a specified parameter value is unknown.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                getCategoryFromCatalog400:
                  $ref: '#/components/examples/getCategoryFromCatalog400'
        '401':
          description: |
            Unauthorized. Your Client ID is invalid, or you are not allowed to access
            the content provided by the requested URL.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                getCatalog401:
                  $ref: '#/components/examples/getCatalog401'
        '404':
          description: |
            Requested resource not found.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                getCatalog404:
                  $ref: '#/components/examples/getCatalog404'
      security:
        - AmOAuth2:
            - sfcc.catalogs
            - sfcc.catalogs.rw
  /organizations/{organizationId}/category-search:
    post:
      summary: Search for categories within an organization.
      description: "Search for catalog categories.\nBy default, the server returns the first level of subcategories,\nbut you can specify another level by setting the levels parameter.\nUsing a large value for levels can cause performance\nissues with large and deep category trees.\n\nThe query attribute specifies a complex query that can be used to narrow down the search with the following searchable attributes:\n\n| Attribute | Type |\n|-----------|--------|\n|id | String |\n|name | String |\n|description | String |\n|creationDate | DateTime |\n|online | Boolean |\n|catalogId | String| \n\nThe output of the query can also be sorted with the following sortable attributes:\n\n| Attribute | Type |\n|-----------|--------|\n|id | String |\n|name | String |\n|description | String |\n|creationDate | DateTime |\n|online | Boolean |\n|position | Double|"
      operationId: searchCategories
      parameters:
        - $ref: '#/components/parameters/organizationId'
        - $ref: '#/components/parameters/levels'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CategorySearchRequest'
            examples:
              CategorySearchBody:
                $ref: '#/components/examples/CategorySearchBody'
        required: true
      responses:
        '200':
          description: Categories searched successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CategorySearchResult'
              examples:
                CategorySearchResultExample:
                  $ref: '#/components/examples/CategorySearchResultExample'
        '400':
          description: |
            Bad Request. Thrown when a specified parameter value is unknown.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                getCategoryFromCatalog400:
                  $ref: '#/components/examples/getCategoryFromCatalog400'
        '401':
          description: |
            Unauthorized. Your Client ID is invalid, or you are not allowed to access
            the content provided by the requested URL.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                getCatalog401:
                  $ref: '#/components/examples/getCatalog401'
        '404':
          description: |
            Requested resource not found.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                getCatalog404:
                  $ref: '#/components/examples/getCatalog404'
      security:
        - AmOAuth2:
            - sfcc.catalogs
            - sfcc.catalogs.rw
components:
  securitySchemes:
    AmOAuth2:
      type: oauth2
      description: AccountManager OAuth 2.0 bearer token Authentication.
      flows:
        clientCredentials:
          tokenUrl: https://account.demandware.com/dwsso/oauth2/access_token
          scopes:
            sfcc.catalogs: catalogs scope READONLY
            sfcc.catalogs.rw: catalogs scope
        authorizationCode:
          authorizationUrl: https://account.demandware.com/dwsso/oauth2/authorize
          tokenUrl: https://account.demandware.com/dwsso/oauth2/access_token
          scopes:
            sfcc.catalogs: catalogs scope READONLY
            sfcc.catalogs.rw: catalogs scope
  schemas:
    OrganizationId:
      description: An identifier for the organization the request is being made by
      example: f_ecom_zzxy_prd
      type: string
      minLength: 1
      maxLength: 32
    Limit:
      default: 10
      minimum: 1
      format: int32
      description: Maximum records to retrieve per request, not to exceed the maximum defined. A limit must be at least 1 so at least one record is returned (if any match the criteria).
      type: integer
      example: 10
    Total:
      default: 0
      minimum: 0
      format: int64
      description: The total number of hits that match the search's criteria. This can be greater than the number of results returned as search results are pagenated.
      type: integer
      example: 10
    ResultBase:
      description: "Schema defining generic list result. Each response schema of a resource requiring a list response should extend this schema. \nAdditionally it needs to be defined what data is returned."
      type: object
      required:
        - limit
        - total
      properties:
        limit:
          maximum: 200
          allOf:
            - $ref: '#/components/schemas/Limit'
        total:
          $ref: '#/components/schemas/Total'
    Offset:
      default: 0
      minimum: 0
      format: int64
      description: The zero-based index of the first hit/data to include in the result.
      type: integer
      example: 0
    PaginatedResultBase:
      description: "Schema defining generic pageable result. Each response schema of a resource requiring pagination should extend this schema. \nIf you use this extend this schema directly, it needs to be defined what data is returned. Allowed names for the data field is `data`."
      type: object
      allOf:
        - $ref: '#/components/schemas/ResultBase'
      properties:
        offset:
          $ref: '#/components/schemas/Offset'
      required:
        - limit
        - offset
        - total
    String256:
      type: string
      maxLength: 256
      description: "The String256 schema is a foundational schema designed for fields or attributes that are stored in a database field with a maximum capacity of 256 bytes. \nThis schema accommodates various character sets, with the following considerations:\n  - ASCII Characters: Each ASCII character occupies 1 byte, allowing up to 256 characters.\n  - Latin Characters: Many Latin characters require 2 bytes each, allowing up to 128 characters.\n  - Asian Characters: Many Asian characters require 3 bytes each, allowing approximately 85 characters."
      example: Max Mustermann
    SiteId:
      minLength: 1
      maxLength: 32
      description: The identifier of the site that a request is being made in the context of. Attributes might have site specific values, and some objects may only be assigned to specific sites
      example: RefArch
      type: string
    Site:
      required:
        - displayName
        - id
      type: object
      properties:
        cartridges:
          type: string
          description: The cartridge path of the site.
          example: sitegenesis_storefront_controllers:sitegenesis_storefront_core
        customerListLink:
          required:
            - customerListId
          type: object
          properties:
            customerListId:
              type: string
              description: The customerList ID.
              allOf:
                - $ref: '#/components/schemas/String256'
              example: SiteGenesis
            title:
              type: object
              additionalProperties:
                type: string
              description: The link title.
          description: Document representing a link to a customer list.
        description:
          type: object
          additionalProperties: false
          description: The description of this site.
          example:
            default: Prototypical site used for starting point
        displayName:
          type: object
          additionalProperties: false
          description: The display name entered by the user.
          example:
            default: Site Genesis
        id:
          $ref: '#/components/schemas/SiteId'
        inDeletion:
          type: boolean
          description: The deletion status of this site, true if in deletion.
          example: false
        storefrontStatus:
          type: string
          description: The storefront status of the site, it can be optionally be set to online, maintenance, to_be_deleted, and protected.
          example: online
          enum:
            - online
            - maintenance
            - to_be_deleted
            - protected
      description: Document representing a site.
    CatalogId:
      maxLength: 256
      minLength: 1
      type: string
      description: The ID of the catalog.
      example: apparel-catalog
    Catalog:
      type: object
      properties:
        assignedProductCount:
          type: integer
          description: The count of products assigned to the catalog. It is read only.
          format: int32
          example: 20
        assignedSites:
          items:
            $ref: '#/components/schemas/Site'
          type: array
          description: The sites assigned to the catalog. It is read only.
        categoryCount:
          type: integer
          description: The category count of catalog. It is read only.
          format: int32
          example: 10
        creationDate:
          type: string
          description: Returns the value of attribute 'creationDate'. It is read only.
          format: date-time
          maxLength: 30
          example: 253402214400
        description:
          type: object
          additionalProperties:
            type: string
          description: The description of catalog.
        id:
          $ref: '#/components/schemas/CatalogId'
        lastModified:
          type: string
          description: Returns the value of attribute 'lastModified'. It is read only.
          format: date-time
          maxLength: 30
          example: 253402214400
        name:
          type: object
          additionalProperties:
            type: string
          description: The catalog name.
        online:
          type: boolean
          description: The online status of catalog.
          example: false
        ownedProductCount:
          type: integer
          description: The count of products owned by the catalog. It is read only.
          format: int32
          example: 100
        recommendationCount:
          type: integer
          description: The recommendation count of the catalog. It is read only.
          format: int32
          example: 50
        rootCategory:
          type: string
          description: The root category of the catalog.  It is read only.
          allOf:
            - $ref: '#/components/schemas/String256'
          example: apparel-master-catalog
      description: Document representing a catalog.
      additionalProperties:
        title: Additional Property Support
        description: |-
          This type supports additional properties passed along with the defined properties of this API.
          To indicate that the properties were defined and expected to be handled as additional properties, they are expected to be prefixed with a `c_`.
          The type will reject any property that does not fit this pattern, only allowing additional properties beginning with the known prefix.
        example: c_trackingId
      required:
        - id
    Catalogs:
      required:
        - data
        - limit
        - offset
        - total
      type: object
      allOf:
        - $ref: '#/components/schemas/PaginatedResultBase'
      properties:
        data:
          items:
            $ref: '#/components/schemas/Catalog'
          type: array
          description: The collection of catalogs.
      description: Catalogs allow categories to be organized into hierarchical structures.
    ErrorResponse:
      type: object
      additionalProperties: true
      properties:
        title:
          description: "A short, human-readable summary of the problem\ntype.  It will not change from occurrence to occurrence of the \nproblem, except for purposes of localization\n"
          type: string
          maxLength: 256
          example: You do not have enough credit
        type:
          description: |
            A URI reference [RFC3986] that identifies the
            problem type.  This specification encourages that, when
            dereferenced, it provide human-readable documentation for the
            problem type (e.g., using HTML [W3C.REC-html5-20141028]).  When
            this member is not present, its value is assumed to be
            "about:blank". It accepts relative URIs; this means
            that they must be resolved relative to the document's base URI, as
            per [RFC3986], Section 5.
          type: string
          maxLength: 2048
          example: NotEnoughMoney
        detail:
          description: A human-readable explanation specific to this occurrence of the problem.
          type: string
          example: Your current balance is 30, but that costs 50
        instance:
          description: |
            A URI reference that identifies the specific
            occurrence of the problem.  It may or may not yield further
            information if dereferenced.  It accepts relative URIs; this means
            that they must be resolved relative to the document's base URI, as
            per [RFC3986], Section 5.
          type: string
          maxLength: 2048
          example: /account/12345/msgs/abc
      required:
        - title
        - type
        - detail
    Category:
      type: object
      properties:
        catalogId:
          allOf:
            - $ref: '#/components/schemas/CatalogId'
          description: The ID of the catalog that contains it.
          example: apparel-catalog
        categories:
          items:
            $ref: '#/components/schemas/Category'
          type: array
          description: The array of subcategories for the category.
        creationDate:
          type: string
          description: Returns the value of attribute 'creationDate'. It is read only.
          format: date-time
          maxLength: 30
          example: 253402214400
        description:
          type: object
          additionalProperties: false
          description: The localized description of the category.
          example:
            en_US: Mens Clothing Outerwear
        id:
          allOf:
            - $ref: '#/components/schemas/CategoryId'
          description: The ID of the category.
          example: mens-clothing-outerwear
        image:
          maxLength: 256
          minLength: 1
          type: string
          description: The name of the category image. The URL to the image is computed.
          example: Summer Bomber Jacket
        lastModified:
          type: string
          description: Returns the value of attribute 'lastModified'. It is read only.
          format: date-time
          maxLength: 30
          example: 253402214400
        name:
          type: object
          additionalProperties: false
          description: The localized name of the category.
          example:
            en_US: Mens Clothing Outerwear
        online:
          type: boolean
          description: The online status of the category determines if it is visible in the storefront. Defaults to false if not specified on creation.
          example: true
        pageDescription:
          type: object
          additionalProperties: false
          description: The localized page description of the category.
          example:
            en_US: Mens Outerwear Category
        pageKeywords:
          type: object
          additionalProperties: false
          description: The localized page keywords for the category.
          example:
            en_US: Outerwear
        pageTitle:
          type: object
          additionalProperties: false
          description: The localized page title of the category.
          example:
            en_US: Mens Clothing Outerwear
        parentCategoryId:
          maxLength: 256
          minLength: 1
          type: string
          description: The ID of the parent category. Defaults to root if not specified on creation.
          example: mens-clothing
        paths:
          items:
            $ref: '#/components/schemas/PathRecord'
          type: array
          description: The path record.
        position:
          type: number
          description: The position of the category determines the display order in the storefront.
          format: double
          example: 3
        sortingRules:
          items:
            $ref: '#/components/schemas/SortingRule'
          type: array
          description: The category sorting rules.
        thumbnail:
          maxLength: 256
          minLength: 1
          type: string
          description: The name of the category thumbnail. The URL to the thumbnail is computed.
          example: Summer Bomber Jacket Large
      description: Document representing a category.
      additionalProperties:
        title: Additional Property Support
        description: |-
          This type supports additional properties passed along with the defined properties of this API.
          To indicate that the properties were defined and expected to be handled as additional properties, they are expected to be prefixed with a `c_`.
          The type will reject any property that does not fit this pattern, only allowing additional properties beginning with the known prefix.
        example: c_trackingId
      required:
        - id
    CategoryId:
      maxLength: 256
      minLength: 1
      type: string
      description: The ID of the category.
      example: mens
    PathRecord:
      type: object
      properties:
        id:
          allOf:
            - $ref: '#/components/schemas/CategoryId'
          description: The ID of the category path.
          example: mens-clothing
        name:
          type: object
          additionalProperties:
            type: string
          description: The name of the category path.
      description: Document representing most basic info (ID and name) of a category or catalog.
      additionalProperties:
        title: Additional Property Support
        description: |-
          This type supports additional properties passed along with the defined properties of this API.
          To indicate that the properties were defined and expected to be handled as additional properties, they are expected to be prefixed with a `c_`.
          The type will reject any property that does not fit this pattern, only allowing additional properties beginning with the known prefix.
        example: c_trackingId
    String4000:
      type: string
      maxLength: 4000
      description: "The String4000 schema is a foundational schema designed for fields or attributes that are stored in a database field with a maximum capacity of 4000 bytes. \nThis schema accommodates various character sets, with the following considerations:\n  - ASCII Characters: Each ASCII character occupies 1 byte, allowing up to 4000 characters.\n  - Latin Characters: Many Latin characters require 2 bytes each, allowing up to 2000 characters.\n  - Asian Characters: Many Asian characters require 3 bytes each, allowing approximately 1333 characters."
      example: This is a detailed description of an Excellent Product. It includes all the features, specifications, and benefits of the product. The Excellent Product is designed to provide exceptional performance and reliability. It is made from high-quality materials and has been rigorously tested to ensure it meets the highest standards. Whether you are using it for personal or professional purposes, the Excellent Product is the perfect choice. With its advanced technology and user-friendly design, it offers unparalleled convenience and efficiency. Order your Excellent Product today and experience the difference it can make.
    SortingRuleStep:
      type: object
      properties:
        attributeId:
          allOf:
            - $ref: '#/components/schemas/String256'
          description: The ID for sorting attribute.
          example: price
        direction:
          type: string
          description: The direction of the sorting attribute.
          example: desc
          enum:
            - asc
            - desc
        isSystem:
          type: boolean
          description: Whether or not the attribute is a system attribute.
          example: false
        position:
          type: integer
          description: The position of product sorting rule step.
          format: int32
          example: 1
        textRelevanceIncluded:
          type: boolean
          description: The text relevance included.
          example: true
        typeId:
          allOf:
            - $ref: '#/components/schemas/String256'
          description: The sorting type for sorting attribute.
          example: price
      description: Document representing a product sorting rule step.
      additionalProperties:
        title: Additional Property Support
        description: |-
          This type supports additional properties passed along with the defined properties of this API.
          To indicate that the properties were defined and expected to be handled as additional properties, they are expected to be prefixed with a `c_`.
          The type will reject any property that does not fit this pattern, only allowing additional properties beginning with the known prefix.
        example: c_trackingId
    SortingRule:
      type: object
      properties:
        creationDate:
          type: string
          description: The creation date, read only.
          format: date-time
          maxLength: 30
          example: 253402214400
        description:
          allOf:
            - $ref: '#/components/schemas/String4000'
          description: The description of the product sorting rule.
          example: Sorts by price descending
        id:
          description: The ID of the product sorting rule.
          allOf:
            - $ref: '#/components/schemas/String256'
          example: price-high-to-low
        productSortingRuleSteps:
          items:
            $ref: '#/components/schemas/SortingRuleStep'
          type: array
          description: The steps involved in sorting by this rule.
        ruleContext:
          type: string
          description: The context of the rule, either site or global.
          enum:
            - site
            - global
          example: site
        site:
          $ref: '#/components/schemas/SiteId'
      description: Document representing a product sorting rule.
      additionalProperties:
        title: Additional Property Support
        description: |-
          This type supports additional properties passed along with the defined properties of this API.
          To indicate that the properties were defined and expected to be handled as additional properties, they are expected to be prefixed with a `c_`.
          The type will reject any property that does not fit this pattern, only allowing additional properties beginning with the known prefix.
        example: c_trackingId
    Categories:
      required:
        - data
        - limit
        - offset
        - total
      type: object
      allOf:
        - $ref: '#/components/schemas/PaginatedResultBase'
      properties:
        data:
          items:
            $ref: '#/components/schemas/Category'
          type: array
          description: Category data
      description: "Categories allow products to be organized into hierarchical structures. \nCategories can have relationships to other parent categories. Each category also can provide a context inherited by subcategories. \nFor example, a category may have an attribute value assigned to it, and any product assigned to the category or a subcategory would inherit the attribute value as long as the product is assigned. \nOnce the product is removed from the category those attribute values would no longer be in the context of the product. Linking of categories is also used for Site hierarchical navigation. \nFor example, inside 'Clothing' you may have 'Mens', and inside 'Mens' you may have 'Pants'. Categories are not *Tags*.\""
    Query:
      minProperties: 1
      maxProperties: 1
      description: |-
        A set of objects that define criteria used to select records. A query can contain one of the following:
        * `MatchAllQuery`
         - Matches all documents.
        * `TermQuery`
         - Matches one or more documents against one or more document fields.
        * `TextQuery`
         - Matches text against one or more fields.
        * `BoolQuery`
         - Allows construction of a logical expression of multiple queries.
        * `FilteredQuery`
         - Allows a filter to be applied to a query.
        * `NestedQuery`
         - Allows you to query on nested documents.
         - _Only supported by some Commerce APIs. For more details, see the endpoint descriptions in the API documentation._
      example:
        filteredQuery:
          query:
            textQuery:
              fields:
                - couponId
              searchPhrase: disabled
          filter:
            termFilter:
              field: enabled
              operator: is
              values:
                - false
      type: object
      properties:
        boolQuery:
          $ref: '#/components/schemas/BoolQuery'
        filteredQuery:
          $ref: '#/components/schemas/FilteredQuery'
        matchAllQuery:
          $ref: '#/components/schemas/MatchAllQuery'
        nestedQuery:
          $ref: '#/components/schemas/NestedQuery'
        termQuery:
          $ref: '#/components/schemas/TermQuery'
        textQuery:
          $ref: '#/components/schemas/TextQuery'
    BoolQuery:
      description: "A boolean query allows construction of full logical expression trees that are composed of other queries (usually term queries and text queries). A boolean query has three sets of clauses:\n  \n  - `must`, which combines as an `AND` operator.\n  - `should`, which combines as an `OR` operator.\n  - `must_not`, which combines as a `NOT` operator.\n  \nIf `must`, `mustNot`, or `should` appear in the same boolean query, they are combined logically using the `AND` operator. For example:\n\n    (must-1 AND must-1 AND ...)\n      AND (should-1 OR should-2 OR ...)\n      AND NOT (must_not-1 OR must_not-2 OR ...)\n"
      type: object
      example:
        value:
          must:
            - textQuery:
                fields:
                  - couponId
                searchPhrase: DEAL
            - textQuery:
                fields:
                  - description
                searchPhrase: Big bargain deal
          mustNot:
            - termQuery:
                fields:
                  - enabled
                operator: is
                values:
                  - false
      properties:
        must:
          description: List of queries to be evaluated as an `AND` operator.
          type: array
          items:
            $ref: '#/components/schemas/Query'
        mustNot:
          description: List of queries to be evaluated as a `NOT` operator.
          type: array
          items:
            $ref: '#/components/schemas/Query'
        should:
          description: List of queries to be evaluated as an `OR` operator.
          type: array
          items:
            $ref: '#/components/schemas/Query'
    Filter:
      minProperties: 1
      maxProperties: 1
      description: |-
        Contains a set of objects that define criteria used to select records. A filter can contain one of the following:
          * `TermFilter`
           - Matches records where a field (or fields) exactly matches some simple value (including `null`).
          * `RangeFilter`
           - Matches records where a field value lies within a specified range.
          * `Range2Filter`
           - Matches records in a specified range across fields.
          * `QueryFilter`
           - Matches records based on a query.
          * `BoolFilter`
           - Provides filtering of records using a set of filters combined using a logical operator.
      example: null
      type: object
      properties:
        boolFilter:
          $ref: '#/components/schemas/BoolFilter'
        queryFilter:
          $ref: '#/components/schemas/QueryFilter'
        range2Filter:
          $ref: '#/components/schemas/Range2Filter'
        rangeFilter:
          $ref: '#/components/schemas/RangeFilter'
        termFilter:
          $ref: '#/components/schemas/TermFilter'
    BoolFilter:
      description: Allows you to combine other filters into (possibly recursive) logical expression trees. A boolean filter is composed of a logical operator (`AND`, `OR`, `NOT`) and a list of filters that the operator relates to. Multiple filters can be negated with a single `NOT` operator, even when the filters are combined with the `AND` operator.
      example:
        value:
          operator: and
          filters:
            - termFilter:
                field: id
                operator: is
                values:
                  - myId
            - termFilter:
                field: couponId
                operator: is
                values:
                  - couponOne
      type: object
      properties:
        filters:
          description: A list of filters that are logically combined by an operator.
          type: array
          items:
            $ref: '#/components/schemas/Filter'
        operator:
          description: The logical operator that is used to combine the filters.
          enum:
            - and
            - or
            - not
          type: string
          example: and
      required:
        - operator
    QueryFilter:
      description: Wraps any query and allows it to be used as a filter.
      type: object
      properties:
        query:
          $ref: '#/components/schemas/Query'
      required:
        - query
    Field:
      description: Name of the field. Might be a custom field name prefixed with c_.
      maxLength: 260
      type: string
      example: couponId
    Range2Filter:
      description: |-
        Allows you to restrict a search result to hits where a range defined by specified attributes has a certain relationship to a specified range.

        The first range (R1) is defined by a pair of attributes (`fromField` and `toField`) that specify the extent of a range, such as attributes `validFrom` and `validTo`.

        The second range (R2) is defined by `fromValue` and `toValue`.

        The filter mode specifies the method used to compare the two ranges:

        * `overlap`: R1 overlaps fully or partially with R2.
        * `containing`: R1 contains R2.
        * `contained`: R1 is contained in R2.

        The range filter supports several value types, and relies on the natural sorting of the value type for range interpretation. Value ranges can be open-ended, but only at one end of the range. You can configure whether the lower bounds and upper bounds are inclusive or exclusive.

        A range 2 filter is useful for general restrictions that can be shared between searches (like a static date range) because the filter result is cached in memory. Range filters are not appropriate if the range is expected to be different for every query (for example, if the user controls the date range down to the hour via a UI control). Range filters are inclusive by default.
      example:
        fromField: validFrom
        toField: validTo
        filterMode: overlap
        fromValue: '2007-01-01T00:00:00.000Z'
        toValue: '2017-01-01T00:00:00.000Z'
      type: object
      properties:
        filterMode:
          default: overlap
          example: overlap
          description: 'Compare mode: overlap, containing, or contained.'
          enum:
            - overlap
            - containing
            - contained
          type: string
        fromField:
          description: The field name of the field that starts the first range.
          example: validFrom
          allOf:
            - $ref: '#/components/schemas/Field'
        fromInclusive:
          default: true
          example: true
          description: A flag indicating if the lower bound of the second range is inclusive. To make the lower bound exclusive, set to `false`.
          type: boolean
        fromValue:
          description: The lower bound of the second range. If not specified, the range is open-ended with respect to the lower bound. You can't leave both the lower and upper bounds open-ended.
          example: '2007-01-01T00:00:00.000Z'
        toField:
          description: The field name of the field that ends the first range.
          example: validTo
          allOf:
            - $ref: '#/components/schemas/Field'
        toInclusive:
          default: true
          example: true
          description: A flag indicating if the upper bound of the second range is inclusive. To make the lower bound exclusive, set to `false`.
          type: boolean
        toValue:
          description: The upper bound of the second range. If not specified, the range is open-ended with respect to the upper bound. You can't leave both the upper and lower bounds open-ended.
          example: '2017-01-01T00:00:00.000Z'
      required:
        - fromField
        - toField
    RangeFilter:
      description: |-
        Allows you to restrict a search result to hits that have values for a given attribute that fall within a given value range. The range filter supports several value types and relies on the natural sorting of the value type for range interpretation. Value ranges can be open-ended, but only at one end of the range. You can configure whether the lower bounds and upper bounds are inclusive or exclusive.

        A range filter is useful for general restrictions that can be shared between searches (like a static date range) because the filter result is cached in memory. Range filters are not appropriate if the range is expected to be different for every query (for example, if the user controls the date range down to the hour via a UI control). Range filters are inclusive by default.
      type: object
      properties:
        field:
          example: validFrom
          description: The search field.
          allOf:
            - $ref: '#/components/schemas/Field'
        from:
          description: The lower bound of the filter range. If not specified, the range is open-ended with respect to the lower bound. You can't leave both the lower and upper bounds open-ended.
          example: '2007-01-01T00:00:00.000Z'
        fromInclusive:
          default: true
          example: true
          description: A flag indicating if the lower bound of the range is inclusive. To make the lower bound exclusive, set to `false`.
          type: boolean
        to:
          description: The upper bound of the filter range. If not specified, the range is open-ended with respect to the upper bound. You can't leave both the upper and lower bounds open-ended.
          example: '2017-01-01T00:00:00.000Z'
        toInclusive:
          default: true
          example: true
          description: A flag indicating if the upper bound of the range is inclusive. To make the upper bound exclusive, set to `false`.
          type: boolean
      required:
        - field
    TermFilter:
      description: Allows you to restrict a search result to hits that match exactly one of the values configured for the filter. A term filter is useful for general restrictions that can be shared between searches. Use term filters whenever the criteria you filter on is a shared property of multiple searches (for example, like filtering by an order status). Use term filters for fields that have a discrete and small set of values only.
      example:
        field: id
        operator: is
        values:
          - myId
      type: object
      properties:
        field:
          description: The filter field.
          allOf:
            - $ref: '#/components/schemas/Field'
        operator:
          description: The operator used to compare the field's values with the given values.
          example: is
          enum:
            - is
            - one_of
            - is_null
            - is_not_null
            - less
            - greater
            - not_in
            - neq
          type: string
        values:
          description: The filter values.
          type: array
          items:
            type: string
            example: myId
      required:
        - field
        - operator
    FilteredQuery:
      description: Allows to filter the result of a possibly complex query using a possibly complex filter.
      example:
        query:
          textQuery:
            fields:
              - couponId
            searchPhrase: disabled
        filter:
          termFilter:
            field: enabled
            operator: is
            values:
              - false
      type: object
      properties:
        filter:
          $ref: '#/components/schemas/Filter'
        query:
          $ref: '#/components/schemas/Query'
      required:
        - filter
        - query
    MatchAllQuery:
      description: Matches all documents (namespace and document type). This query comes in handy if you just want to filter a search result or really do not have any constraints.
      type: object
    NestedQuery:
      description: "Allows you to query nested documents that are part of a larger document. Say, for example, that you have a main product with variations in one big document, and you want to constrain a search to main products that have variations that match multiple constraints. \n\nA `NestedQuery` is only supported by some Commerce APIs. For more details, see the endpoint descriptions in the API documentation.\n"
      example:
        path: order.shippingAddresses
        query:
          boolQuery:
            must:
              - boolQuery:
                  must:
                    - termQuery:
                        fields:
                          - order.shippingAddresses.firstName
                        operator: is
                        values:
                          - John
              - boolQuery:
                  must:
                    - termQuery:
                        fields:
                          - order.shippingAddresses.lastName
                        operator: is
                        values:
                          - Doe
        scoreMode: avg
      type: object
      properties:
        path:
          description: The path to the nested document.
          type: string
          example: order.shippingAddresses
          maxLength: 2048
        query:
          $ref: '#/components/schemas/Query'
        scoreMode:
          description: Indicates how scores for matching child objects affect the root parent documentâ€™s relevance score.
          enum:
            - avg
            - total
            - max
            - none
          type: string
          example: avg
      required:
        - path
        - query
    TermQuery:
      description: |-
        A term query matches one or more values against one or more document fields. A document is considered a hit if one of the values matches exactly with at least one of the given fields. The operator `is` can only take one value, while `one_of` can take multiple values. If multiple fields are specified, they are combined using a logical `OR` operator.

        **Limitations:**

        * The `greater` and `less` operators are not supported under certain conditions. Both operators are permitted unless the API documentation states otherwise.
        * A subset of Commerce APIs handle queries with multiple fields differently. If the query has multiple fields, the query is internally handled as a logical `OR` of `DisjointMaxQueries` (with the dismax matching a value against all fields). The dismax makes sure that a document carrying a single term in multiple fields does not get higher scores than a document matching multiple terms in multiple fields.
      type: object
      properties:
        fields:
          minItems: 1
          description: The document fields that the values are matched against, combined with the operator.
          type: array
          items:
            $ref: '#/components/schemas/Field'
        operator:
          description: Returns the operator to use for the term query.
          enum:
            - is
            - one_of
            - is_null
            - is_not_null
            - less
            - greater
            - not_in
            - neq
          type: string
          example: is
        values:
          description: The values that the fields are compared against, combined with the operator.
          type: array
          items:
            type: string
            example: myCouponId
      required:
        - fields
        - operator
    TextQuery:
      description: A text query is used to match some text (for example, a search phrase possibly consisting of multiple terms) against one or more fields. When multiple fields are provided, the phrase conceptually forms a logical `OR` over the fields. In this case, the terms of the phrase basically have to match within the text, that would result in concatenating all given fields.
      example:
        fields:
          - couponId
        searchPhrase: limit
      type: object
      properties:
        fields:
          minItems: 1
          description: The document fields that the search phrase matches against.
          type: array
          items:
            $ref: '#/components/schemas/Field'
        searchPhrase:
          description: A search phrase, which can include multiple terms separated by spaces.
          type: string
          example: campaign summer
      required:
        - fields
        - searchPhrase
    Sort:
      description: Document representing a sort request. Each API has a different default sort configuration that can be modified in the request.
      example:
        field: couponId
        sortOrder: desc
      type: object
      properties:
        field:
          description: The name of the field to sort on.
          allOf:
            - $ref: '#/components/schemas/String256'
        sortOrder:
          default: asc
          description: The sort order to be applied when sorting. When omitted, the default sort order (asc) is used.
          example: asc
          enum:
            - asc
            - desc
          type: string
      required:
        - field
    SearchRequest:
      description: Document representing a search request for retrieving items within the Data API. The query is a potentially complex set of expressions. The fields and expands that each query supports are defined within the search resource.
      type: object
      properties:
        limit:
          description: Maximum records to retrieve per request, not to exceed 200.
          example: 10
          maximum: 200
          allOf:
            - $ref: '#/components/schemas/Limit'
        query:
          $ref: '#/components/schemas/Query'
        sorts:
          description: The list of sort clauses configured for the search request. Sort clauses are optional. See the description of the search endpoint for details on the default sorting behavior that is used when explicit sorts are not passed.
          type: array
          items:
            $ref: '#/components/schemas/Sort'
        offset:
          $ref: '#/components/schemas/Offset'
      required:
        - query
    CategoryProductAssignmentSearchRequest:
      required:
        - query
      type: object
      allOf:
        - $ref: '#/components/schemas/SearchRequest'
      description: Document representing a search request for retrieving items within the Data API. The query is a potentially complex set of expressions. The fields and expands that each query supports are defined within the search resource.
      example:
        limit: 4
        query:
          textQuery:
            fields:
              - id
              - description
            searchPhrase: campaign
        offset: 2
    PaginatedSearchResult:
      description: Document representing a generic search result. Each search resource should extend this to define what is returned in the `hits`.
      properties:
        query:
          $ref: '#/components/schemas/Query'
        sorts:
          description: The sorting that was applied to the result.
          type: array
          items:
            $ref: '#/components/schemas/Sort'
        hits:
          description: The sorted array of search hits. Can be empty.
          type: array
          items:
            type: object
      allOf:
        - $ref: '#/components/schemas/PaginatedResultBase'
      type: object
      required:
        - query
      example:
        limit: 1
        hits:
          - couponId: coupon1
            creationDate: '2019-10-20T12:00:00Z'
            description: This coupon is used to give 10% off stuff.
            enabled: false
            exportedCodeCount: 0
            lastModified: '2019-10-30T04:23:59Z'
            redemptionCount: 3
            redemptionLimits:
              limitPerCode: 1
              limitPerCustomer: 1
              limitPerTimeFrame:
                limit: 2
                redemptionTimeFrame: 24
            singleCode: MyCode
            systemCodesConfig:
              codePrefix: SG
              numberOfCodes: 500000
            totalCodesCount: 50
            type: single_code
        query:
          textQuery:
            fields:
              - id
              - description
            searchPhrase: stuff
        sorts:
          - field: couponId
            sortOrder: desc
        offset: 2
        total: 8
    CatalogCategoryId:
      required:
        - catalogId
        - categoryId
      type: object
      properties:
        catalogId:
          $ref: '#/components/schemas/CatalogId'
        categoryId:
          $ref: '#/components/schemas/CategoryId'
      description: Document representing a catalog category ID.
    Product:
      required:
        - id
      type: object
      properties:
        assignedCategories:
          items:
            $ref: '#/components/schemas/CatalogCategoryId'
          type: array
          description: The catalog categories that the product is assigned to. It is read only.
        ats:
          type: number
          description: The Available To Sell (ATS) inventory value of the product. This is a calculated value.
          format: double
          example: 15
        brand:
          type: string
          description: The brand of the product.
          example: Apple
        bundledProducts:
          items:
            $ref: '#/components/schemas/Product'
          type: array
          description: The array of bundled products which the product includes. It is read only.
        classificationCategory:
          $ref: '#/components/schemas/CatalogCategoryId'
        creationDate:
          type: string
          description: Returns the value of attribute 'creationDate'. It is read only.
          format: date-time
          example: 253402214400
        defaultVariantId:
          type: string
          description: The ID of the product's default variant. It is read only.
          example: apple-ipod-classic-8gb-black
        ean:
          type: string
          description: The European Article Number of the product.
          example: ksdf69w4
        id:
          $ref: '#/components/schemas/ProductId'
        image:
          $ref: '#/components/schemas/MediaFile'
        imageGroups:
          items:
            $ref: '#/components/schemas/ImageGroup'
          type: array
          description: The array of product image groups. It is read only.
        inStock:
          type: boolean
          description: The flag that indicates if the product is in stock, or not. This is a calculated value.
          example: true
        lastModified:
          type: string
          description: Returns the value of attribute 'lastModified'. It is read only.
          format: date-time
          example: 253402214400
        localizedTaxClassId:
          type: object
          additionalProperties: false
          description: The localized tax class identifier of the product.
          example:
            en_US: exempt
        longDescription:
          type: object
          additionalProperties:
            $ref: '#/components/schemas/MarkupText'
          description: The localized long description of the product.
        manufacturerName:
          type: string
          description: The name of the product's manufacturer.
          example: Apple
        manufacturerSku:
          type: string
          description: The SKU of the product's manufacturer.
          example: HSD68J
        master:
          $ref: '#/components/schemas/Master'
        name:
          type: object
          additionalProperties: false
          description: The localized name of the product.
          example:
            en_US: Apple Ipod Classic
        online:
          type: boolean
          description: The flag that indicates if the product is online, or not. This is a calculated value.
          example: true
        onlineFlag:
          type: object
          additionalProperties: false
          description: The site-specific online status of the product.
          example:
            Site1: true
        owningCatalogId:
          type: string
          description: The ID of the catalog that owns the product.
          example: apple-master-catalog
        owningCatalogName:
          type: object
          additionalProperties: false
          description: The localized name of the catalog that owns the product. It is read only.
          example:
            en_US: Apple Master Catalog
        pageDescription:
          type: object
          additionalProperties: false
          description: The localized page description of the product.
          example:
            en_US: Page Description
        pageKeywords:
          type: object
          additionalProperties: false
          description: The localized page keywords of the product.
          example:
            en_US: Keywords
        pageTitle:
          type: object
          additionalProperties: false
          description: The localized page title of the product.
          example:
            en_US: Page Title
        price:
          type: number
          description: The price of the product.
          format: double
          example: 219.99
        priceCurrency:
          type: string
          description: The currency code for a product's price.
          example: USD
        pricePerUnit:
          type: number
          description: The price per unit of the product. This is a read only field.
          format: double
          example: 1
        primaryCategories:
          items:
            $ref: '#/components/schemas/CatalogCategoryId'
          type: array
          description: The primary catalog categories that the product is assigned to. It is read only.
        primaryCategoryId:
          type: string
          description: The ID of the products primary category. This is a read only field. It is read only.
          example: electronics-media-players
        productBundles:
          items:
            $ref: '#/components/schemas/Product'
          type: array
          description: The array of product bundles which the product belongs to. It is read only.
        productOptions:
          items:
            $ref: '#/components/schemas/ProductOption'
          type: array
          description: The array of product options. This is applicable for products of type "option". It is read only.
        productSets:
          items:
            $ref: '#/components/schemas/Product'
          type: array
          description: The array of product sets which the product belongs to. It is read only.
        searchable:
          type: object
          additionalProperties: false
          description: The site-specific searchable status of the product.
          example:
            Site1: true
        setProducts:
          items:
            $ref: '#/components/schemas/Product'
          type: array
          description: The array of set products which the product includes. It is read only.
        shortDescription:
          type: object
          additionalProperties:
            $ref: '#/components/schemas/MarkupText'
          description: The localized short description of the product.
        taxClassId:
          type: string
          description: The tax class identifier of the product.
          example: standard
        type:
          $ref: '#/components/schemas/ProductType'
        unit:
          type: string
          description: The sales unit of the product.
          example: single
        unitMeasure:
          type: string
          description: The unitMeasure of the product.
          example: each
        unitQuantity:
          type: number
          description: The unitQuantity of the product.
          format: double
          example: 15
        upc:
          type: string
          description: The Universal Product Code (UPC) of the product.
          example: 66JSD88JASD
        validFrom:
          type: object
          additionalProperties: false
          description: The valid/online from date of the product.
          example:
            default@SiteGenesis: '2000-05-11T00:00:00.000Z'
        validTo:
          type: object
          additionalProperties: false
          description: The valid/online to date of the product.
          example:
            default@SiteGenesis: '2050-05-11T00:00:00.000Z'
        variants:
          items:
            $ref: '#/components/schemas/Variant'
          type: array
          description: The array of variants of the product. This is applicable for product types "master" and "variationGroup" only. It is read only.
        variationAttributes:
          items:
            $ref: '#/components/schemas/VariationAttribute'
          type: array
          description: |-
            The sorted array of variation attributes assigned to the product. This is applicable for product types "master",
             "variationGroup" and "variant" only. It is read only.
        variationGroups:
          items:
            $ref: '#/components/schemas/VariationGroup'
          type: array
          description: The array of variation groups in the product. This is applicable for product type "master" only. It is read only.
        variationValues:
          type: object
          additionalProperties: false
          description: |-
            The variation values selected for the product in variation attribute id and value pairs. This is applicable for product types "Variant" and
             "VariationGroup" only. It is read only.
          example:
            color: red
            size: 8gb
      description: Any product that is sold, shown alone, and does not have variations such as different sizes or colors. Product that has no reliance on any other product for inheritance. *A product has a SKU and can have a product option, which has a different SKU*.
    ProductId:
      minLength: 1
      maxLength: 100
      type: string
      description: The id (SKU) of the product.
      example: apple-ipod-classic
    MediaFile:
      required:
        - path
      type: object
      properties:
        absUrl:
          type: string
          description: The absolute URL with request protocol.
          example: https://www.example-image.com/images/apple-ipod-classic.jpg
        alt:
          type: object
          additionalProperties: false
          description: The alternative image text.
          example:
            en_US: iPod
        disBaseUrl:
          type: string
          description: The Dynamic Image Service (DIS) base URL for product images only.
          example: https://www.dis-base-url/images/apple-ipod-clasic.jpg
        path:
          type: string
          description: The raw media file path.
          example: /images/apple-ipod-classic.jpg
        title:
          type: object
          additionalProperties: false
          description: The image title.
          example:
            en_US: iPod
      description: Document representing media file.
    VariationAttributeValue:
      required:
        - value
      type: object
      properties:
        description:
          type: object
          additionalProperties: false
          description: The localized description of the variation value.
          example:
            en_US: Red
        image:
          $ref: '#/components/schemas/MediaFile'
        imageSwatch:
          $ref: '#/components/schemas/MediaFile'
        name:
          type: object
          additionalProperties: false
          description: The localized display name of the variation value.
          example:
            color: Red
        orderable:
          type: boolean
          description: A flag indicating whether at least one variant with this variation attribute value is available to sell.
          example: true
        position:
          type: number
          description: The position of the value among all values of a variation attribute.
          format: double
          example: 2
        value:
          minLength: 1
          type: string
          description: The actual variation value.
          example: red
      description: Document representing a variation attribute value.
    VariationAttribute:
      required:
        - attributeDefinitionId
      type: object
      properties:
        attributeDefinitionId:
          type: string
          description: The id of the requested attribute definition.
          example: color
        attributeDefinitionName:
          type: object
          additionalProperties: false
          description: The localized display name of the variation attribute definition.
          example:
            en_US: Color
        defaultValue:
          type: string
          description: Default variation attribute value.
          example: black
        id:
          minLength: 1
          type: string
          description: The ID of the variation attribute.
          example: color
        name:
          type: object
          additionalProperties: false
          description: The localized display name of the variation attribute.
          example:
            en_US: Color
        shared:
          type: boolean
          description: Returns the value of attribute 'shared' if attribute is local or shared.
          example: false
        slicing:
          type: boolean
          description: Returns the value of attribute 'slicing'.
          example: true
        values:
          items:
            $ref: '#/components/schemas/VariationAttributeValue'
          type: array
          description: The sorted array of variation values. This array can be empty.
        variationAttributeType:
          type: string
          description: Variation attribute type.
          example: string
          enum:
            - string
            - int
            - unknown
      description: Document representing a variation attribute.
    ImageGroup:
      required:
        - images
        - viewType
      type: object
      properties:
        images:
          items:
            $ref: '#/components/schemas/MediaFile'
          type: array
          description: The images of the image group.
        variationAttributes:
          items:
            $ref: '#/components/schemas/VariationAttribute'
          type: array
          description: Returns a list of variation attributes applying to this image group.
        viewType:
          type: string
          description: The image view type.
          example: hi-res
      description: Document representing an image group containing a list of images for a particular view type and an optional variation value.
    MarkupText:
      required:
        - markup
        - source
      type: object
      properties:
        markup:
          type: string
          description: The rendered HTML.
          example: ''
        source:
          type: string
          description: The raw markup text.
          example: ''
      description: Document representing markup text.
    Master:
      required:
        - masterId
      type: object
      properties:
        masterId:
          $ref: '#/components/schemas/ProductId'
        orderable:
          type: boolean
          description: A flag indicating whether at least one of the variants is orderable.
          example: true
        price:
          type: number
          description: The minimum sales price of the related variants.
          format: double
          example: 199.99
        priceMax:
          type: number
          description: The maximum sales of related variants.
          format: double
          example: 219.99
        prices:
          type: object
          additionalProperties:
            type: number
            format: double
          description: prices
      description: Representation of a group of variant products by an attribute. This is a non-buyable entity, provides inheritable attributes for it's product variants, and is used for navigation. *Does'nt have a SKU.*
    ISOCurrency:
      pattern: ^[A-Z][A-Z][A-Z]$
      description: A three letter uppercase currency code conforming to the [ISO 4217](https://www.iso.org/iso-4217-currency-codes.html) standard.
      example: USD
      type: string
    NoValue:
      default: N/A
      description: A specialized value indicating the lack of definition of a currency, for example, if the value of the monetary value of the currency is an undefined number.
      example: N/A
      enum:
        - N/A
      type: string
    CurrencyCode:
      description: A three letter uppercase currency code conforming to the [ISO 4217](https://www.iso.org/iso-4217-currency-codes.html) standard, or the string `N/A` indicating that a currency is not applicable.
      example: USD
      oneOf:
        - $ref: '#/components/schemas/ISOCurrency'
        - $ref: '#/components/schemas/NoValue'
    Money:
      description: A combination of a Currency and an amount of that Currency.
      type: object
      properties:
        currencyMnemonic:
          $ref: '#/components/schemas/CurrencyCode'
        value:
          format: double
          description: The amount of money for the given currency.
          example: 1234.56
          type: number
    ProductOptionValue:
      required:
        - id
        - value
      type: object
      properties:
        defaultProductOptionValue:
          type: boolean
          description: Flag indicating if the product option value is the default value for the product option.
          example: true
        id:
          minLength: 1
          type: string
          description: The ID of the product option value.
          example: 5-year
        optionPrices:
          items:
            $ref: '#/components/schemas/Money'
          type: array
          description: The list of prices in the product option value.
        skuExtension:
          type: string
          description: The SKU extension of the product option value.
          example: extension
        value:
          type: object
          additionalProperties: false
          description: The localized value of the product option.
          example:
            en_US: 5 Year Warranty
      description: Document representing a product option Value
    ProductOption:
      required:
        - id
      type: object
      properties:
        customName:
          type: object
          additionalProperties: false
          description: The localized custom name of the product option.
          example:
            en_US: Warranty
        defaultProductOptionValue:
          type: string
          description: The default product option value.
          example: 5-years
        description:
          type: object
          additionalProperties: false
          description: The localized description of the product option.
          example:
            en_US: Option Description
        id:
          minLength: 1
          type: string
          description: The object attribute definition ID which is also the identifier for the product option.
          example: warranty
        image:
          $ref: '#/components/schemas/MediaFile'
        name:
          type: string
          description: The name of the object attribute definition.
          example: Warranty
        selectedOptionValue:
          type: string
          description: The selected option value of the product option.
          example: 2-years
        shared:
          type: boolean
          description: The flag that indicates if the product option is shared or local.
          example: false
        sortingMode:
          type: string
          description: The sorting mode for the product option values.
          example: byoptionprice
          enum:
            - byexplicitorder
            - byoptionprice
        values:
          items:
            $ref: '#/components/schemas/ProductOptionValue'
          type: array
          description: The sorted array of values of the product option.
      description: Product options enable you to sell configurable products that have optional accessories, upgrades, or additional services. Options are always purchased with a product and can't be purchased separately.
    ProductType:
      required:
        - master
      type: object
      properties:
        bundle:
          type: boolean
          description: A flag indicating whether the product is a bundle.
          example: false
        bundled:
          type: boolean
          description: A flag indicating whether the product is bundled.
          example: false
        item:
          type: boolean
          description: A flag indicating whether the product is a standard item.
          example: false
        master:
          type: boolean
          description: A flag indicating whether the product is a master.
          example: true
        option:
          type: boolean
          description: A flag indicating whether the product is an option.
          example: false
        partOfProductSet:
          type: boolean
          description: A flag indicating whether the product is part of product set.
          example: false
        partOfRetailSet:
          type: boolean
          description: A flag indicating whether the product is part of retail set.
          example: false
        retailSet:
          type: boolean
          description: A flag indicating whether the product is a retail set.
          example: false
        set:
          type: boolean
          description: A flag indicating whether the product is a set.
          example: false
        variant:
          type: boolean
          description: A flag indicating whether the product is a variant.
          example: false
        variationGroup:
          type: boolean
          description: A flag indicating whether the product is a variation group.
          example: false
      description: Document representing a product type.
    Variant:
      required:
        - productId
      type: object
      properties:
        ats:
          type: number
          description: The Available To Sell (ATS) inventory value of the product. This is a calculated value.
          format: double
          example: 10
        defaultProductVariation:
          type: boolean
          description: A flag indicating whether the variant is a default variant.
          example: true
        image:
          $ref: '#/components/schemas/MediaFile'
        inStock:
          type: boolean
          description: True if the product is in stock, false if not.
          example: true
        online:
          type: boolean
          description: |-
            If the product is currently online.
             True if online, false if not.
          example: true
        orderable:
          type: boolean
          description: A flag indicating whether the variant is orderable.
          example: true
        price:
          type: number
          description: The sales price of the variant.
          format: double
          example: 29.99
        priceCurrency:
          type: string
          description: Currency code for the price of the product.
          example: USD
        productId:
          $ref: '#/components/schemas/ProductId'
        searchable:
          type: object
          additionalProperties: false
          description: A flag indicating whether the variant is searchable.
          example:
            Site1: true
        variationAttributes:
          items:
            $ref: '#/components/schemas/VariationAttribute'
          type: array
          description: Variation attributes.
        variationValues:
          type: object
          additionalProperties: false
          description: The actual variation attribute ID - value pairs.
          example:
            color: black
      description: A product which is a variation within a master product that describes different colors, sizes, or other variation attributes. *Has a SKU*
    VariationGroup:
      required:
        - productId
      type: object
      properties:
        orderable:
          type: boolean
          description: A flag indicating whether the variation group is orderable.
          example: true
        price:
          type: number
          description: The sales price of the variation group.
          format: double
          example: 229.99
        productId:
          maxLength: 100
          minLength: 1
          type: string
          description: The ID (SKU) of the variation group.
          example: apple-ipod-classic-black
        variationValues:
          type: object
          additionalProperties: false
          description: The actual variation attribute ID - value pairs.
          example:
            color: red
      description: Representation of a group of variant products by an attribute. This is a non-buyable entity,  provides inheritable attributes for it's product variants, and is used for navigation. *Doesn't have a SKU.*
    CategoryProductAssignment:
      required:
        - catalogId
        - categoryId
        - productId
      type: object
      properties:
        catalogId:
          allOf:
            - $ref: '#/components/schemas/CatalogId'
          description: The ID of the catalog.
          example: apparel-catalog
        categoryId:
          allOf:
            - $ref: '#/components/schemas/CategoryId'
          description: The ID of the category.
          example: mens
        creationDate:
          type: string
          description: Returns the value of attribute 'creationDate'. It is read only.
          format: date-time
          maxLength: 30
          example: 253402214400
        lastModified:
          type: string
          description: Returns the value of attribute 'lastModified'. It is read only.
          format: date-time
          maxLength: 30
          example: 253402214400
        owningCatalogName:
          type: object
          additionalProperties:
            type: string
          description: The name of the catalog that owns the product.
        position:
          type: number
          description: The position of product category assignment.
          format: double
          example: 2
        product:
          $ref: '#/components/schemas/Product'
        productId:
          $ref: '#/components/schemas/ProductId'
        productName:
          type: object
          description: The name of the product.
          example:
            default: Summer Bomber Jacket
      description: Document representing a category product assignment.
    CategoryProductAssignmentSearchResult:
      required:
        - limit
        - offset
        - total
        - hits
      type: object
      allOf:
        - $ref: '#/components/schemas/PaginatedSearchResult'
      properties:
        hits:
          items:
            $ref: '#/components/schemas/CategoryProductAssignment'
          type: array
          description: The sorted array of search hits. This array can be empty.
      description: Document representing a product search result.
      example:
        value:
          - limit: 1
            hits:
              - couponId: MyCoupon
                creationDate: '2019-10-20T12:00:00Z'
                description: This coupon is used to give 10% off stuff.
                enabled: false
                exportedCodeCount: 0
                lastModified: '2019-10-30T04:23:59Z'
                redemptionCount: 3
                redemptionLimits:
                  limitPerCode: 1
                  limitPerCustomer: 1
                  limitPerTimeFrame:
                    limit: 2
                    redemptionTimeFrame: 24
                singleCode: MyCode
                systemCodesConfig:
                  codePrefix: SG
                  numberOfCodes: 500000
                totalCodesCount: 50
                type: single_code
            query:
              textQuery:
                fields:
                  - id
                  - description
                searchPhrase: stuff
            sorts:
              - field: couponId
                sortOrder: desc
            offset: 2
            total: 8
    ExecutionJobStatusResult:
      required:
        - jobStatus
      type: object
      properties:
        type:
          type: string
          description: The type of execution job.
          example: evaluation
          enum:
            - evaluation
            - execution
        assignedCount:
          type: integer
          description: Indicates total number of products assigned by the execution job.
          example: 100
        unassignedCount:
          type: integer
          description: Indicates total number of products unassigned by the execution job.
          example: 100
        matchedCount:
          type: integer
          description: Indicates total number of products evaluated and matched by the evaluation job.
          example: 100
        jobStatus:
          type: string
          description: Indicates the status of the rules execution job (that is, indicates whether the job completed successfully or an error occurred).
          example: success
          enum:
            - inProgress
            - success
            - error
            - unavailable
        message:
          type: string
          description: A description of any errors, failures, and exceptions that caused the job to fail.
          example: Job execution failed to start.
        lastRunDate:
          type: string
          description: The date that the rules categorization job was last run for given catalog and category.
          format: date-time
          maxLength: 30
          example: 253402214400
        productIds:
          items:
            $ref: '#/components/schemas/String256'
          type: array
          description: The list of matched product IDs returned by the execution job.
          example:
            - 25772717
            - 25772792
        limit:
          $ref: '#/components/schemas/Limit'
        offset:
          $ref: '#/components/schemas/Offset'
      description: The status of the execution job.
    ExecutionRequest:
      required:
        - evaluation
      type: object
      properties:
        evaluation:
          type: boolean
          description: A flag indicating whether only an evaluation job needs to be performed.
          default: true
          example: true
      description: The document representing the execution Request for categorization.
    ExcludedProduct:
      required:
        - productId
      type: object
      properties:
        productId:
          $ref: '#/components/schemas/ProductId'
      description: The excluded product record.
    ExcludedProductsResult:
      required:
        - limit
        - total
      type: object
      properties:
        limit:
          $ref: '#/components/schemas/Limit'
        data:
          items:
            $ref: '#/components/schemas/ExcludedProduct'
          type: array
          description: The list of the excluded products. This can be empty.
        total:
          $ref: '#/components/schemas/Total'
      description: The list of excluded products.
    ExcludedProductRequest:
      required:
        - data
      type: object
      properties:
        data:
          items:
            $ref: '#/components/schemas/ExcludedProduct'
          type: array
          description: The list of the excluded products.
      description: The excluded product record
    Condition:
      required:
        - attributeKey
        - attributeValue
        - id
        - operator
      type: object
      properties:
        id:
          description: The ID of the condition.
          example: NameCondition
          allOf:
            - $ref: '#/components/schemas/String256'
        attributeKey:
          allOf:
            - $ref: '#/components/schemas/String256'
          description: The key of the attribute(system or custom). This represents the ID of the attribute.
          example: name
        attributeName:
          allOf:
            - $ref: '#/components/schemas/String4000'
          description: The human-readable name of the attribute(system or custom). This is a read-only field.
          example: name
        attributeValue:
          items:
            allOf:
              - $ref: '#/components/schemas/String4000'
          type: array
          description: The value of the attribute.
          example:
            - Shirt
        operator:
          type: string
          description: The operator for the condition.
          example: starts_with
          enum:
            - starts_with
            - contains
            - equals
            - not_equals
            - greater_than
            - less_than
            - is_one_of
            - not_one_of
            - is_defined
            - is_not_defined
      description: Document representing a condition.
    Rule:
      required:
        - enabled
        - exclusion
        - id
      type: object
      properties:
        id:
          allOf:
            - $ref: '#/components/schemas/String256'
          description: The ID of the rule.
          example: VHRule
        enabled:
          type: boolean
          description: A flag indicating whether this rule is enabled.
          default: false
          example: false
        exclusion:
          type: boolean
          description: A flag indicating whether this rule is an exclusion.
          default: false
          example: false
        categorizationLocaleId:
          type: string
          maxLength: 10
          description: |
            This field indicates the locale to be used for evaluating rules/conditions for the entire category. Note: this applies to all the rules for that category, and the last modification for this field will apply to the entire ruleset for that category.
          example: en-US
        categorizationClassificationFlag:
          type: boolean
          description: |
            This field indicates if the matching products assigned as a result of the rules run will be given the tag for classification category. Note: this applies to all the rules for that category, and the last modification for this field will apply to the entire ruleset for that category.
          default: false
          example: true
        categorizationPrimaryFlag:
          type: boolean
          description: |
            This field indicates if the matching products assigned as a result of the rules run will be given the tag for primary category. Note: this applies to all the rules for that category, and the last modification for this field will apply to the entire ruleset for that category.
          default: false
          example: true
        conditions:
          items:
            $ref: '#/components/schemas/Condition'
          type: array
          description: The list of conditions for the rule.
      description: Document representing a categorization rule.
    RulesResult:
      required:
        - limit
        - total
      type: object
      allOf:
        - $ref: '#/components/schemas/ResultBase'
      properties:
        data:
          items:
            $ref: '#/components/schemas/Rule'
          type: array
          description: The list of rules. This can be empty. *Note* - If the exclusion attribute is set to true, the rule is designated as an Exclusion rule. Any item matching an Exclusion rule is omitted from the final result set.
      description: Result document containing an array of rules.
    RulesRequest:
      type: object
      properties:
        data:
          items:
            $ref: '#/components/schemas/Rule'
          type: array
          description: The list of rules. This can be empty.
      description: Request document containing an array of rules for saving multiple rules.
    RuleRequest:
      required:
        - enabled
        - exclusion
        - id
      type: object
      properties:
        id:
          allOf:
            - $ref: '#/components/schemas/String256'
          description: The ID of the rule.
          example: VHRule
        enabled:
          type: boolean
          description: A flag indicating whether this rule is enabled.
          default: false
          example: false
        exclusion:
          type: boolean
          description: A flag indicating whether this rule is an exclusion.
          default: false
          example: false
        categorizationLocaleId:
          type: string
          maxLength: 10
          description: |
            This field indicates the locale to be used for evaluating rules/conditions for the entire category. Note: this applies to all the rules for that category, and the last modification for this field will apply to the entire ruleset for that category.
          example: en-US
        categorizationClassificationFlag:
          type: boolean
          description: |
            This field indicates if the matching products assigned as a result of the rules run will be given the tag for classification category. Note: this applies to all the rules for that category, and the last modification for this field will apply to the entire ruleset for that category.
          default: false
          example: true
        categorizationPrimaryFlag:
          type: boolean
          description: |
            This field indicates if the matching products assigned as a result of the rules run will be given the tag for primary category. Note: this applies to all the rules for that category, and the last modification for this field will apply to the entire ruleset for that category.
          default: false
          example: true
      description: This document represents the request body while creating a rule.
    ConditionsResult:
      required:
        - limit
        - total
      type: object
      properties:
        limit:
          $ref: '#/components/schemas/Limit'
        conditions:
          items:
            $ref: '#/components/schemas/Condition'
          type: array
          description: The list of conditions for a rule. This can be empty.
        total:
          $ref: '#/components/schemas/Total'
      description: Result document containing an array of conditions.
    CatalogCategorySearchRequest:
      required:
        - query
      type: object
      allOf:
        - $ref: '#/components/schemas/SearchRequest'
      description: Document representing a search request for retrieving items within the Data API. The query is a potentially complex set of expressions. The fields and expands that each query supports are defined within the search resource.
      example:
        limit: 4
        query:
          textQuery:
            fields:
              - id
              - description
            searchPhrase: campaign
        offset: 2
    CategorySearchResult:
      required:
        - limit
        - offset
        - total
        - hits
      type: object
      allOf:
        - $ref: '#/components/schemas/PaginatedSearchResult'
      properties:
        hits:
          items:
            $ref: '#/components/schemas/Category'
          type: array
          description: The sorted array of search hits. Can be empty.
      description: Document representing a catalog search result.
      example:
        value:
          - limit: 1
            hits:
              - couponId: MyCoupon
                creationDate: '2019-10-20T12:00:00Z'
                description: This coupon is used to give 10% off stuff.
                enabled: false
                exportedCodeCount: 0
                lastModified: '2019-10-30T04:23:59Z'
                redemptionCount: 3
                redemptionLimits:
                  limitPerCode: 1
                  limitPerCustomer: 1
                  limitPerTimeFrame:
                    limit: 2
                    redemptionTimeFrame: 24
                singleCode: MyCode
                systemCodesConfig:
                  codePrefix: SG
                  numberOfCodes: 500000
                totalCodesCount: 50
                type: single_code
            query:
              textQuery:
                fields:
                  - id
                  - description
                searchPhrase: stuff
            sorts:
              - field: couponId
                sortOrder: desc
            offset: 2
            total: 8
    CatalogSearchRequest:
      required:
        - query
      type: object
      allOf:
        - $ref: '#/components/schemas/SearchRequest'
      description: Document representing a search request for retrieving items within the Data API. The query is a potentially complex set of expressions. The fields and expands that each query supports are defined within the search resource.
      example:
        limit: 4
        query:
          textQuery:
            fields:
              - id
              - description
            searchPhrase: campaign
        offset: 2
    CatalogSearchResult:
      required:
        - limit
        - offset
        - total
        - hits
      type: object
      allOf:
        - $ref: '#/components/schemas/PaginatedSearchResult'
      properties:
        hits:
          items:
            $ref: '#/components/schemas/Catalog'
          type: array
          description: The sorted array of catalog search hits. Can be empty.
      description: Document representing a catalog search result.
      example:
        value:
          - limit: 1
            hits:
              - couponId: MyCoupon
                creationDate: '2019-10-20T12:00:00Z'
                description: This coupon is used to give 10% off stuff.
                enabled: false
                exportedCodeCount: 0
                lastModified: '2019-10-30T04:23:59Z'
                redemptionCount: 3
                redemptionLimits:
                  limitPerCode: 1
                  limitPerCustomer: 1
                  limitPerTimeFrame:
                    limit: 2
                    redemptionTimeFrame: 24
                singleCode: MyCode
                systemCodesConfig:
                  codePrefix: SG
                  numberOfCodes: 500000
                totalCodesCount: 50
                type: single_code
            query:
              textQuery:
                fields:
                  - id
                  - description
                searchPhrase: stuff
            sorts:
              - field: couponId
                sortOrder: desc
            offset: 2
            total: 8
    CategorySearchRequest:
      required:
        - query
      type: object
      allOf:
        - $ref: '#/components/schemas/SearchRequest'
      description: Document representing a search request for retrieving items within the Data API. The query is a potentially complex set of expressions. The fields and expands that each query supports are defined within the search resource.
      example:
        limit: 4
        query:
          textQuery:
            fields:
              - id
              - description
            searchPhrase: campaign
        offset: 2
  parameters:
    organizationId:
      description: An identifier for the organization the request is being made by
      name: organizationId
      in: path
      required: true
      example: f_ecom_zzxy_prd
      schema:
        $ref: '#/components/schemas/OrganizationId'
    catalogId:
      name: catalogId
      in: path
      description: The ID of the requested catalog.
      required: true
      schema:
        $ref: '#/components/schemas/CatalogId'
    categoryId:
      name: categoryId
      in: path
      description: The ID of the category to be created.
      required: true
      schema:
        $ref: '#/components/schemas/CategoryId'
    levels:
      name: levels
      in: query
      description: The level number.
      required: false
      schema:
        minimum: 0
        type: integer
        format: int32
        example: 1
    siteId:
      description: The site context.
      name: siteId
      in: query
      required: false
      schema:
        $ref: '#/components/schemas/SiteId'
    productId:
      name: productId
      in: path
      description: The ID (SKU) of the requested product to assign.
      required: true
      schema:
        $ref: '#/components/schemas/ProductId'
    limit:
      description: Maximum records to retrieve per request, not to exceed the maximum defined. A limit must be at least 1 so at least one record is returned (if any match the criteria).
      name: limit
      in: query
      examples:
        limit:
          value: 25
      schema:
        $ref: '#/components/schemas/Limit'
    offset:
      description: The zero-based index of the first hit/data to include in the result.
      name: offset
      in: query
      examples:
        offset:
          value: 25
      schema:
        $ref: '#/components/schemas/Offset'
    ruleId:
      name: ruleId
      in: path
      description: The Id of the rule
      required: true
      schema:
        allOf:
          - $ref: '#/components/schemas/String256'
        example: VHRule
    conditionId:
      name: conditionId
      in: path
      description: The Id of the condition.
      required: true
      schema:
        example: NameCondition
        allOf:
          - $ref: '#/components/schemas/String256'
  examples:
    Catalogs:
      value:
        limit: 2
        data:
          - id: apparel-catalog
          - id: electronics-catalog
        offset: 0
        total: 2
    getCategoryFromCatalog400:
      value:
        title: Bad Request
        type: https://api.commercecloud.salesforce.com/documentation/error/v1/errors/invalid-query-parameter
        detail: offset-BAD-REQUEST parameters are not defined in RAML.
    getCatalog401:
      value:
        title: Invalid Access Token
        type: https://api.commercecloud.salesforce.com/documentation/error/v1/errors/invalid-access-token
        detail: The request is unauthorized, the access token is invalid.
        accessToken: iI6IjEiLCJhbGciOiJIUzI1NiIsInR5cCI6Ik
    Catalog:
      value:
        categoryCount: 30
        creationDate: '2019-02-21T22:09:39.000Z'
        id: apparel-catalog
        lastModified: '2019-02-21T22:09:39.000Z'
        name:
          default: Apparel Master Catalog
        online: true
        recommendationCount: 0
        rootCategory: root
    getCatalog404:
      value:
        title: Catalog Not Found
        type: https://api.commercecloud.salesforce.com/documentation/error/v1/errors/catalog-not-found
        detail: No catalog with ID '095c2082-5f2a-47d5-bc73-27d06c5c9db8' could be found.
        catalogId: 095c2082-5f2a-47d5-bc73-27d06c5c9db8
    CatalogBody:
      value:
        id: apparel-catalog
        online: true
    Categories:
      value:
        limit: 3
        data:
          - id: kids-wear
          - id: mens
          - id: mens-accessories-luggage
        offset: 0
        total: 3
    CategoryExample:
      value:
        catalogId: apparel-catalog
        categories:
          - catalogId: apparel-catalog
            creationDate: '2019-02-21T22:09:40.000Z'
            id: mens-accessories
            lastModified: '2019-02-21T22:10:14.000Z'
            name:
              default: Accessories
            online: true
            parentCategoryId: mens
          - catalogId: apparel-catalog
            creationDate: '2019-02-21T22:09:40.000Z'
            id: mens-clothing
            lastModified: '2019-02-21T22:10:15.000Z'
            name:
              default: Clothing
            online: true
            parentCategoryId: mens
        creationDate: '2019-02-21T22:09:40.000Z'
        id: mens
        lastModified: '2019-09-04T15:07:14.000Z'
        online: true
        parentCategoryId: root
        position: 2
    CategoryBody:
      value:
        catalogId: apparel-catalog
        id: mens
        online: true
    SingleCategory:
      value:
        catalogId: apparel-catalog
        creationDate: '2019-02-21T22:09:40.000Z'
        id: mens
        lastModified: '2019-09-04T15:07:14.000Z'
        online: true
        parentCategoryId: root
        position: 2
    ProductAssignmentBody:
      value:
        query:
          termQuery:
            fields:
              - product_id
            operator: is
            values:
              - NTOSimpleBundle
        expand:
          - product_categories
          - product_images
    CategoryProductAssignment:
      value:
        hits:
          - catalogId: NTOCatalog
            categoryId: NTOFirstClassCategory
            creationDate: '2024-05-27T10:11:48.000Z'
            lastModified: '2024-05-27T10:11:48.000Z'
            owningCatalogName:
              default: NTO Product Image Catalog
            product:
              assignedCategories:
                - catalogId: NTOCatalog
                  categoryId: NTOFirstClassCategory
              brand: Wapi brand
              creationDate: '2024-05-27T10:11:45.000Z'
              id: NTOSimpleBundle
              image:
                absUrl: https://www.yoursecureimageserver.com/foo/bar/bundle_image_detail.jpg
                alt:
                  default: ALT bundle image detail
                path: bundle_image_detail.jpg
                title:
                  default: TITLE bundle image detail
              onlineFlag:
                default: true
              searchable:
                default: true
            productId: NTOSimpleBundle
            productName:
              default: Simple Web API Bundle
        query:
          termQuery:
            fields:
              - product_id
            operator: is
            values:
              - NTOSimpleBundle
        limit: 1
        offset: 0
        total: 1
    CatalogCategoryPrdAssignmentExample:
      value:
        catalogId: apparel-catalog
        categoryId: kids-wear
        owningCatalogName:
          default: Electronics Master Catalog
        position: 1
        productId: apple-ipod-shuffle
        productName:
          default: Apple iPod Shuffle
    CatalogCategoryProdAssignmentBody:
      value:
        catalogId: apparel-catalog
        categoryId: kids-wear
        productId: apple-ipod-shuffle
        position: 1
    ExecutionJobStatusResponse:
      value:
        type: evaluation
        assignedCount: 1
        unassignedCount: 0
        matchedCount: 1
        jobStatus: success
        message: Job execution success.
        lastRunDate: '2019-02-21T22:09:40.000Z'
        productIds:
          - '25772719'
        limit: 10
        offset: 0
    getCategorizationStatus404:
      value:
        title: JobExecution Not Found
        type: https://api.commercecloud.salesforce.com/documentation/error/v1/errors/job-execition-not-found
        detail: No JobExecution could be found for given catalog, category
        catalogId: apparel-catalog
        category: Mens
    ExecutionRequestBody:
      value:
        evaluation: true
    GetExcludedProducts:
      value:
        limit: 2
        data:
          - productId: red-shirt
          - productId: blue-shirt
        total: 2
    ExcludedProductsRequestBody:
      value:
        data:
          - productId: red-shirt
          - productId: blue-shirt
    getRuleById404:
      value:
        title: Rule Not Found
        type: https://api.commercecloud.salesforce.com/documentation/error/v1/errors/rule-not-found
        detail: No Rule with ID 'VHRULE' could be found.
        ruleId: VHRULE
    GetRules:
      value:
        limit: 2
        data:
          - id: VHRule
            enabled: true
            exclusion: false
            categorizationLocaleId: en-US
            categorizationClassificationFlag: true
            categorizationPrimaryFlag: true
            conditions:
              - id: NameCondition
                attributeKey: name
                attributeValue:
                  - Shirt
                attributeName: name
                operator: starts_with
              - id: BrandCondition
                attributeKey: brand
                attributeValue:
                  - Van Heusen
                attributeName: brand
                operator: equals
          - id: DXRule
            enabled: true
            exclusion: false
            categorizationLocaleId: en-US
            categorizationClassificationFlag: true
            categorizationPrimaryFlag: true
            conditions:
              - id: NameCondition
                attributeKey: name
                attributeValue:
                  - Shirt
                attributeName: name
                operator: starts_with
              - id: BrandCondition
                attributeKey: brand
                attributeValue:
                  - DX
                attributeName: brand
                operator: equals
        total: 2
    PostRuleRequestBody:
      value:
        data:
          - id: VHRule
            enabled: true
            exclusion: false
            categorizationLocaleId: en-US
            categorizationClassificationFlag: true
            categorizationPrimaryFlag: true
            conditions:
              - id: NameCondition
                attributeKey: name
                attributeValue:
                  - Shirt
                operator: starts_with
              - id: BrandCondition
                attributeKey: brand
                attributeValue:
                  - Van Heusen
                operator: equals
          - id: DXRule
            enabled: true
            exclusion: false
            categorizationLocaleId: en-US
            categorizationClassificationFlag: true
            categorizationPrimaryFlag: true
            conditions:
              - id: NameCondition
                attributeKey: name
                attributeValue:
                  - Shirt
                operator: starts_with
              - id: BrandCondition
                attributeKey: brand
                attributeValue:
                  - DX
                operator: equals
    GetRulesByID:
      value:
        id: VHRule
        enabled: true
        exclusion: false
        categorizationLocaleId: en-US
        categorizationClassificationFlag: true
        categorizationPrimaryFlag: true
        conditions:
          - id: NameCondition
            attributeKey: name
            attributeValue:
              - Shirt
            attributeName: name
            operator: starts_with
          - id: BrandCondition
            attributeKey: brand
            attributeName: brand
            attributeValue:
              - Van Heusen
            operator: equals
    PutRuleRequestBody:
      value:
        id: VHRule
        enabled: true
        exclusion: false
    PutRuleUpdateResult:
      value:
        id: VHRule
        enabled: true
        exclusion: false
    GetConditions:
      value:
        limit: 2
        conditions:
          - id: NameCondition
            attributeKey: name
            attributeValue:
              - Shirt
            attributeName: name
            operator: starts_with
          - id: BrandCondition
            attributeKey: brand
            attributeValue:
              - Van Heusen
            attributeName: brand
            operator: equals
        total: 2
    GetConditionByID:
      value:
        id: NameCondition
        attributeKey: name
        attributeValue:
          - Shirt
        attributeName: name
        operator: starts_with
    PutConditionRequestBody:
      value:
        id: NameCondition
        attributeKey: brand
        attributeValue:
          - Van Heusen
        operator: equals
    CatalogSearchBody:
      value:
        start: 0
        count: 50
        query:
          boolQuery:
            should:
              - textQuery:
                  searchPhrase: Luggage
                  fields:
                    - name
    CategorySearchResultExample:
      value:
        limit: 1
        hits:
          - catalogId: storefront-catalog-en
            creationDate: '2019-02-21T22:10:04.000Z'
            id: electronics-accessories
            lastModified: '2019-02-21T22:10:49.000Z'
            name:
              default: Accessories
            online: false
            pageTitle:
              default: Electronics Accessories
            parentCategoryId: electronics
            position: 14
        query:
          termQuery:
            fields:
              - online
            operator: is
            values:
              - 'false'
        offset: 0
        total: 1
    CatalogSearchBodyQuery:
      value:
        query:
          termQuery:
            fields:
              - is_storefront_catalog
            operator: is
            values:
              - 'true'
    CatalogSearchResultQuery:
      value:
        limit: 3
        hits:
          - assignedSites:
              - cartridges: sitegenesis_storefront_pipelines:sitegenesis_storefront_core:plugin_apple_pay:plugin_facebook:plugin_pinterest_commerce:plugin_web_payments:bc_content:core
                customerListLink:
                  customerListId: Site_1
                displayName:
                  default: Site Site_1
                id: Site_1
                inDeletion: false
                storefrontStatus: online
            categoryCount: 53
            creationDate: '2019-02-22T00:11:14.000Z'
            id: NavigationCatalog_9430935
            lastModified: '2019-02-22T00:11:14.000Z'
            name:
              default: Root Category
            online: true
            recommendationCount: 0
            rootCategory: root
          - assignedSites:
              - cartridges: sitegenesis_storefront_controllers:sitegenesis_storefront_core:plugin_apple_pay:plugin_facebook:plugin_pinterest_commerce:plugin_web_payments:bc_content:core
                customerListLink:
                  customerListId: SiteGenesis
                displayName:
                  default: SiteGenesis
                id: SiteGenesis
                inDeletion: false
                storefrontStatus: online
            categoryCount: 66
            creationDate: '2019-02-21T22:10:04.000Z'
            id: storefront-catalog-en
            lastModified: '2019-02-21T22:10:04.000Z'
            name:
              it-IT: Catalogo dello storefront - IT
              default: Storefront Catalog - EN
              fr-FR: Catalogue de boutique en ligne - FR
              zh-CN: ç½‘åº—ç›®å½• - EN
              ja-JP: ã‚¹ãƒˆã‚¢ãƒ•ãƒ­ãƒ³ãƒˆã‚«ã‚¿ãƒ­ã‚° - EN
            online: true
            recommendationCount: 1865
            rootCategory: root
          - assignedSites:
              - cartridges: sitegenesis_storefront_controllers:sitegenesis_storefront_core:plugin_apple_pay:plugin_facebook:plugin_pinterest_commerce:plugin_web_payments:bc_content:core
                customerListLink:
                  customerListId: SiteGenesis
                displayName:
                  default: SiteGenesisGlobal
                id: SiteGenesisGlobal
                inDeletion: false
                storefrontStatus: online
            categoryCount: 42
            creationDate: '2019-02-21T22:10:09.000Z'
            id: storefront-catalog-non-en
            lastModified: '2019-02-21T22:10:09.000Z'
            name:
              it-IT: Storefront Catalog - Non-EN
              default: Storefront Catalog - Non-EN
              fr-FR: Catalogue de boutique en ligne - Non - EN
              zh-CN: Storefront Catalog - Non-EN
              ja-JP: ã‚¹ãƒˆã‚¢ãƒ•ãƒ­ãƒ³ãƒˆã‚«ã‚¿ãƒ­ã‚° - Non-EN
            online: true
            recommendationCount: 1865
            rootCategory: root
        query:
          termQuery:
            fields:
              - is_storefront_catalog
            operator: is
            values:
              - 'true'
        offset: 0
        total: 3
    CategorySearchBody:
      value:
        query:
          termQuery:
            fields:
              - online
            operator: is
            values:
              - 'false'
x-sdk-classname: CatalogsV1
