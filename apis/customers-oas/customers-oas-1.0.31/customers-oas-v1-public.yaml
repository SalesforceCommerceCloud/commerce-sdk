openapi: 3.0.3
info:
  title: Customers
  version: v1
  description: |-
    # API Overview

    The Customers API enables you to search for and manage customer information within a customer list. It also enables you to search for customer groups.

    Once you find the customer, you can also use the API to manage customer addresses.

    The `customerNo` is created when you create a shopper record. You can create a shopper record using the Customers API or Business Manager. For details, see [registerCustomer](https://developer.salesforce.com/docs/commerce/commerce-api/references/shopper-customers?meta=registerCustomer) and [Create and Manage Customer Records](https://developer.salesforce.com/docs/commerce/b2c-commerce/guide/b2c-customer-records.html?q=create%20customer).

    ![b2c-commerce-customers-screenshot-1.png](https://resources.docs.salesforce.com/rel1/doc/en-us/static/misc/b2c-commerce-customers-screenshot-1.png)
servers:
  - url: https://{shortCode}.api.commercecloud.salesforce.com/customer/customers/v1
    variables:
      shortCode:
        default: shortCode
paths:
  /organizations/{organizationId}/customer-lists/{customerListId}/customer-search:
    post:
      summary: Search for customers in a customer list.
      description: "Search for customers in a customer list.\nThe query attribute specifies a complex query that can be used to narrow down the search. The following list\nprovides searchable attributes:\n\n| Attribute | Type |\n|-----------|--------|\n| customerNo| String |\n| firstName | String |\n| secondName | String |\n| lastName | String |\n| suffix | String |\n| salutation | String |\n| title | String |\n| fax| String |\n| phoneHome | String |\n| phoneBusiness | String |\n| phoneMobile | String |\n| email | String |\n| gender | Integer |\n| companyName | String | \n| credentials.login | String | \n| credentials.enabled | Boolean |"
      operationId: searchCustomerInCustomerList
      parameters:
        - $ref: '#/components/parameters/customerListId'
        - $ref: '#/components/parameters/organizationId'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SearchRequest'
            examples:
              CustomerSearchBody:
                $ref: '#/components/examples/CustomerSearchBody'
        required: true
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CustomerSearchResult'
              examples:
                CustomerSearchResult:
                  $ref: '#/components/examples/CustomerSearchResult'
        '400':
          description: |
            Bad Request. Thrown when a specified parameter value is unknown.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                searchCustomerInCustomerList400:
                  $ref: '#/components/examples/searchCustomerInCustomerList400'
        '401':
          description: |
            Unauthorized. Your Client ID is invalid, or you are not allowed to access
            the content provided by the requested URL.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                searchCustomerInCustomerList401:
                  $ref: '#/components/examples/searchCustomerInCustomerList401'
        '404':
          description: Not Found. This error is thrown when the ID does not match any of the customer group sites or if the ID is ill-formed.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                searchCustomerInCustomerList404:
                  $ref: '#/components/examples/searchCustomerInCustomerList404'
      security:
        - AmOAuth2:
            - sfcc.customerlists
            - sfcc.customerlists.rw
  /organizations/{organizationId}/customer-lists/{customerListId}/customers:
    post:
      summary: Create a new customer in a customer list.
      description: |
        Create a new customer. The customer is created using the specified credentials and customer
        information. This action verifies:

          - Login acceptance criteria and uniqueness.
          - Mandatory customer properties.

        If the action fails to create the customer, it returns a 400 fault with an appropriate message.
      operationId: createCustomerList
      parameters:
        - $ref: '#/components/parameters/customerListId'
        - $ref: '#/components/parameters/organizationId'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Customer'
            examples:
              PostCustomerBody:
                $ref: '#/components/examples/PostCustomerBody'
        required: true
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Customer'
              examples:
                postCustomers:
                  $ref: '#/components/examples/postCustomers'
        '400':
          description: |
            Bad Request. Thrown when a specified parameter value is unknown.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                searchCustomerInCustomerList400:
                  $ref: '#/components/examples/searchCustomerInCustomerList400'
        '401':
          description: |
            Unauthorized. Your Client ID is invalid, or you are not allowed to access
            the content provided by the requested URL.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                searchCustomerInCustomerList401:
                  $ref: '#/components/examples/searchCustomerInCustomerList401'
        '404':
          description: Not Found. This error is thrown when the ID does not match any of the customer group sites or if the ID is ill-formed.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                searchCustomerInCustomerList404:
                  $ref: '#/components/examples/searchCustomerInCustomerList404'
      security:
        - AmOAuth2:
            - sfcc.customerlists.rw
  /organizations/{organizationId}/customer-lists/{customerListId}/customers/{customerNo}:
    get:
      summary: Get customer information.
      description: Action to get customer information.
      operationId: getCustomerFromCustomerList
      parameters:
        - $ref: '#/components/parameters/customerNo'
        - $ref: '#/components/parameters/customerListId'
        - $ref: '#/components/parameters/organizationId'
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Customer'
              examples:
                postCustomers:
                  $ref: '#/components/examples/postCustomers'
        '400':
          description: |
            Bad Request. Thrown when a specified parameter value is unknown.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                searchCustomerInCustomerList400:
                  $ref: '#/components/examples/searchCustomerInCustomerList400'
        '401':
          description: |
            Unauthorized. Your Client ID is invalid, or you are not allowed to access
            the content provided by the requested URL.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                searchCustomerInCustomerList401:
                  $ref: '#/components/examples/searchCustomerInCustomerList401'
        '404':
          description: Not Found. This error is thrown when the ID does not match any of the customer group sites or if the ID is ill-formed.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                searchCustomerInCustomerList404:
                  $ref: '#/components/examples/searchCustomerInCustomerList404'
      security:
        - AmOAuth2:
            - sfcc.customerlists
            - sfcc.customerlists.rw
    put:
      summary: Create a new customer in a customer list.
      description: |
        Create a new customer. The customer is created using the specified customer number, credentials, and
        customer information. This action verifies:

        - Login acceptance criteria and uniqueness.
        - Mandatory customer properties.

        If the action fails to create the customer, it returns a 400 fault with an appropriate message.
      operationId: createCustomerInCustomerList
      parameters:
        - $ref: '#/components/parameters/customerNo'
        - $ref: '#/components/parameters/customerListId'
        - $ref: '#/components/parameters/organizationId'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Customer'
            examples:
              PostCustomerBody:
                $ref: '#/components/examples/PostCustomerBody'
        required: true
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Customer'
              examples:
                postCustomers:
                  $ref: '#/components/examples/postCustomers'
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Customer'
              examples:
                postCustomers:
                  $ref: '#/components/examples/postCustomers'
        '400':
          description: |
            Bad Request. Thrown when a specified parameter value is unknown.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                searchCustomerInCustomerList400:
                  $ref: '#/components/examples/searchCustomerInCustomerList400'
        '401':
          description: |
            Unauthorized. Your Client ID is invalid, or you are not allowed to access
            the content provided by the requested URL.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                searchCustomerInCustomerList401:
                  $ref: '#/components/examples/searchCustomerInCustomerList401'
        '404':
          description: Not Found. This error is thrown when the ID does not match any of the customer group sites or if the ID is ill-formed.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                searchCustomerInCustomerList404:
                  $ref: '#/components/examples/searchCustomerInCustomerList404'
      security:
        - AmOAuth2:
            - sfcc.customerlists.rw
    delete:
      summary: Delete a customer from a customer list.
      description: Deletes the customer, including all related information like the customer addresses.
      operationId: deleteCustomerFromCustomerList
      parameters:
        - $ref: '#/components/parameters/customerNo'
        - $ref: '#/components/parameters/customerListId'
        - $ref: '#/components/parameters/organizationId'
      responses:
        '204':
          description: No Content
        '400':
          description: |
            Bad Request. Thrown when a specified parameter value is unknown.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                searchCustomerInCustomerList400:
                  $ref: '#/components/examples/searchCustomerInCustomerList400'
        '401':
          description: |
            Unauthorized. Your Client ID is invalid, or you are not allowed to access
            the content provided by the requested URL.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                searchCustomerInCustomerList401:
                  $ref: '#/components/examples/searchCustomerInCustomerList401'
        '404':
          description: Not Found. This error is thrown when the ID does not match any of the customer group sites or if the ID is ill-formed.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                searchCustomerInCustomerList404:
                  $ref: '#/components/examples/searchCustomerInCustomerList404'
      security:
        - AmOAuth2:
            - sfcc.customerlists.rw
    patch:
      summary: Update a customer in a customer list.
      description: |-
        Updates the customer with the specified information. The customer number can be updated, but results in a
        CustomerNumberAlreadyInUseException if there is another customer with the same customer number.
      operationId: updateCustomerInCustomerList
      parameters:
        - $ref: '#/components/parameters/customerNo'
        - $ref: '#/components/parameters/customerListId'
        - $ref: '#/components/parameters/organizationId'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Customer'
            examples:
              PostCustomerBody:
                $ref: '#/components/examples/PostCustomerBody'
        required: true
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Customer'
              examples:
                postCustomers:
                  $ref: '#/components/examples/postCustomers'
        '400':
          description: |
            Bad Request. Thrown when a specified parameter value is unknown.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                searchCustomerInCustomerList400:
                  $ref: '#/components/examples/searchCustomerInCustomerList400'
        '401':
          description: |
            Unauthorized. Your Client ID is invalid, or you are not allowed to access
            the content provided by the requested URL.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                searchCustomerInCustomerList401:
                  $ref: '#/components/examples/searchCustomerInCustomerList401'
        '404':
          description: Not Found. This error is thrown when the ID does not match any of the customer group sites or if the ID is ill-formed.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                searchCustomerInCustomerList404:
                  $ref: '#/components/examples/searchCustomerInCustomerList404'
      security:
        - AmOAuth2:
            - sfcc.customerlists.rw
  /organizations/{organizationId}/customer-lists/{customerListId}/customers/{customerNo}/addresses:
    get:
      summary: Get a list of customer addresses.
      description: |-
        Returns a list of all customer addresses in pages. The
        default page size is 10 customer addresses.
      operationId: getAddressesForCustomerFromCustomerList
      parameters:
        - $ref: '#/components/parameters/customerNo'
        - $ref: '#/components/parameters/customerListId'
        - $ref: '#/components/parameters/organizationId'
        - name: limit
          in: query
          required: false
          schema:
            type: integer
            format: int32
            default: 25
            maximum: 50
          description: Maximum records to retrieve per request, not to exceed 50. Defaults to 25.
        - name: offset
          in: query
          required: false
          schema:
            type: integer
            format: int64
            default: 0
            minimum: 0
          description: Used to retrieve the results based on a particular resource offset.
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CustomerAddressResult'
              examples:
                addressesGet:
                  $ref: '#/components/examples/addressesGet'
        '400':
          description: |
            Bad Request. Thrown when a specified parameter value is unknown.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                searchCustomerInCustomerList400:
                  $ref: '#/components/examples/searchCustomerInCustomerList400'
        '401':
          description: |
            Unauthorized. Your Client ID is invalid, or you are not allowed to access
            the content provided by the requested URL.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                searchCustomerInCustomerList401:
                  $ref: '#/components/examples/searchCustomerInCustomerList401'
        '404':
          description: Not Found. This error is thrown when the ID does not match any of the customer group sites or if the ID is ill-formed.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                searchCustomerInCustomerList404:
                  $ref: '#/components/examples/searchCustomerInCustomerList404'
      security:
        - AmOAuth2:
            - sfcc.customerlists
            - sfcc.customerlists.rw
    post:
      summary: Add a new customer address.
      description: |-
        Creates a new customer address with the given address
        information.
      operationId: createAddressForCustomerInCustomerList
      parameters:
        - $ref: '#/components/parameters/customerNo'
        - $ref: '#/components/parameters/customerListId'
        - $ref: '#/components/parameters/organizationId'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CustomerAddress'
            examples:
              AddressesBody:
                $ref: '#/components/examples/AddressesBody'
        required: true
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CustomerAddress'
              examples:
                addressesPost:
                  $ref: '#/components/examples/addressesPost'
        '400':
          description: |
            Bad Request. Thrown when a specified parameter value is unknown.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                searchCustomerInCustomerList400:
                  $ref: '#/components/examples/searchCustomerInCustomerList400'
        '401':
          description: |
            Unauthorized. Your Client ID is invalid, or you are not allowed to access
            the content provided by the requested URL.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                searchCustomerInCustomerList401:
                  $ref: '#/components/examples/searchCustomerInCustomerList401'
        '404':
          description: Not Found. This error is thrown when the ID does not match any of the customer group sites or if the ID is ill-formed.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                searchCustomerInCustomerList404:
                  $ref: '#/components/examples/searchCustomerInCustomerList404'
      security:
        - AmOAuth2:
            - sfcc.customerlists.rw
  /organizations/{organizationId}/customer-lists/{customerListId}/customers/{customerNo}/addresses/{addressId}:
    get:
      summary: Get a customer address.
      description: Action that returns a single customer address from a customer list.
      operationId: getAddressForCustomerFromCustomerList
      parameters:
        - $ref: '#/components/parameters/addressId'
        - $ref: '#/components/parameters/customerNo'
        - $ref: '#/components/parameters/customerListId'
        - $ref: '#/components/parameters/organizationId'
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CustomerAddress'
              examples:
                AddressGet:
                  $ref: '#/components/examples/AddressGet'
        '400':
          description: |
            Bad Request. Thrown when a specified parameter value is unknown.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                searchCustomerInCustomerList400:
                  $ref: '#/components/examples/searchCustomerInCustomerList400'
        '401':
          description: |
            Unauthorized. Your Client ID is invalid, or you are not allowed to access
            the content provided by the requested URL.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                searchCustomerInCustomerList401:
                  $ref: '#/components/examples/searchCustomerInCustomerList401'
        '404':
          description: Not Found. This error is thrown when the ID does not match any of the customer group sites or if the ID is ill-formed.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                searchCustomerInCustomerList404:
                  $ref: '#/components/examples/searchCustomerInCustomerList404'
      security:
        - AmOAuth2:
            - sfcc.customerlists
            - sfcc.customerlists.rw
    delete:
      summary: Delete a customer address.
      description: Deletes a customer address.
      operationId: removeAddressForCustomerInCustomerList
      parameters:
        - $ref: '#/components/parameters/addressId'
        - $ref: '#/components/parameters/customerNo'
        - $ref: '#/components/parameters/customerListId'
        - $ref: '#/components/parameters/organizationId'
      responses:
        '204':
          description: No Content
        '400':
          description: |
            Bad Request. Thrown when a specified parameter value is unknown.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                searchCustomerInCustomerList400:
                  $ref: '#/components/examples/searchCustomerInCustomerList400'
        '401':
          description: |
            Unauthorized. Your Client ID is invalid, or you are not allowed to access
            the content provided by the requested URL.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                searchCustomerInCustomerList401:
                  $ref: '#/components/examples/searchCustomerInCustomerList401'
        '404':
          description: Not Found. This error is thrown when the ID does not match any of the customer group sites or if the ID is ill-formed.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                searchCustomerInCustomerList404:
                  $ref: '#/components/examples/searchCustomerInCustomerList404'
      security:
        - AmOAuth2:
            - sfcc.customerlists.rw
    patch:
      summary: Update a customer address.
      description: Updates an address of a customer with the given address information.
      operationId: updateAddressForCustomerInCustomerList
      parameters:
        - $ref: '#/components/parameters/addressId'
        - $ref: '#/components/parameters/customerNo'
        - $ref: '#/components/parameters/customerListId'
        - $ref: '#/components/parameters/organizationId'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CustomerAddress'
            examples:
              AddressesBody:
                $ref: '#/components/examples/AddressesBody'
        required: true
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CustomerAddress'
              examples:
                addressesPost:
                  $ref: '#/components/examples/addressesPost'
        '400':
          description: |
            Bad Request. Thrown when a specified parameter value is unknown.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                searchCustomerInCustomerList400:
                  $ref: '#/components/examples/searchCustomerInCustomerList400'
        '401':
          description: |
            Unauthorized. Your Client ID is invalid, or you are not allowed to access
            the content provided by the requested URL.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                searchCustomerInCustomerList401:
                  $ref: '#/components/examples/searchCustomerInCustomerList401'
        '404':
          description: Not Found. This error is thrown when the ID does not match any of the customer group sites or if the ID is ill-formed.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                searchCustomerInCustomerList404:
                  $ref: '#/components/examples/searchCustomerInCustomerList404'
      security:
        - AmOAuth2:
            - sfcc.customerlists.rw
  /organizations/{organizationId}/customer-group-search:
    post:
      summary: Search for customer groups.
      description: |-
        Search for customer groups in a given site ID.
        The query attribute specifies a complex query that can be used to narrow down the search. The following list
        provides searchable attributes:

        | Attribute | Type |
        |-----------|--------|
        | id| String |
        | description | String |
        | type | String |

        Note: This endpoint is available with B2C Commerce version 24.2.
      operationId: searchCustomerGroup
      parameters:
        - $ref: '#/components/parameters/organizationId'
        - $ref: '#/components/parameters/siteId'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SearchRequest'
            examples:
              CustomerSearchBody:
                $ref: '#/components/examples/CustomerSearchBody'
        required: true
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CustomerGroupSearchResult'
              examples:
                CustomerGroupSearchResult:
                  $ref: '#/components/examples/CustomerGroupSearchResult'
        '400':
          description: |
            Bad Request. Thrown if the search term in term query does not match any of the customer group or if the query is ill-formed.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                searchCustomerGroup400:
                  $ref: '#/components/examples/searchCustomerGroup400'
        '401':
          description: |
            Unauthorized. Your Client ID is invalid, or you are not allowed to access
            the content provided by the requested URL.
          content:
            application/problem+json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
              examples:
                searchCustomerInCustomerList401:
                  $ref: '#/components/examples/searchCustomerInCustomerList401'
      security:
        - AmOAuth2:
            - sfcc.customergroups
            - sfcc.customergroups.rw
components:
  securitySchemes:
    AmOAuth2:
      type: oauth2
      description: AccountManager OAuth 2.0 bearer token Authentication.
      flows:
        clientCredentials:
          tokenUrl: https://account.demandware.com/dwsso/oauth2/access_token
          scopes:
            sfcc.customerlists: Customer Lists scope READONLY
            sfcc.customerlists.rw: Customer Lists scope
            sfcc.customergroups: Customer Groups scope READONLY
            sfcc.customergroups.rw: Customer Groups scope
        authorizationCode:
          authorizationUrl: https://account.demandware.com/dwsso/oauth2/authorize
          tokenUrl: https://account.demandware.com/dwsso/oauth2/access_token
          scopes:
            sfcc.customerlists: Customer Lists scope READONLY
            sfcc.customerlists.rw: Customer Lists scope
            sfcc.customergroups: Customer Groups scope READONLY
            sfcc.customergroups.rw: Customer Groups scope
  parameters:
    customerListId:
      name: customerListId
      in: path
      description: The customer list ID.
      required: true
      schema:
        maxLength: 256
        minLength: 1
        type: string
        example: Site1CustomerList
    organizationId:
      description: An identifier for the organization the request is being made by
      name: organizationId
      in: path
      required: true
      example: f_ecom_zzxy_prd
      schema:
        $ref: '#/components/schemas/OrganizationId'
    customerNo:
      name: customerNo
      in: path
      description: The customer number.
      required: true
      schema:
        maxLength: 100
        minLength: 1
        type: string
        example: 1
    addressId:
      name: addressId
      in: path
      description: The address ID.
      required: true
      schema:
        maxLength: 256
        minLength: 1
        type: string
        example: Home
    siteId:
      description: The identifier of the site that a request is being made in the context of. Attributes might have site specific values, and some objects may only be assigned to specific sites.
      name: siteId
      in: query
      required: true
      examples:
        SiteId:
          value: RefArch
      schema:
        $ref: '#/components/schemas/SiteId'
  schemas:
    OrganizationId:
      description: An identifier for the organization the request is being made by
      example: f_ecom_zzxy_prd
      type: string
      minLength: 1
      maxLength: 32
    Limit:
      default: 10
      minimum: 1
      format: int32
      description: Maximum records to retrieve per request, not to exceed the maximum defined. A limit must be at least 1 so at least one record is returned (if any match the criteria).
      type: integer
      example: 10
    Query:
      minProperties: 1
      maxProperties: 1
      description: |-
        A set of objects that define criteria used to select records. A query can contain one of the following:
        * `MatchAllQuery`
         - Matches all documents.
        * `TermQuery`
         - Matches one or more documents against one or more document fields.
        * `TextQuery`
         - Matches text against one or more fields.
        * `BoolQuery`
         - Allows construction of a logical expression of multiple queries.
        * `FilteredQuery`
         - Allows a filter to be applied to a query.
        * `NestedQuery`
         - Allows you to query on nested documents.
         - _Only supported by some Commerce APIs. For more details, see the endpoint descriptions in the API documentation._
      example:
        filteredQuery:
          query:
            textQuery:
              fields:
                - couponId
              searchPhrase: disabled
          filter:
            termFilter:
              field: enabled
              operator: is
              values:
                - false
      type: object
      properties:
        boolQuery:
          $ref: '#/components/schemas/BoolQuery'
        filteredQuery:
          $ref: '#/components/schemas/FilteredQuery'
        matchAllQuery:
          $ref: '#/components/schemas/MatchAllQuery'
        nestedQuery:
          $ref: '#/components/schemas/NestedQuery'
        termQuery:
          $ref: '#/components/schemas/TermQuery'
        textQuery:
          $ref: '#/components/schemas/TextQuery'
    BoolQuery:
      description: "A boolean query allows construction of full logical expression trees that are composed of other queries (usually term queries and text queries). A boolean query has three sets of clauses:\n  \n  - `must`, which combines as an `AND` operator.\n  - `should`, which combines as an `OR` operator.\n  - `must_not`, which combines as a `NOT` operator.\n  \nIf `must`, `mustNot`, or `should` appear in the same boolean query, they are combined logically using the `AND` operator. For example:\n\n    (must-1 AND must-1 AND ...)\n      AND (should-1 OR should-2 OR ...)\n      AND NOT (must_not-1 OR must_not-2 OR ...)\n"
      type: object
      example:
        value:
          must:
            - textQuery:
                fields:
                  - couponId
                searchPhrase: DEAL
            - textQuery:
                fields:
                  - description
                searchPhrase: Big bargain deal
          mustNot:
            - termQuery:
                fields:
                  - enabled
                operator: is
                values:
                  - false
      properties:
        must:
          description: List of queries to be evaluated as an `AND` operator.
          type: array
          items:
            $ref: '#/components/schemas/Query'
        mustNot:
          description: List of queries to be evaluated as a `NOT` operator.
          type: array
          items:
            $ref: '#/components/schemas/Query'
        should:
          description: List of queries to be evaluated as an `OR` operator.
          type: array
          items:
            $ref: '#/components/schemas/Query'
    Filter:
      minProperties: 1
      maxProperties: 1
      description: |-
        Contains a set of objects that define criteria used to select records. A filter can contain one of the following:
          * `TermFilter`
           - Matches records where a field (or fields) exactly matches some simple value (including `null`).
          * `RangeFilter`
           - Matches records where a field value lies within a specified range.
          * `Range2Filter`
           - Matches records in a specified range across fields.
          * `QueryFilter`
           - Matches records based on a query.
          * `BoolFilter`
           - Provides filtering of records using a set of filters combined using a logical operator.
      example: null
      type: object
      properties:
        boolFilter:
          $ref: '#/components/schemas/BoolFilter'
        queryFilter:
          $ref: '#/components/schemas/QueryFilter'
        range2Filter:
          $ref: '#/components/schemas/Range2Filter'
        rangeFilter:
          $ref: '#/components/schemas/RangeFilter'
        termFilter:
          $ref: '#/components/schemas/TermFilter'
    BoolFilter:
      description: Allows you to combine other filters into (possibly recursive) logical expression trees. A boolean filter is composed of a logical operator (`AND`, `OR`, `NOT`) and a list of filters that the operator relates to. Multiple filters can be negated with a single `NOT` operator, even when the filters are combined with the `AND` operator.
      example:
        value:
          operator: and
          filters:
            - termFilter:
                field: id
                operator: is
                values:
                  - myId
            - termFilter:
                field: couponId
                operator: is
                values:
                  - couponOne
      type: object
      properties:
        filters:
          description: A list of filters that are logically combined by an operator.
          type: array
          items:
            $ref: '#/components/schemas/Filter'
        operator:
          description: The logical operator that is used to combine the filters.
          enum:
            - and
            - or
            - not
          type: string
          example: and
      required:
        - operator
    QueryFilter:
      description: Wraps any query and allows it to be used as a filter.
      type: object
      properties:
        query:
          $ref: '#/components/schemas/Query'
      required:
        - query
    Field:
      description: Name of the field. Might be a custom field name prefixed with c_.
      maxLength: 260
      type: string
      example: couponId
    Range2Filter:
      description: |-
        Allows you to restrict a search result to hits where a range defined by specified attributes has a certain relationship to a specified range.

        The first range (R1) is defined by a pair of attributes (`fromField` and `toField`) that specify the extent of a range, such as attributes `validFrom` and `validTo`.

        The second range (R2) is defined by `fromValue` and `toValue`.

        The filter mode specifies the method used to compare the two ranges:

        * `overlap`: R1 overlaps fully or partially with R2.
        * `containing`: R1 contains R2.
        * `contained`: R1 is contained in R2.

        The range filter supports several value types, and relies on the natural sorting of the value type for range interpretation. Value ranges can be open-ended, but only at one end of the range. You can configure whether the lower bounds and upper bounds are inclusive or exclusive.

        A range 2 filter is useful for general restrictions that can be shared between searches (like a static date range) because the filter result is cached in memory. Range filters are not appropriate if the range is expected to be different for every query (for example, if the user controls the date range down to the hour via a UI control). Range filters are inclusive by default.
      example:
        fromField: validFrom
        toField: validTo
        filterMode: overlap
        fromValue: '2007-01-01T00:00:00.000Z'
        toValue: '2017-01-01T00:00:00.000Z'
      type: object
      properties:
        filterMode:
          default: overlap
          example: overlap
          description: 'Compare mode: overlap, containing, or contained.'
          enum:
            - overlap
            - containing
            - contained
          type: string
        fromField:
          description: The field name of the field that starts the first range.
          example: validFrom
          allOf:
            - $ref: '#/components/schemas/Field'
        fromInclusive:
          default: true
          example: true
          description: A flag indicating if the lower bound of the second range is inclusive. To make the lower bound exclusive, set to `false`.
          type: boolean
        fromValue:
          description: The lower bound of the second range. If not specified, the range is open-ended with respect to the lower bound. You can't leave both the lower and upper bounds open-ended.
          example: '2007-01-01T00:00:00.000Z'
        toField:
          description: The field name of the field that ends the first range.
          example: validTo
          allOf:
            - $ref: '#/components/schemas/Field'
        toInclusive:
          default: true
          example: true
          description: A flag indicating if the upper bound of the second range is inclusive. To make the lower bound exclusive, set to `false`.
          type: boolean
        toValue:
          description: The upper bound of the second range. If not specified, the range is open-ended with respect to the upper bound. You can't leave both the upper and lower bounds open-ended.
          example: '2017-01-01T00:00:00.000Z'
      required:
        - fromField
        - toField
    RangeFilter:
      description: |-
        Allows you to restrict a search result to hits that have values for a given attribute that fall within a given value range. The range filter supports several value types and relies on the natural sorting of the value type for range interpretation. Value ranges can be open-ended, but only at one end of the range. You can configure whether the lower bounds and upper bounds are inclusive or exclusive.

        A range filter is useful for general restrictions that can be shared between searches (like a static date range) because the filter result is cached in memory. Range filters are not appropriate if the range is expected to be different for every query (for example, if the user controls the date range down to the hour via a UI control). Range filters are inclusive by default.
      type: object
      properties:
        field:
          example: validFrom
          description: The search field.
          allOf:
            - $ref: '#/components/schemas/Field'
        from:
          description: The lower bound of the filter range. If not specified, the range is open-ended with respect to the lower bound. You can't leave both the lower and upper bounds open-ended.
          example: '2007-01-01T00:00:00.000Z'
        fromInclusive:
          default: true
          example: true
          description: A flag indicating if the lower bound of the range is inclusive. To make the lower bound exclusive, set to `false`.
          type: boolean
        to:
          description: The upper bound of the filter range. If not specified, the range is open-ended with respect to the upper bound. You can't leave both the upper and lower bounds open-ended.
          example: '2017-01-01T00:00:00.000Z'
        toInclusive:
          default: true
          example: true
          description: A flag indicating if the upper bound of the range is inclusive. To make the upper bound exclusive, set to `false`.
          type: boolean
      required:
        - field
    TermFilter:
      description: Allows you to restrict a search result to hits that match exactly one of the values configured for the filter. A term filter is useful for general restrictions that can be shared between searches. Use term filters whenever the criteria you filter on is a shared property of multiple searches (for example, like filtering by an order status). Use term filters for fields that have a discrete and small set of values only.
      example:
        field: id
        operator: is
        values:
          - myId
      type: object
      properties:
        field:
          description: The filter field.
          allOf:
            - $ref: '#/components/schemas/Field'
        operator:
          description: The operator used to compare the field's values with the given values.
          example: is
          enum:
            - is
            - one_of
            - is_null
            - is_not_null
            - less
            - greater
            - not_in
            - neq
          type: string
        values:
          description: The filter values.
          type: array
          items:
            type: string
            example: myId
      required:
        - field
        - operator
    FilteredQuery:
      description: Allows to filter the result of a possibly complex query using a possibly complex filter.
      example:
        query:
          textQuery:
            fields:
              - couponId
            searchPhrase: disabled
        filter:
          termFilter:
            field: enabled
            operator: is
            values:
              - false
      type: object
      properties:
        filter:
          $ref: '#/components/schemas/Filter'
        query:
          $ref: '#/components/schemas/Query'
      required:
        - filter
        - query
    MatchAllQuery:
      description: Matches all documents (namespace and document type). This query comes in handy if you just want to filter a search result or really do not have any constraints.
      type: object
    NestedQuery:
      description: "Allows you to query nested documents that are part of a larger document. Say, for example, that you have a main product with variations in one big document, and you want to constrain a search to main products that have variations that match multiple constraints. \n\nA `NestedQuery` is only supported by some Commerce APIs. For more details, see the endpoint descriptions in the API documentation.\n"
      example:
        path: order.shippingAddresses
        query:
          boolQuery:
            must:
              - boolQuery:
                  must:
                    - termQuery:
                        fields:
                          - order.shippingAddresses.firstName
                        operator: is
                        values:
                          - John
              - boolQuery:
                  must:
                    - termQuery:
                        fields:
                          - order.shippingAddresses.lastName
                        operator: is
                        values:
                          - Doe
        scoreMode: avg
      type: object
      properties:
        path:
          description: The path to the nested document.
          type: string
          example: order.shippingAddresses
          maxLength: 2048
        query:
          $ref: '#/components/schemas/Query'
        scoreMode:
          description: Indicates how scores for matching child objects affect the root parent document’s relevance score.
          enum:
            - avg
            - total
            - max
            - none
          type: string
          example: avg
      required:
        - path
        - query
    TermQuery:
      description: |-
        A term query matches one or more values against one or more document fields. A document is considered a hit if one of the values matches exactly with at least one of the given fields. The operator `is` can only take one value, while `one_of` can take multiple values. If multiple fields are specified, they are combined using a logical `OR` operator.

        **Limitations:**

        * The `greater` and `less` operators are not supported under certain conditions. Both operators are permitted unless the API documentation states otherwise.
        * A subset of Commerce APIs handle queries with multiple fields differently. If the query has multiple fields, the query is internally handled as a logical `OR` of `DisjointMaxQueries` (with the dismax matching a value against all fields). The dismax makes sure that a document carrying a single term in multiple fields does not get higher scores than a document matching multiple terms in multiple fields.
      type: object
      properties:
        fields:
          minItems: 1
          description: The document fields that the values are matched against, combined with the operator.
          type: array
          items:
            $ref: '#/components/schemas/Field'
        operator:
          description: Returns the operator to use for the term query.
          enum:
            - is
            - one_of
            - is_null
            - is_not_null
            - less
            - greater
            - not_in
            - neq
          type: string
          example: is
        values:
          description: The values that the fields are compared against, combined with the operator.
          type: array
          items:
            type: string
            example: myCouponId
      required:
        - fields
        - operator
    TextQuery:
      description: A text query is used to match some text (for example, a search phrase possibly consisting of multiple terms) against one or more fields. When multiple fields are provided, the phrase conceptually forms a logical `OR` over the fields. In this case, the terms of the phrase basically have to match within the text, that would result in concatenating all given fields.
      example:
        fields:
          - couponId
        searchPhrase: limit
      type: object
      properties:
        fields:
          minItems: 1
          description: The document fields that the search phrase matches against.
          type: array
          items:
            $ref: '#/components/schemas/Field'
        searchPhrase:
          description: A search phrase, which can include multiple terms separated by spaces.
          type: string
          example: campaign summer
      required:
        - fields
        - searchPhrase
    String256:
      type: string
      maxLength: 256
      description: "The String256 schema is a foundational schema designed for fields or attributes that are stored in a database field with a maximum capacity of 256 bytes. \nThis schema accommodates various character sets, with the following considerations:\n  - ASCII Characters: Each ASCII character occupies 1 byte, allowing up to 256 characters.\n  - Latin Characters: Many Latin characters require 2 bytes each, allowing up to 128 characters.\n  - Asian Characters: Many Asian characters require 3 bytes each, allowing approximately 85 characters."
      example: Max Mustermann
    Sort:
      description: Document representing a sort request. Each API has a different default sort configuration that can be modified in the request.
      example:
        field: couponId
        sortOrder: desc
      type: object
      properties:
        field:
          description: The name of the field to sort on.
          allOf:
            - $ref: '#/components/schemas/String256'
        sortOrder:
          default: asc
          description: The sort order to be applied when sorting. When omitted, the default sort order (asc) is used.
          example: asc
          enum:
            - asc
            - desc
          type: string
      required:
        - field
    Offset:
      default: 0
      minimum: 0
      format: int64
      description: The zero-based index of the first hit/data to include in the result.
      type: integer
      example: 0
    SearchRequest:
      description: Document representing a search request for retrieving items within the Data API. The query is a potentially complex set of expressions. The fields and expands that each query supports are defined within the search resource.
      type: object
      properties:
        limit:
          description: Maximum records to retrieve per request, not to exceed 200.
          example: 10
          maximum: 200
          allOf:
            - $ref: '#/components/schemas/Limit'
        query:
          $ref: '#/components/schemas/Query'
        sorts:
          description: The list of sort clauses configured for the search request. Sort clauses are optional. See the description of the search endpoint for details on the default sorting behavior that is used when explicit sorts are not passed.
          type: array
          items:
            $ref: '#/components/schemas/Sort'
        offset:
          $ref: '#/components/schemas/Offset'
      required:
        - query
    Total:
      default: 0
      minimum: 0
      format: int64
      description: The total number of hits that match the search's criteria. This can be greater than the number of results returned as search results are pagenated.
      type: integer
      example: 10
    ResultBase:
      description: "Schema defining generic list result. Each response schema of a resource requiring a list response should extend this schema. \nAdditionally it needs to be defined what data is returned."
      type: object
      required:
        - limit
        - total
      properties:
        limit:
          maximum: 200
          allOf:
            - $ref: '#/components/schemas/Limit'
        total:
          $ref: '#/components/schemas/Total'
    PaginatedResultBase:
      description: "Schema defining generic pageable result. Each response schema of a resource requiring pagination should extend this schema. \nIf you use this extend this schema directly, it needs to be defined what data is returned. Allowed names for the data field is `data`."
      type: object
      allOf:
        - $ref: '#/components/schemas/ResultBase'
      properties:
        offset:
          $ref: '#/components/schemas/Offset'
      required:
        - limit
        - offset
        - total
    PaginatedSearchResult:
      description: Document representing a generic search result. Each search resource should extend this to define what is returned in the `hits`.
      properties:
        query:
          $ref: '#/components/schemas/Query'
        sorts:
          description: The sorting that was applied to the result.
          type: array
          items:
            $ref: '#/components/schemas/Sort'
        hits:
          description: The sorted array of search hits. Can be empty.
          type: array
          items:
            type: object
      allOf:
        - $ref: '#/components/schemas/PaginatedResultBase'
      type: object
      required:
        - query
      example:
        limit: 1
        hits:
          - couponId: coupon1
            creationDate: '2019-10-20T12:00:00Z'
            description: This coupon is used to give 10% off stuff.
            enabled: false
            exportedCodeCount: 0
            lastModified: '2019-10-30T04:23:59Z'
            redemptionCount: 3
            redemptionLimits:
              limitPerCode: 1
              limitPerCustomer: 1
              limitPerTimeFrame:
                limit: 2
                redemptionTimeFrame: 24
            singleCode: MyCode
            systemCodesConfig:
              codePrefix: SG
              numberOfCodes: 500000
            totalCodesCount: 50
            type: single_code
        query:
          textQuery:
            fields:
              - id
              - description
            searchPhrase: stuff
        sorts:
          - field: couponId
            sortOrder: desc
        offset: 2
        total: 8
    Credentials:
      required:
        - login
      type: object
      properties:
        enabled:
          type: boolean
          description: A flag indicating whether the customer is enabled and can log in.
          example: true
        locked:
          type: boolean
          description: A flag indicating whether the customer account is locked.
          example: false
        login:
          maxLength: 256
          type: string
          description: The login of the customer.
          example: wleung
        passwordQuestion:
          maxLength: 256
          type: string
          description: The password question.
          example: Pet Name?
      description: Document representing the credentials of a customer.
    CustomerAddress:
      required:
        - addressId
        - countryCode
        - lastName
      type: object
      additionalProperties:
        title: Additional Property Support
        description: |-
          This type supports additional properties passed along with the defined properties of this API.
          To indicate that the properties were defined and expected to be handled as additional properties, they are expected to be prefixed with a `c_`.
          The type will reject any property that does not fit this pattern, only allowing additional properties beginning with the known prefix.
        example: c_trackingId
      properties:
        address1:
          maxLength: 256
          type: string
          description: The customer's first address.
          example: 123 Trailblazer Ave.
        address2:
          maxLength: 256
          type: string
          description: The customer's second address value.
          example: ''
        addressId:
          maxLength: 256
          type: string
          description: The customer address ID.
          example: Home
        city:
          maxLength: 256
          type: string
          description: The customer's city.
          example: San Francisco
        companyName:
          maxLength: 256
          type: string
          description: The customer's company name.
          example: Ursa Major Solar
        countryCode:
          maxLength: 2
          type: string
          description: The customer's two-character country code per ISO 3166-1 alpha-2.
          example: US
        creationDate:
          type: string
          description: Returns the value of attribute 'creationDate'.
          format: date-time
          example: '9999-12-31T00:00:00.0Z'
        etag:
          type: string
          description: The generated eTag representing the state of the customer address.
          example: 0267dee58b0ddd9a13f27309470b84f5b2b7e00fa53dfcf400c1f7a5661f319d
        firstName:
          maxLength: 256
          type: string
          description: The customer's first name.
          example: Wei
        fullName:
          maxLength: 1027
          type: string
          description: The concatenation of the customer's first, middle, last names, and suffix.
          example: Wei Leung
        jobTitle:
          maxLength: 256
          type: string
          description: The customer's job title.
          example: ''
        lastModified:
          type: string
          description: Returns the value of attribute 'lastModified'.
          format: date-time
          example: '9999-12-31T00:00:00.0Z'
        lastName:
          maxLength: 256
          type: string
          description: The customer's last name.
          example: Leung
        phone:
          maxLength: 32
          type: string
          description: The customer's phone number.
          example: 415-555-1212
        postBox:
          maxLength: 256
          type: string
          description: The customer's post box.
          example: ''
        postalCode:
          maxLength: 256
          type: string
          description: The customer's postal code.
          example: 94105
        salutation:
          maxLength: 256
          type: string
          description: The customer's salutation.
          example: Ms.
        secondName:
          maxLength: 256
          type: string
          description: The customer's second name.
          example: Leung
        stateCode:
          maxLength: 256
          type: string
          description: The customer's state.
          example: CA
        suffix:
          maxLength: 256
          type: string
          description: The customer's suffix.
          example: ''
        suite:
          maxLength: 32
          type: string
          description: The customer's suite.
          example: ''
        title:
          maxLength: 256
          type: string
          description: The customer's title.
          example: ''
      description: Any address that is associated with a customer (billing, shipping, mailing, and so on).
    Customer:
      required:
        - customerNo
        - lastName
      type: object
      additionalProperties:
        title: Additional Property Support
        description: |-
          This type supports additional properties passed along with the defined properties of this API.
          To indicate that the properties were defined and expected to be handled as additional properties, they are expected to be prefixed with a `c_`.
          The type will reject any property that does not fit this pattern, only allowing additional properties beginning with the known prefix.
        example: c_trackingId
      properties:
        birthday:
          type: string
          description: The customer's birthday.
          format: date
          example: '1999-12-31'
        companyName:
          maxLength: 256
          type: string
          description: The customer's company name.
          example: Ursa Major Solar
        creationDate:
          type: string
          description: Returns the value of attribute 'creationDate'.
          format: date-time
          example: '9999-12-31T00:00:00.0Z'
        credentials:
          $ref: '#/components/schemas/Credentials'
        customerId:
          maxLength: 28
          type: string
          description: |-
            The customer's ID. Both registered and guest customers have a
             customer ID.
          example: wleung
        customerNo:
          maxLength: 100
          type: string
          description: The customer's number.
          example: D100201
        email:
          maxLength: 256
          type: string
          description: The customer's email address.
          example: wleung@example.com
        fax:
          maxLength: 32
          type: string
          description: |-
            The customer's fax number.
             The length is restricted to 32 characters.
          example: 415-555-1213
        firstName:
          maxLength: 256
          type: string
          description: The customer's first name.
          example: Wei
        gender:
          type: integer
          description: The customer's gender.
          format: int32
          example: 2
        jobTitle:
          maxLength: 256
          type: string
          description: The customer's job title.
          example: ''
        lastLoginTime:
          type: string
          description: The last login time of the customer.
          format: date-time
          example: '9999-12-31T00:00:00.0Z'
        lastModified:
          type: string
          description: Returns the value of attribute 'lastModified'.
          format: date-time
          example: '9999-12-31T00:00:00.0Z'
        lastName:
          maxLength: 256
          type: string
          description: The customer's last name.
          example: Leung
        lastVisitTime:
          type: string
          description: The last visit time of the customer.
          format: date-time
          example: '9999-12-31T00:00:00.0Z'
        phoneBusiness:
          maxLength: 32
          type: string
          description: The customer's business phone number.
          example: 333-333-3333
        phoneHome:
          maxLength: 32
          type: string
          description: The customer's home phone number.
          example: 415-555-1211
        phoneMobile:
          maxLength: 32
          type: string
          description: The customer's mobile phone number.
          example: 415-555-1212
        preferredLocale:
          maxLength: 5
          type: string
          description: The customer's preferred locale.
          example: en_US
        previousLoginTime:
          type: string
          description: The time when the customer previously logged in.
          format: date-time
          example: '9999-12-31T00:00:00.0Z'
        previousVisitTime:
          type: string
          description: The time when the customer previously visited the store.
          format: date-time
          example: '9999-12-31T00:00:00.0Z'
        primaryAddress:
          $ref: '#/components/schemas/CustomerAddress'
        salutation:
          maxLength: 256
          type: string
          description: The customer's salutation.
          example: Ms.
        secondName:
          maxLength: 256
          type: string
          description: The customer's second name.
          example: Leung
        suffix:
          maxLength: 256
          type: string
          description: The customer's suffix (for example, "Jr." or "Sr.").
          example: ''
        title:
          maxLength: 256
          type: string
          description: The customer's title (for example, "Mrs" or "Mr").
          example: ''
      description: Person or entity who shops on Commerce Cloud storefronts by creating a shopper account in Commerce Cloud.
    CustomerSearchHit:
      description: Document representing a customer search hit.
      type: object
      required:
        - data
        - relevance
      properties:
        data:
          description: List of found customers.
          allOf:
            - $ref: '#/components/schemas/Customer'
        relevance:
          description: The hit's relevance score.
          type: number
          format: double
          example: 1
    CustomerSearchResult:
      type: object
      required:
        - hits
      allOf:
        - $ref: '#/components/schemas/PaginatedSearchResult'
      properties:
        hits:
          items:
            $ref: '#/components/schemas/CustomerSearchHit'
          type: array
          description: The sorted array of search hits. Can be empty.
          example:
            - customerNo: D100201
              lastName: Leung
      description: Document representing a customer search result.
      example:
        value:
          hits:
            - data:
                birthday: '1999-12-31'
                companyName: Salesforce
                creationDate: '2023-07-21T07:29:39.505Z'
                credentials:
                  enabled: true
                  locked: false
                  login: af4ab358-3187-4ec5-82a6-918e0fe8a21f
                customerId: absAzIVSkman3GPpSYluYBbLrB
                customerNo: '00000012'
                email: w.leung@gmail.com
                fax: 123-123-1234
                firstName: Wei
                gender: 1
                lastModified: '2023-07-21T07:29:39.506Z'
                lastName: Leung
                phoneBusiness: 123-123-1234
                phoneHome: 123-123-1234
                phoneMobile: 123-123-1234
                preferredLocale: en-US
                salutation: Dr.
                secondName: J
                suffix: Jr.
                title: Mr.
              relevance: 4.258296012878418
          limit: 1
          offset: 0
          query:
            textQuery:
              fields:
                - email
              searchPhrase: w.leung@gmail.com
          total: 1
    ErrorResponse:
      type: object
      additionalProperties: true
      properties:
        title:
          description: "A short, human-readable summary of the problem\ntype.  It will not change from occurrence to occurrence of the \nproblem, except for purposes of localization\n"
          type: string
          maxLength: 256
          example: You do not have enough credit
        type:
          description: |
            A URI reference [RFC3986] that identifies the
            problem type.  This specification encourages that, when
            dereferenced, it provide human-readable documentation for the
            problem type (e.g., using HTML [W3C.REC-html5-20141028]).  When
            this member is not present, its value is assumed to be
            "about:blank". It accepts relative URIs; this means
            that they must be resolved relative to the document's base URI, as
            per [RFC3986], Section 5.
          type: string
          maxLength: 2048
          example: NotEnoughMoney
        detail:
          description: A human-readable explanation specific to this occurrence of the problem.
          type: string
          example: Your current balance is 30, but that costs 50
        instance:
          description: |
            A URI reference that identifies the specific
            occurrence of the problem.  It may or may not yield further
            information if dereferenced.  It accepts relative URIs; this means
            that they must be resolved relative to the document's base URI, as
            per [RFC3986], Section 5.
          type: string
          maxLength: 2048
          example: /account/12345/msgs/abc
      required:
        - title
        - type
        - detail
    CustomerAddressResult:
      type: object
      allOf:
        - $ref: '#/components/schemas/PaginatedResultBase'
      properties:
        data:
          items:
            $ref: '#/components/schemas/CustomerAddress'
          type: array
          description: The array of customer address documents.
      description: Result document containing an array of customer addresses.
    SiteId:
      minLength: 1
      maxLength: 32
      description: The identifier of the site that a request is being made in the context of. Attributes might have site specific values, and some objects may only be assigned to specific sites
      example: RefArch
      type: string
    CustomerGroupRule:
      required:
        - description
      type: object
      properties:
        description:
          type: string
          description: Customer Group Rule description. Describing its conditions in natural language.
          example: Customers who spend more than $1000 in the last month
      description: Customer Group Rule
    CustomerGroup:
      required:
        - creationDate
        - description
        - id
        - inDeletion
        - memberCount
        - rule
        - type
      type: object
      additionalProperties:
        title: Additional Property Support
        description: |-
          This type supports additional properties passed along with the defined properties of this API.
          To indicate that the properties were defined and expected to be handled as additional properties, they are expected to be prefixed with a `c_`.
          The type will reject any property that does not fit this pattern, only allowing additional properties beginning with the known prefix.
        example: c_trackingId
      properties:
        creationDate:
          type: string
          format: date-time
          description: The date the customer group was created.
          example: '9999-12-31T00:00:00.0Z'
        description:
          maxLength: 4000
          type: string
          description: Customer Group description.
          example: Customers who spent more than $1000 in last month
        id:
          maxLength: 256
          type: string
          description: Customer Group id.
          example: Big Spenders
        inDeletion:
          type: boolean
          description: Boolean to indicate if the customer group is marked for deletion.
          example: false
        memberCount:
          type: integer
          description: Number of members in the customer group
          example: 109
        rule:
          $ref: '#/components/schemas/CustomerGroupRule'
        type:
          type: string
          description: Customer Group Type.
          example: static
          enum:
            - system
            - dynamic
            - static
      description: Document representing a customer group.
    CustomerGroupSearchResult:
      type: object
      required:
        - hits
      allOf:
        - $ref: '#/components/schemas/PaginatedSearchResult'
      properties:
        hits:
          items:
            $ref: '#/components/schemas/CustomerGroup'
          type: array
          description: The sorted array of search hits. Can be empty.
      description: Document representing a customer group search result.
      example:
        value:
          limit: 1
          hits:
            - creationDate: '2020-01-09T16:50:32.000Z'
              description: Big Spenders
              id: Big Spenders
              inDeletion: false
              lastModified: '2020-01-09T16:50:32.000Z'
              memberCount: 109
              rule:
                description: Customers who spend more than $1000 in the last month
              type: dynamic
          query:
            textQuery:
              fields:
                - id
              searchPhrase: Big
          offset: 0
          total: 1
  examples:
    CustomerSearchBody:
      value:
        limit: 2
        offset: 50
        query:
          textQuery:
            fields:
              - email
            searchPhrase: wleung
    CustomerSearchResult:
      value:
        hits:
          - data:
              birthday: '1999-12-31'
              companyName: Salesforce
              creationDate: '2023-07-21T07:29:39.505Z'
              credentials:
                enabled: true
                locked: false
                login: af4ab358-3187-4ec5-82a6-918e0fe8a21f
              customerId: absAzIVSkman3GPpSYluYBbLrB
              customerNo: '00000012'
              email: w.leung@gmail.com
              fax: 123-123-1234
              firstName: Wei
              gender: 1
              lastModified: '2023-07-21T07:29:39.506Z'
              lastName: Leung
              phoneBusiness: 123-123-1234
              phoneHome: 123-123-1234
              phoneMobile: 123-123-1234
              preferredLocale: en-US
              salutation: Dr.
              secondName: J
              suffix: Jr.
              title: Mr.
            relevance: 4.258296012878418
        limit: 1
        offset: 0
        query:
          textQuery:
            fields:
              - email
            searchPhrase: w.leung@gmail.com
        total: 1
    searchCustomerInCustomerList400:
      value:
        title: Bad Request
        type: https://api.commercecloud.salesforce.com/documentation/error/v1/errors/invalid-query-parameter
        detail: offset-BAD-REQUEST parameters are not defined in RAML.
    searchCustomerInCustomerList401:
      value:
        title: Invalid Access Token
        type: https://api.commercecloud.salesforce.com/documentation/error/v1/errors/invalid-access-token
        detail: The request is unauthorized, the access token is invalid.
        accessToken: hbGciOiJIUzI1NiIsInR5cCI6Ikp
    searchCustomerInCustomerList404:
      value:
        title: Customer List Not Found
        type: https://api.commercecloud.salesforce.com/documentation/error/v1/errors/customer-list-not-found
        detail: No customer list with ID 'SiteGenesis-NOT-FOUND' could be found.
        listId: SiteGenesis-NOT-FOUND
    PostCustomerBody:
      value:
        credentials:
          enabled: true
          locked: false
          login: wleung
          passwordQuestion: ''
        lastName: Leung
        customerNo: '00005002'
    postCustomers:
      value:
        creationDate: '2019-09-23T19:46:07.412Z'
        credentials:
          enabled: true
          locked: false
          login: wleung
        customerId: adg2p1zObo8JDt3iXZCNIZBcai
        customerNo: '00005001'
        lastModified: '2019-09-23T19:46:07.417Z'
        lastName: Leung
    addressesGet:
      value:
        data:
          - addressId: '1'
            city: San Francisco
            companyName: Ursa Major Solar
            countryCode: US
            creationDate: '2019-09-23T16:14:07.000Z'
            etag: d288bfd83f75b23640b4bbab2b0d3f65a5c5e934dab818f2246b7c1aed5672f8
            firstName: Wei
            fullName: Leung
            jobTitle: ''
            lastModified: '2019-09-23T16:23:19.000Z'
            lastName: Leung
            phone: 415-555-1212
            postalCode: '94105'
            salutation: Ms
            secondName: ''
            stateCode: CA
        limit: 1
        offset: 0
        total: 1
    AddressesBody:
      value:
        addressId: '2'
        address1: 123 Trailblazer Ave.
        postalCode: '94105'
        lastName: Leung
        title: ''
        salutation: Ms
        companyName: Ursa Major Solar
        secondName: ''
        phone: 415-555-1212
        countryCode: US
        city: San Francisco
        address2: ''
        firstName: Wei
        jobTitle: ''
        stateCode: CA
    addressesPost:
      value:
        addressId: '3'
        city: San Francisco
        companyName: Ursa Major Solar
        countryCode: US
        creationDate: '2019-09-23T20:49:38.370Z'
        etag: 8772fd1c59fed8313a6c1ad260544c116dc0af4bc13941957173244edba47d31
        firstName: Wei
        fullName: Wei Leung
        jobTitle: ''
        lastModified: '2019-09-23T20:49:38.372Z'
        lastName: Leung
        phone: 415-555-1212
        postalCode: '94105'
        salutation: Ms
        secondName: ''
        stateCode: CA
    AddressGet:
      value:
        address1: 123 Trailblazer Ave.
        address2: ''
        addressId: HomeAddress
        city: San Francisco
        companyName: ''
        countryCode: US
        firstName: Wei
        fullName: Wei Leung
        jobTitle: ''
        lastName: Leung
        phone: ''
        postalCode: ''
        postBox: ''
        salutation: Ms.
        secondName: ''
        stateCode: CA
        suffix: ''
        suite: ''
        title: ''
    CustomerGroupSearchResult:
      value:
        limit: 1
        hits:
          - creationDate: '2020-01-09T16:50:32.000Z'
            description: Big Spenders
            id: Big Spenders
            inDeletion: false
            lastModified: '2020-01-09T16:50:32.000Z'
            memberCount: 109
            rule:
              description: Customers who spend more than $1000 in the last month
            type: dynamic
        query:
          textQuery:
            fields:
              - id
            searchPhrase: Big
        offset: 0
        total: 1
    searchCustomerGroup400:
      value:
        title: Customer Group Type Invalid
        type: https://api.commercecloud.salesforce.com/documentation/error/v1/errors/invalid-query-parameter
        detail: The customer group type 'stat' is invalid.
